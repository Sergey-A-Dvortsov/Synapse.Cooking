<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>StockSharp.Logging</name>
  </assembly>
  <members>
    <member name="T:StockSharp.Logging.ConsoleLogListener">
      <summary>Логгер, записывающий данные в консольное окно.</summary>
    </member>
    <member name="M:StockSharp.Logging.ConsoleLogListener.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.ConsoleLogListener" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.ConsoleLogListener.OnWriteMessage(StockSharp.Logging.LogMessage)">
      <summary>Записать сообщение.</summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="T:StockSharp.Logging.DebugLogListener">
      <summary>Логгер стратегии, записывающий данные в отладочное окно.</summary>
    </member>
    <member name="M:StockSharp.Logging.DebugLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
      <summary>Записать сообщения.</summary>
      <param name="messages">Отладочные сообщения.</param>
    </member>
    <member name="T:StockSharp.Logging.EmailLogListener">
      <summary>Логгер, отсылающий данные на email.</summary>
    </member>
    <member name="M:StockSharp.Logging.EmailLogListener.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.EmailLogListener" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.EmailLogListener.From">
      <summary>Адрес, от имени которого будет отправлено сообщение.</summary>
    </member>
    <member name="P:StockSharp.Logging.EmailLogListener.To">
      <summary>Адрес, куда будет отправлено сообщение.</summary>
    </member>
    <member name="M:StockSharp.Logging.EmailLogListener.CreateClient">
      <summary>Создать email клиента.</summary>
      <returns>Email клиент.</returns>
    </member>
    <member name="M:StockSharp.Logging.EmailLogListener.GetSubject(StockSharp.Logging.LogMessage)">
      <summary>Создать заголовок.</summary>
      <param name="message">Отладочное сообщение.</param>
      <returns>Заголовок.</returns>
    </member>
    <member name="M:StockSharp.Logging.EmailLogListener.EnqueueMessage(StockSharp.Logging.LogMessage)">
      <summary>Добавить сообщение в очередь на отправку.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Logging.EmailLogListener.OnWriteMessage(StockSharp.Logging.LogMessage)">
      <summary>Записать сообщение.</summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Logging.EmailLogListener.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.EmailLogListener.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.EmailLogListener.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Logging.ErrorLoggingAttribute">
      <summary>Атрибут для WCF сервер, который автоматически записывает все ошибки в <see cref="M:StockSharp.Logging.LoggingHelper.LogError(System.Exception,System.String)" />.</summary>
    </member>
    <member name="T:StockSharp.Logging.ExternalLogListener">
      <summary>Логгер, отсылающий сообщения во внешний приемник <see cref="T:StockSharp.Logging.ILogListener" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.ExternalLogListener.#ctor(StockSharp.Logging.ILogListener)">
      <summary>Создать <see cref="T:StockSharp.Logging.ExternalLogListener" />.</summary>
      <param name="logger">Внешний приемник сообщений.</param>
    </member>
    <member name="P:StockSharp.Logging.ExternalLogListener.Logger">
      <summary>Внешний приемник сообщений.</summary>
    </member>
    <member name="M:StockSharp.Logging.ExternalLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
      <summary>Записать сообщения.</summary>
      <param name="messages">Отладочные сообщения.</param>
    </member>
    <member name="T:StockSharp.Logging.SeparateByDateModes">
      <summary>Режимы разделения лог файлов по датам.</summary>
    </member>
    <member name="F:StockSharp.Logging.SeparateByDateModes.None">
      <summary>Не разделять. Разделение выключено.</summary>
    </member>
    <member name="F:StockSharp.Logging.SeparateByDateModes.FileName">
      <summary>Разделять через добавление к названию файла.</summary>
    </member>
    <member name="F:StockSharp.Logging.SeparateByDateModes.SubDirectories">
      <summary>Разделять через поддиректории.</summary>
    </member>
    <member name="T:StockSharp.Logging.FileLogListener">
      <summary>Логгер, записывающий данные в текстовый файл.</summary>
    </member>
    <member name="M:StockSharp.Logging.FileLogListener.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.FileLogListener" />. Для каждого <see cref="T:StockSharp.Logging.ILogSource" /> будет создан отдельный файл с названием, равный <see cref="P:StockSharp.Logging.ILogSource.Name" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.FileLogListener.#ctor(System.String)">
      <summary>Создать <see cref="T:StockSharp.Logging.FileLogListener" />. Все сообщения из <see cref="E:StockSharp.Logging.ILogSource.Log" /> будут записываться в файл <paramref name="fileName" />.</summary>
      <param name="fileName">Название текстового файла, в который будут писаться сообщения из события <see cref="E:StockSharp.Logging.ILogSource.Log" />.</param>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.FileName">
      <summary>Название текстового файла (без расширения), в который будут писаться сообщения из события <see cref="E:StockSharp.Logging.ILogSource.Log" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.Encoding">
      <summary>Кодировка файла. По умолчанию используется кодировка UTF-8.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.MaxLength">
      <summary>Максимальная длина файла лога. По-умолчанию установлено 0, что значит файл будет иметь неограниченный размер.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.MaxCount">
      <summary>Максимальное количество роллируемых файлов. По-умолчанию установлено 0, что значит файлы будут роллироваться без ограничения.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.Append">
      <summary>Добавлять ли в файл данные, если он уже существует. По-умолчанию выключено.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.LogDirectory">
      <summary>Директория, где будет создан файл лога. По умолчанию - директория с исполняемым файлом.</summary>
      <remarks>Если директория не существует, она будет создана.</remarks>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.WriteChildDataToRootFile">
      <summary>Записывать данные дочерних источников в файл родителя. По-умолчанию режим включен.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.Extension">
      <summary>Расширение лог файлов. По-умолчанию значение равно txt.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.WriteSourceId">
      <summary>Выводить в файл идентификатор источника <see cref="P:StockSharp.Logging.ILogSource.Id" />. По-умолчанию выключено.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.DirectoryDateFormat">
      <summary>Формат названия директории, представляющий дату. По-умолчанию используется yyyy_MM_dd.</summary>
    </member>
    <member name="P:StockSharp.Logging.FileLogListener.SeparateByDates">
      <summary>Режим разделения лог файлов по датам. По умолчанию режим равен <see cref="F:StockSharp.Logging.SeparateByDateModes.None" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.FileLogListener.OnCreateWriter(System.String)">
      <summary>Создать текстового писателя.</summary>
      <param name="fileName">Название текстового файла, в которое будут писаться сообщения из события <see cref="E:StockSharp.Logging.ILogSource.Log" />.</param>
      <returns>Текстовый писатель.</returns>
    </member>
    <member name="M:StockSharp.Logging.FileLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
      <summary>Записать сообщения.</summary>
      <param name="messages">Отладочные сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.FileLogListener.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.FileLogListener.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.FileLogListener.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Logging.ILogListener">
      <summary>Интерфейс класса, который мониторит событие <see cref="E:StockSharp.Logging.ILogSource.Log" /> и сохраняет в некое хранилище.</summary>
    </member>
    <member name="M:StockSharp.Logging.ILogListener.WriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
      <summary>Записать сообщения.</summary>
      <param name="messages">Отладочные сообщения.</param>
    </member>
    <member name="T:StockSharp.Logging.ILogReceiver">
      <summary>Интерфейс получателя логов.</summary>
    </member>
    <member name="M:StockSharp.Logging.ILogReceiver.AddLog(StockSharp.Logging.LogMessage)">
      <summary>Записать сообщение в лог.</summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="T:StockSharp.Logging.BaseLogReceiver">
      <summary>Базовая реализация <see cref="T:StockSharp.Logging.ILogReceiver" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.BaseLogReceiver.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Logging.BaseLogReceiver" />.</summary>
    </member>
    <member name="T:StockSharp.Logging.ILogSource">
      <summary>Интерфейс источника логов.</summary>
    </member>
    <member name="P:StockSharp.Logging.ILogSource.Id">
      <summary>Уникальный идентификатор источника.</summary>
    </member>
    <member name="P:StockSharp.Logging.ILogSource.Name">
      <summary>Имя источника.</summary>
    </member>
    <member name="P:StockSharp.Logging.ILogSource.Parent">
      <summary>Родительский источник логов.</summary>
    </member>
    <member name="P:StockSharp.Logging.ILogSource.LogLevel">
      <summary>Уровень логирования для источника.</summary>
    </member>
    <member name="P:StockSharp.Logging.ILogSource.CurrentTime">
      <summary>Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.ILogSource.IsRoot">
      <summary>Является ли источник корнем (даже при <see cref="P:StockSharp.Logging.ILogSource.Parent" /> не равным <see langword="null" />).</summary>
    </member>
    <member name="E:StockSharp.Logging.ILogSource.Log">
      <summary>Событие нового отладочного сообщения.</summary>
    </member>
    <member name="T:StockSharp.Logging.BaseLogSource">
      <summary>Базовая реализация <see cref="T:StockSharp.Logging.ILogSource" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.BaseLogSource.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Logging.BaseLogSource" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.BaseLogSource.Id">
      <summary>Уникальный идентификатор источника.</summary>
    </member>
    <member name="P:StockSharp.Logging.BaseLogSource.Name">
      <summary>Название источника (для различия в лог файлах).</summary>
    </member>
    <member name="P:StockSharp.Logging.BaseLogSource.Parent">
      <summary>Родитель.</summary>
    </member>
    <member name="P:StockSharp.Logging.BaseLogSource.LogLevel">
      <summary>Уровень логирования. По-умолчанию установлено в <see cref="F:StockSharp.Logging.LogLevels.Inherit" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.BaseLogSource.CurrentTime">
      <summary>Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.BaseLogSource.IsRoot">
      <summary>Является ли источник корнем (даже при <see cref="P:StockSharp.Logging.ILogSource.Parent" /> не равным <see langword="null" />).</summary>
    </member>
    <member name="E:StockSharp.Logging.BaseLogSource.Log">
      <summary>Событие нового отладочного сообщения.</summary>
    </member>
    <member name="M:StockSharp.Logging.BaseLogSource.RaiseLog(StockSharp.Logging.LogMessage)">
      <summary>Вызвать событие <see cref="E:StockSharp.Logging.ILogSource.Log" />.</summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Logging.BaseLogSource.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Logging.BaseLogSource.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.BaseLogSource.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Logging.Log4NetLogger">
      <summary>Вспомогательный класс для логирования сообщений, основанный на log4net.</summary>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogger.#ctor(System.String)">
      <summary>Создать <see cref="T:StockSharp.Logging.Log4NetLogger" />.</summary>
      <param name="configFile">Путь к конфигурационному файлу log4net.</param>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogger.Info(System.String,System.String)">
      <summary>Отправить информационное сообщение.</summary>
      <param name="message">Текст сообщения.</param>
      <param name="source">Источник сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogger.Warning(System.String,System.String)">
      <summary>Отправить сообщение-предупреждение.</summary>
      <param name="message">Текст сообщения.</param>
      <param name="source">Источник сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogger.Error(System.String,System.String)">
      <summary>Отправить сообщение об ошибке.</summary>
      <param name="message">Текст сообщения.</param>
      <param name="source">Источник сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogger.Debug(System.String,System.String)">
      <summary>Отправить отладочное сообщение.</summary>
      <param name="message">Текст сообщения.</param>
      <param name="source">Источник сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogger.OnWriteMessage(StockSharp.Logging.LogMessage)">
      <summary>Записать сообщение.</summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="T:StockSharp.Logging.Log4NetLogListener">
      <summary>Логгер, отсылающий сообщения в <see cref="T:StockSharp.Logging.Log4NetLogger" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogListener.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.Log4NetLogListener" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogListener.#ctor(System.String)">
      <summary>Создать <see cref="T:StockSharp.Logging.Log4NetLogListener" />.</summary>
      <param name="configFile">Путь к конфигурационному файлу log4net.</param>
    </member>
    <member name="M:StockSharp.Logging.Log4NetLogListener.#ctor(StockSharp.Logging.Log4NetLogger)">
      <summary>Создать <see cref="T:StockSharp.Logging.Log4NetLogListener" />.</summary>
      <param name="logger">Вспомогательный класс для логирования сообщений, основанный на log4net.</param>
    </member>
    <member name="T:StockSharp.Logging.LoggingHelper">
      <summary>Вспомогательный класс для <see cref="T:StockSharp.Logging.ILogSource" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddInfoLog(StockSharp.Logging.ILogReceiver,System.Func{System.String})">
      <summary>Записать сообщение в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddWarningLog(StockSharp.Logging.ILogReceiver,System.Func{System.String})">
      <summary>Записать предупреждение в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddErrorLog(StockSharp.Logging.ILogReceiver,System.Func{System.String})">
      <summary>Записать ошибку в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddLog(StockSharp.Logging.ILogReceiver,StockSharp.Logging.LogLevels,System.Func{System.String})">
      <summary>Записать сообщение в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="level">Уровень лог-сообщения.</param>
      <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddInfoLog(StockSharp.Logging.ILogReceiver,System.String,System.Object[])">
      <summary>Записать сообщение в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения. Используются в случае, если message является форматирующей строкой. Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddDebugLog(StockSharp.Logging.ILogReceiver,System.String,System.Object[])">
      <summary>Записать отладку в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения. Используются в случае, если message является форматирующей строкой. Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddWarningLog(StockSharp.Logging.ILogReceiver,System.String,System.Object[])">
      <summary>Записать предупреждение в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения. Используются в случае, если message является форматирующей строкой. Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddErrorLog(StockSharp.Logging.ILogReceiver,System.Exception)">
      <summary>Записать ошибку в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="exception">Описание ошибки.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddErrorLog(StockSharp.Logging.ILogReceiver,System.Exception,System.String)">
      <summary>Записать ошибку в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="exception">Описание ошибки.</param>
      <param name="format">Форматирующая строка.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.AddErrorLog(StockSharp.Logging.ILogReceiver,System.String,System.Object[])">
      <summary>Записать ошибку в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения. Используются в случае, если message является форматирующей строкой. Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.LogError(System.Exception,System.String)">
      <summary>Записать ошибку в <see cref="P:StockSharp.Logging.LogManager.Application" />.</summary>
      <param name="error">Ошибка.</param>
      <param name="format">Форматирующая строка.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.GetLogLevel(StockSharp.Logging.ILogSource)">
      <summary>Получить <see cref="P:StockSharp.Logging.ILogSource.LogLevel" /> для источника. Если значение равно <see cref="F:StockSharp.Logging.LogLevels.Inherit" />, то берется уровень родительского источника.</summary>
      <param name="source">Источник логов.</param>
      <returns>Уровень логирования.</returns>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.DoWithLog(System.Action)">
      <summary>Обернуть действие в try/catch условие с логирование возможной ошибки.</summary>
      <param name="action">Действие.</param>
    </member>
    <member name="M:StockSharp.Logging.LoggingHelper.DoWithLog``1(System.Func{``0})">
      <summary>Обернуть действие в try/catch условие с логирование возможной ошибки.</summary>
      <typeparam name="T">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Logging.LogLevels">
      <summary>Уровни лог-сообщений <see cref="T:StockSharp.Logging.LogMessage" />.</summary>
    </member>
    <member name="F:StockSharp.Logging.LogLevels.Inherit">
      <summary>Использовать уровень логирования контейнера.</summary>
    </member>
    <member name="F:StockSharp.Logging.LogLevels.Debug">
      <summary>Отладочное сообщение, информация, предупреждения и ошибки.</summary>
    </member>
    <member name="F:StockSharp.Logging.LogLevels.Info">
      <summary>Информация, предупреждения и ошибки.</summary>
    </member>
    <member name="F:StockSharp.Logging.LogLevels.Warning">
      <summary>Предупреждения и ошибки.</summary>
    </member>
    <member name="F:StockSharp.Logging.LogLevels.Error">
      <summary>Только ошибки.</summary>
    </member>
    <member name="F:StockSharp.Logging.LogLevels.Off">
      <summary>Логи выключены.</summary>
    </member>
    <member name="T:StockSharp.Logging.LogListener">
      <summary>Базовый класс, который мониторит событие <see cref="E:StockSharp.Logging.ILogSource.Log" /> и сохраняет в некое хранилище.</summary>
    </member>
    <member name="M:StockSharp.Logging.LogListener.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Logging.LogListener" />.</summary>
    </member>
    <member name="F:StockSharp.Logging.LogListener.AllWarningFilter">
      <summary>Фильтр, который принимает только сообщения типа <see cref="F:StockSharp.Logging.LogLevels.Warning" />.</summary>
    </member>
    <member name="F:StockSharp.Logging.LogListener.AllErrorFilter">
      <summary>Фильтр, который принимает только сообщения типа <see cref="F:StockSharp.Logging.LogLevels.Error" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogListener.Filters">
      <summary>Фильтры сообщений, которыми указывается, какие сообщения следует обрабатывать.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogListener.DateFormat">
      <summary>Формат даты. По-умолчанию используется yyyy/MM/dd.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogListener.TimeFormat">
      <summary>Формат времени. По-умолчанию используется HH:mm:ss.fff.</summary>
    </member>
    <member name="M:StockSharp.Logging.LogListener.WriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
      <summary>Записать сообщения.</summary>
      <param name="messages">Отладочные сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.LogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
      <summary>Записать сообщения.</summary>
      <param name="messages">Отладочные сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.LogListener.OnWriteMessage(StockSharp.Logging.LogMessage)">
      <summary>Записать сообщение.</summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Logging.LogListener.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.LogListener.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Logging.LogManager">
      <summary>Менеджер логирования сообщений, который мониторит событие <see cref="E:StockSharp.Logging.ILogSource.Log" /> и перенаправляет сообщения в <see cref="P:StockSharp.Logging.LogManager.Listeners" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.LogManager.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.LogManager" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogManager.LocalTimeZone">
      <summary>Временная зона, в которую конвертируются временные метки сообщений. Не используется, если равно <see langword="null" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogManager.Application">
      <summary>Получатель логов уровня всего приложения.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogManager.Listeners">
      <summary>Логгеры сообщений, приходящие от <see cref="P:StockSharp.Logging.LogManager.Sources" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogManager.Sources">
      <summary>Источники логов, у которых слушается событие <see cref="E:StockSharp.Logging.ILogSource.Log" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogManager.FlushInterval">
      <summary>Интервал передачи накопленных от <see cref="P:StockSharp.Logging.LogManager.Sources" /> сообщений в <see cref="P:StockSharp.Logging.LogManager.Listeners" />. По-умолчанию равно 500 млс.</summary>
    </member>
    <member name="M:StockSharp.Logging.LogManager.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="M:StockSharp.Logging.LogManager.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.LogManager.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Logging.LogMessage">
      <summary>Отладочное сообщение.</summary>
    </member>
    <member name="M:StockSharp.Logging.LogMessage.#ctor(StockSharp.Logging.ILogSource,System.DateTimeOffset,StockSharp.Logging.LogLevels,System.String,System.Object[])">
      <summary>Создать <see cref="T:StockSharp.Logging.LogMessage" />.</summary>
      <param name="source">Источник логов.</param>
      <param name="time">Время создания сообщения.</param>
      <param name="level">Уровень лог-сообщения.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения. Используются в случае, если message является форматирующей строкой. Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Logging.LogMessage.#ctor(StockSharp.Logging.ILogSource,System.DateTimeOffset,StockSharp.Logging.LogLevels,System.Func{System.String})">
      <summary>Создать <see cref="T:StockSharp.Logging.LogMessage" />.</summary>
      <param name="source">Источник логов.</param>
      <param name="time">Время создания сообщения.</param>
      <param name="level">Уровень лог-сообщения.</param>
      <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message" />.</param>
    </member>
    <member name="P:StockSharp.Logging.LogMessage.Source">
      <summary>Источник логов.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogMessage.Time">
      <summary>Время создания сообщения.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogMessage.Level">
      <summary>Уровень лог-сообщения.</summary>
    </member>
    <member name="P:StockSharp.Logging.LogMessage.Message">
      <summary>Сообщение.</summary>
    </member>
    <member name="M:StockSharp.Logging.LogMessage.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="T:StockSharp.Logging.MemoryStatistics">
      <summary>Класс отслеживания занимаемых объектов в памяти.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatistics.Instance">
      <summary>Объект класса <see cref="T:StockSharp.Logging.MemoryStatistics" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatistics.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatistics.Interval">
      <summary>Интервал логирования статистики. По умолчанию 1 минута.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatistics.Values">
      <summary>Отслеживаемые объекты.</summary>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatistics.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatistics.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatistics.Clear(System.Boolean)">
      <summary>Очистить статистику памяти.</summary>
      <param name="resetCounter">Очищать ли счетчик объектов.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatistics.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatistics.IsEnabled">
      <summary>Включен ли источник.</summary>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatistics.AddOrRemove">
      <summary>Добавить или удалить источник <see cref="T:StockSharp.Logging.MemoryStatistics" /> из зарегистрированного <see cref="T:StockSharp.Logging.LogManager" />.</summary>
    </member>
    <member name="T:StockSharp.Logging.IMemoryStatisticsValue">
      <summary>Интерфейс для отслеживания количества активных объектов конкретного типа.</summary>
    </member>
    <member name="P:StockSharp.Logging.IMemoryStatisticsValue.Name">
      <summary>Имя.</summary>
    </member>
    <member name="P:StockSharp.Logging.IMemoryStatisticsValue.ObjectCount">
      <summary>Количество активных объектов.</summary>
    </member>
    <member name="M:StockSharp.Logging.IMemoryStatisticsValue.Clear(System.Boolean)">
      <summary>Очистить активные объекты.</summary>
      <param name="resetCounter">Очищать ли счетчик объектов.</param>
    </member>
    <member name="T:StockSharp.Logging.MemoryStatisticsValue`1">
      <summary>Класс для отслеживания количества активных объектов конкретного типа.</summary>
      <typeparam name="T">Тип объекта.</typeparam>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.#ctor(System.String)">
      <summary>Создать <see cref="T:StockSharp.Logging.MemoryStatisticsValue`1" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatisticsValue`1.Objects">
      <summary>Активные объекты.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatisticsValue`1.Name">
      <summary>Имя.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatisticsValue`1.ObjectCount">
      <summary>Количество активных объектов.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatisticsValue`1.ThrowOnRemoveDeleted">
      <summary>Проверять, что удаляется ранее удаленный объект.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatisticsValue`1.IsTraceObjects">
      <summary>Логировать создание и удаление объектов. По умолчанию выключено.</summary>
    </member>
    <member name="P:StockSharp.Logging.MemoryStatisticsValue`1.IsObjectTracking">
      <summary>Включено ли хранение объектов, доступных через <see cref="P:StockSharp.Logging.MemoryStatisticsValue`1.Objects" />. По-умолчанию, выключено.</summary>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.Add(`0)">
      <summary>Добавить новый объект.</summary>
      <param name="obj">Новый объект.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.Add(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавить новые объекты.</summary>
      <param name="objects">Активные объекты.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.Remove(`0)">
      <summary>Удалить активный объект.</summary>
      <param name="obj">Активный объект.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.Remove(System.Int32)">
      <summary>Изменить <see cref="P:StockSharp.Logging.MemoryStatisticsValue`1.ObjectCount" />, уменьшив его на количество удаленных объектов.</summary>
      <param name="count">Количество удаленных объектов.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.Remove(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удалить активные объекты.</summary>
      <param name="objects">Активные объекты.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.Clear(System.Boolean)">
      <summary>Очистить активные объекты <see cref="P:StockSharp.Logging.MemoryStatisticsValue`1.ObjectCount" />.</summary>
      <param name="resetCounter">Очищать ли счетчик объектов.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.MemoryStatisticsValue`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Logging.SoundLogListener">
      <summary>Логгер, проигрывающий музыку при получении сообщения.</summary>
    </member>
    <member name="M:StockSharp.Logging.SoundLogListener.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.SoundLogListener" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.SoundLogListener.FileName">
      <summary>Путь к файлу со звуком, который будет проигран при получении сообщения.</summary>
    </member>
    <member name="M:StockSharp.Logging.SoundLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
      <summary>Записать сообщения.</summary>
      <param name="messages">Отладочные сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.SoundLogListener.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.SoundLogListener.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Logging.SpeechLogListener">
      <summary>Логгер, произносящий слова при получении сообщения.</summary>
    </member>
    <member name="M:StockSharp.Logging.SpeechLogListener.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.SpeechLogListener" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.SpeechLogListener.Volume">
      <summary>Уровень громкости.</summary>
    </member>
    <member name="M:StockSharp.Logging.SpeechLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
      <summary>Записать сообщения.</summary>
      <param name="messages">Отладочные сообщения.</param>
    </member>
    <member name="M:StockSharp.Logging.SpeechLogListener.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Logging.SpeechLogListener.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Logging.TraceSource">
      <summary>Источник логов, получающий информацию из <see cref="T:System.Diagnostics.Trace" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.TraceSource.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.TraceSource" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.TraceSource.Name">
      <summary>Имя.</summary>
    </member>
    <member name="M:StockSharp.Logging.TraceSource.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Logging.UnhandledExceptionSource">
      <summary>Источник логов, отсылающий информацию о необработанных ошибках <see cref="E:System.AppDomain.UnhandledException" /> и <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" />.</summary>
    </member>
    <member name="M:StockSharp.Logging.UnhandledExceptionSource.#ctor">
      <summary>Создать <see cref="T:StockSharp.Logging.UnhandledExceptionSource" />.</summary>
    </member>
    <member name="P:StockSharp.Logging.UnhandledExceptionSource.Name">
      <summary>Имя.</summary>
    </member>
    <member name="M:StockSharp.Logging.UnhandledExceptionSource.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
  </members>
</doc>