<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>StockSharp.Algo</name>
  </assembly>
  <members>
    <member name="T:StockSharp.Algo.CollectionSecurityProvider">
      <summary>Поставщик информации об инструментах, получающий данные из коллекции.</summary>
    </member>
    <member name="M:StockSharp.Algo.CollectionSecurityProvider.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.CollectionSecurityProvider" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.CollectionSecurityProvider.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Создать <see cref="T:StockSharp.Algo.CollectionSecurityProvider" />.</summary>
      <param name="securities">Коллекция инструментов.</param>
    </member>
    <member name="M:StockSharp.Algo.CollectionSecurityProvider.Lookup(StockSharp.BusinessEntities.Security)">
      <summary>Найти инструменты, соответствующие фильтру <paramref name="criteria" />.</summary>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Найденные инструменты.</returns>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionMessageAdapter">
      <summary>Адаптер сообщений, автоматически считающий комиссию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.Commissions.CommissionMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionMessageAdapter.CommissionManager">
      <summary>Менеджер расчета комиссии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Commissions.CommissionMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionManager">
      <summary>Менеджер расчета комиссии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Commissions.CommissionManager" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionManager.Rules">
      <summary>Список правил вычисления комиссии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionManager.Commission">
      <summary>Общий размер комиссий.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.Process(StockSharp.Messages.Message)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionRule">
      <summary>Правило вычисления комиссии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRule.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Commissions.CommissionRule" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionRule.Value">
      <summary>Значение комиссии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionRule.Commission">
      <summary>Общий размер комиссий.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionRule.Title">
      <summary>Заголовок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRule.Process(StockSharp.Messages.Message)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionPerOrderRule">
      <summary>Комиссия за заявку.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionPerTradeRule">
      <summary>Комиссия за сделку.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionPerOrderVolumeRule">
      <summary>Комиссия за объем в заявке.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderVolumeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionPerTradeVolumeRule">
      <summary>Комиссия за объем в сделке.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeVolumeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionPerOrderCountRule">
      <summary>Комиссия за количество заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.Count">
      <summary>Количество заявок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerOrderCountRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionPerTradeCountRule">
      <summary>Комиссия за количество сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.Count">
      <summary>Количество сделок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerTradeCountRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionPerTradePriceRule">
      <summary>Комиссия за цену в сделке.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionPerTradePriceRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionSecurityIdRule">
      <summary>Комиссия инструмента.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionSecurityIdRule.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionSecurityIdRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionSecurityIdRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionSecurityIdRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionSecurityTypeRule">
      <summary>Комиссия типа инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Commissions.CommissionSecurityTypeRule" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.SecurityType">
      <summary>Тип инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionSecurityTypeRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionBoardCodeRule">
      <summary>Комиссия площадки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionBoardCodeRule.BoardCode">
      <summary>Код площадки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionBoardCodeRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionBoardCodeRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionBoardCodeRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionTurnOverRule">
      <summary>Комиссия за оборот.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionTurnOverRule.TurnOver">
      <summary>Оборот.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionTurnOverRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionTurnOverRule.OnProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionTurnOverRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionTurnOverRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Commissions.ICommissionManager">
      <summary>Интерфейс менеджера расчета комиссии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.ICommissionManager.Rules">
      <summary>Список правил вычисления комиссии.</summary>
    </member>
    <member name="T:StockSharp.Algo.Commissions.ICommissionRule">
      <summary>Интерфейс правила вычисления комиссии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.ICommissionRule.Title">
      <summary>Заголовок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.ICommissionRule.Commission">
      <summary>Общий размер комиссий.</summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.ICommissionRule.Value">
      <summary>Значение комиссии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.ICommissionRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.ICommissionRule.Process(StockSharp.Messages.Message)">
      <summary>Рассчитать комиссию.</summary>
      <param name="message">Сообщение, содержащее информацию по заявке или собственной сделке.</param>
      <returns>Комиссия. Если комиссию рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.DataType">
      <summary>Тип данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.DataType.Create(System.Type,System.Object)">
      <summary>Создать <see cref="T:StockSharp.Algo.DataType" />.</summary>
      <param name="messageType">Тип сообщения.</param>
      <param name="arg">Дополнительный аргумент, ассоциированный с типом данных. Например, параметр свечи.</param>
      <returns>Тип данных.</returns>
    </member>
    <member name="P:StockSharp.Algo.DataType.MessageType">
      <summary>Тип сообщения.</summary>
    </member>
    <member name="P:StockSharp.Algo.DataType.Arg">
      <summary>Дополнительный аргумент, ассоциированный с типом данных. Например, параметр свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.DataType.OnEquals(StockSharp.Algo.DataType)">
      <summary>Сравнить <see cref="T:StockSharp.Algo.DataType" /> на эквивалентность.</summary>
      <param name="other">Другое значение, с которым необходимо сравнивать.</param>
      <returns>
        <see langword="true" />, если другое значение равно текущему, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.DataType.GetHashCode">
      <summary>Получить хэш-код.</summary>
      <returns>Хэш-код <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.DataType.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.DataType" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="M:StockSharp.Algo.DataType.ToString">
      <summary>Вернуть <see cref="T:System.String" />, которое представляет текущий <see cref="T:System.Object" />.</summary>
      <returns>
        <see cref="T:System.String" />, которое представляет текущий <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Export.Database.DbProviders.BaseDbProvider.CheckUnique">
      <summary>Проверять уникальность данных в базе данных. Влияет на производительность.</summary>
    </member>
    <member name="T:StockSharp.Algo.Export.BaseExporter">
      <summary>Базовый класс экспорта.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},System.String)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Export.BaseExporter" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр данных.</param>
      <param name="isCancelled">Обработчик, возвращающий признак прерывания экспорта.</param>
      <param name="path">Путь к файлу.</param>
    </member>
    <member name="P:StockSharp.Algo.Export.BaseExporter.Security">
      <summary>Инструмент стакана.</summary>
    </member>
    <member name="P:StockSharp.Algo.Export.BaseExporter.Arg">
      <summary>Параметр данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Export.BaseExporter.Path">
      <summary>Путь к файлу.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Type,System.Collections.IEnumerable)">
      <summary>Экспортировать значения.</summary>
      <param name="dataType">Тип рыночных данных.</param>
      <param name="values">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.CanProcess(System.Int32)">
      <summary>Можно ли продолжать экспорт.</summary>
      <param name="exported">Количество экспотированных элементов с предыдущего вызова метода.</param>
      <returns>
        <see langword="true" />, если экспорт можно продолжить, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.QuoteChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.Level1ChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.ExecutionMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.CandleMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.NewsMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.BaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.SecurityMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="T:StockSharp.Algo.Export.StockSharpExporter">
      <summary>Экспорт в StockSharp формат.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.StockSharpExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Создать <see cref="T:StockSharp.Algo.Export.StockSharpExporter" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр данных.</param>
      <param name="isCancelled">Обработчик, возвращающий признак прерывания экспорта.</param>
      <param name="storageRegistry">Хранилище маркет-данных.</param>
      <param name="drive">Хранилище.</param>
      <param name="format">Тип формата.</param>
    </member>
    <member name="P:StockSharp.Algo.Export.StockSharpExporter.BatchSize">
      <summary>Размер пакета передаваемых данных. По-умолчанию равен 50 элементам.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.ExecutionMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.QuoteChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.Level1ChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.CandleMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.NewsMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.StockSharpExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.SecurityMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="T:StockSharp.Algo.Export.DatabaseExporter">
      <summary>Экспорт в базу данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.DatabaseExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},Ecng.Xaml.DevExp.Database.DatabaseConnectionPair)">
      <summary>Создать <see cref="T:StockSharp.Algo.Export.DatabaseExporter" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр данных.</param>
      <param name="isCancelled">Обработчик, возвращающий признак прерывания экспорта.</param>
      <param name="connection">Подключение к БД.</param>
    </member>
    <member name="P:StockSharp.Algo.Export.DatabaseExporter.BatchSize">
      <summary>Размер пакета передаваемых данных. По-умолчанию равен 50 элементам.</summary>
    </member>
    <member name="P:StockSharp.Algo.Export.DatabaseExporter.CheckUnique">
      <summary>Проверять уникальность данных в базе данных. Влияет на производительность. По-умолчанию включено.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.ExecutionMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.QuoteChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.Level1ChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.CandleMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.NewsMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.DatabaseExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.SecurityMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="T:StockSharp.Algo.Export.ExcelExporter">
      <summary>Экспорт в Excel.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.ExcelExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},System.String,System.Action)">
      <summary>Создать <see cref="T:StockSharp.Algo.Export.ExcelExporter" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр данных.</param>
      <param name="isCancelled">Обработчик, возвращающий признак прерывания экспорта.</param>
      <param name="fileName">Путь к файлу.</param>
      <param name="breaked">Обработчик, который будет вызван в случае превышения максимального значения строчек.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.ExecutionMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.QuoteChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.Level1ChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.CandleMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.NewsMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.ExcelExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.SecurityMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="T:StockSharp.Algo.Export.TextExporter">
      <summary>Экспорт в текстовый файл.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.TextExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},System.String,System.String,System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Export.TextExporter" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр данных.</param>
      <param name="isCancelled">Обработчик, возвращающий признак прерывания экспорта.</param>
      <param name="fileName">Путь к файлу.</param>
      <param name="template">Шаблон форматирование строки.</param>
      <param name="header">Заголовок, идущий первой строкой. Если передается пустая строка, то заголовок не будет добавлен в файл.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.ExecutionMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.QuoteChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.Level1ChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.CandleMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.NewsMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.TextExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.SecurityMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="T:StockSharp.Algo.Export.XmlExporter">
      <summary>Экспорт в xml.</summary>
    </member>
    <member name="M:StockSharp.Algo.Export.XmlExporter.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.Int32,System.Boolean},System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Export.XmlExporter" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр данных.</param>
      <param name="isCancelled">Обработчик, возвращающий признак прерывания экспорта.</param>
      <param name="fileName">Путь к файлу.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.ExecutionMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.QuoteChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.Level1ChangeMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.CandleMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.NewsMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.NewsMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Export.XmlExporter.Export(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage})">
      <summary>Экспортировать <see cref="T:StockSharp.Messages.SecurityMessage" />.</summary>
      <param name="messages">Сообщений.</param>
    </member>
    <member name="T:StockSharp.Algo.FilterableSecurityProvider">
      <summary>Поставщик информации об инструментах с поддержкой поиска с помощью <see cref="T:StockSharp.Algo.SecurityTrie" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.FilterableSecurityProvider.#ctor(StockSharp.BusinessEntities.ISecurityProvider,System.Boolean)">
      <summary>Создать <see cref="T:StockSharp.Algo.FilterableSecurityProvider" />.</summary>
      <param name="provider">Провайдер мета информация об инструментах.</param>
      <param name="ownProvider">
        <see langword="true" /> оставить открытым <paramref name="provider" /> после уничтожения объекта <see cref="T:StockSharp.Algo.FilterableSecurityProvider" />; иначе, <see langword="false" />.</param>
    </member>
    <member name="P:StockSharp.Algo.FilterableSecurityProvider.Count">
      <summary>Получить количество инструментов, хранящееся в <see cref="T:StockSharp.BusinessEntities.ISecurityProvider" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.FilterableSecurityProvider.Added">
      <summary>Новые инструменты были добавлены.</summary>
    </member>
    <member name="E:StockSharp.Algo.FilterableSecurityProvider.Removed">
      <summary>Инструменты были удалены.</summary>
    </member>
    <member name="E:StockSharp.Algo.FilterableSecurityProvider.Cleared">
      <summary>Хранилище было очищено.</summary>
    </member>
    <member name="M:StockSharp.Algo.FilterableSecurityProvider.Lookup(StockSharp.BusinessEntities.Security)">
      <summary>Найти инструменты, соответствующие фильтру <paramref name="criteria" />.</summary>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Найденные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.FilterableSecurityProvider.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Correlation">
      <summary>Корреляция.</summary>
      <remarks>https://en.wikipedia.org/wiki/Correlation_and_dependence.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Correlation.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Correlation" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Correlation.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Correlation.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Covariance">
      <summary>Ковариация.</summary>
      <remarks>https://en.wikipedia.org/wiki/Covariance.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Covariance.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Covariance" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Covariance.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MoneyFlowIndex">
      <summary>Индекс денежных потоков.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MoneyFlowIndex.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MoneyFlowIndex" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MoneyFlowIndex.#ctor(System.Int32)">
      <summary>Инициализировать объект <see cref="T:StockSharp.Algo.Indicators.MoneyFlowIndex" /> использую длину.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MoneyFlowIndex.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.MoneyFlowIndex.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MoneyFlowIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.StochasticOscillator">
      <summary>Стохастический Осциллятор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StochasticOscillator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.StochasticOscillator" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.StochasticOscillator.K">
      <summary>%K.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.StochasticOscillator.D">
      <summary>%D.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.VolumeProfileIndicator">
      <summary>Профиль объема.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.VolumeProfileIndicator" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.VolumeProfileIndicator.Step">
      <summary>Шаг группировки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.VolumeProfileIndicator.UseTotalVolume">
      <summary>Использовать в расчетах суммарный объем (когда свечи не содержат VolumeProfile).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue">
      <summary>Значение индикатора <see cref="T:StockSharp.Algo.Indicators.VolumeProfileIndicator" />, которое получается в результате вычисления.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.Levels">
      <summary>Вложенные значения.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.IsSupport(System.Type)">
      <summary>Поддерживает ли значение необходимый для индикатора тип данных.</summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>
        <see langword="true" />, если тип данных поддерживается, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.GetValue``1">
      <summary>Получить значение по типу данных.</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Измененная копия входного значения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue.CompareTo(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Сравнить <see cref="T:StockSharp.Algo.Indicators.VolumeProfileIndicatorValue" /> на эквивалентность.</summary>
      <param name="other">Другое значение, с которым необходимо сравнивать.</param>
      <returns>Результат сравнения.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ChaikinVolatility">
      <summary>Волатильность Чайкина.</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/Volatility.ashx http://www.incrediblecharts.com/indicators/chaikin_volatility.php.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ChaikinVolatility.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ChaikinVolatility" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ChaikinVolatility.Ema">
      <summary>Скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ChaikinVolatility.Roc">
      <summary>Скорость изменения.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ChaikinVolatility.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ChaikinVolatility.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ChaikinVolatility.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ChaikinVolatility.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Highest">
      <summary>Максимальное значение за период.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Highest.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Highest" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Highest.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.LinearReg">
      <summary>Линейная регрессия - Value возвращает прогноз последней точки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearReg.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.LinearReg" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearReg.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearReg.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.LinearRegression">
      <summary>Полный класс линейной регрессии, считает одновременно LinearReg, LinearRegSlope, RSquared и StandardError.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearRegression.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.LinearRegression" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearRegression.#ctor(StockSharp.Algo.Indicators.LinearReg,StockSharp.Algo.Indicators.RSquared,StockSharp.Algo.Indicators.LinearRegSlope,StockSharp.Algo.Indicators.StandardError)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.LinearRegression" />.</summary>
      <param name="linearReg">Линейная регрессия.</param>
      <param name="rSquared">R-квадрат регрессии.</param>
      <param name="regSlope">Коэффициент при независимой переменной, угол наклона прямой.</param>
      <param name="standardError">Стандартная ошибка.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LinearRegression.Length">
      <summary>Длина периода.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LinearRegression.LinearReg">
      <summary>Линейная регрессия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LinearRegression.RSquared">
      <summary>R-квадрат регрессии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LinearRegression.StandardError">
      <summary>Стандартная ошибка.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LinearRegression.LinearRegSlope">
      <summary>Коэффициент при независимой переменной, угол наклона прямой.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearRegression.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearRegression.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.LinearRegSlope">
      <summary>Наклон линейной регрессии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearRegSlope.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.LinearRegSlope" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LinearRegSlope.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Lowest">
      <summary>Минимальное значение за период.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Lowest.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Lowest" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Lowest.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MeanDeviation">
      <summary>Среднее отклонение.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MeanDeviation.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MeanDeviation" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.MeanDeviation.Sma">
      <summary>Скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.MeanDeviation.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MeanDeviation.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MeanDeviation.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MedianPrice">
      <summary>Медианная цена.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MedianPrice.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MedianPrice" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MedianPrice.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.QStick">
      <summary>QStick.</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/QStick.ashx.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.QStick.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.QStick" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.QStick.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.QStick.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.QStick.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.RSquared">
      <summary>R-квадрат в линейной регрессии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RSquared.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.RSquared" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RSquared.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RSquared.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Level1Indicator">
      <summary>Индикатор, строящийся на основе маркет-данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Level1Indicator.Field">
      <summary>Поле маркет-данных первого уровня, которое используется как значение индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Level1Indicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Level1Indicator.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Level1Indicator.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.StandardError">
      <summary>Стандартная ошибка в линейной регрессии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StandardError.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.StandardError" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StandardError.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StandardError.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Sum">
      <summary>Сумма N последних значений.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Sum.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Sum" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Sum.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Trix">
      <summary>Тройная экспоненциальная скользящая средняя.</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/TRIX.ashx http://www.incrediblecharts.com/indicators/trix_indicator.php.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Trix.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Trix.RocLength">
      <summary>Длина периода <see cref="T:StockSharp.Algo.Indicators.RateOfChange" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Trix.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Trix.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Trix.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.VerticalHorizontalFilter">
      <summary>Вертиально-горизонтальный фильтр.</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/VHF.ashx http://www.stator-afm.com/vertical-horizontal-filter.html http://www.incrediblecharts.com/indicators/vertical_horizontal_filter.php.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VerticalHorizontalFilter.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.VerticalHorizontalFilter.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VerticalHorizontalFilter.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VerticalHorizontalFilter.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Vidya">
      <summary>Динамическая средняя переменного индекса (Variable Index Dynamic Average).</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/Vidya.ashx http://www.mql5.com/en/code/75.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Vidya.#ctor">
      <summary>Создать индикатор <see cref="T:StockSharp.Algo.Indicators.Vidya" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Vidya.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Vidya.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.VolumeIndicator">
      <summary>Объем свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeIndicator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.VolumeIndicator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.AverageDirectionalIndex">
      <summary>Индекс среднего направления движения Welles Wilder.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AverageDirectionalIndex.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.AverageDirectionalIndex" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AverageDirectionalIndex.#ctor(StockSharp.Algo.Indicators.DirectionalIndex,StockSharp.Algo.Indicators.LengthIndicator{System.Decimal})">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.AverageDirectionalIndex" />.</summary>
      <param name="dx">Индекса направленного движения Welles Wilder.</param>
      <param name="movingAverage">Скользящая средняя.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AverageDirectionalIndex.Dx">
      <summary>Индекса направленного движения Welles Wilder.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AverageDirectionalIndex.MovingAverage">
      <summary>Скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AverageDirectionalIndex.Length">
      <summary>Длина периода.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AverageDirectionalIndex.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AverageDirectionalIndex.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.AverageTrueRange">
      <summary>Средний истинный диапазон <see cref="P:StockSharp.Algo.Indicators.AverageTrueRange.TrueRange" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AverageTrueRange.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.AverageTrueRange" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AverageTrueRange.#ctor(StockSharp.Algo.Indicators.LengthIndicator{System.Decimal},StockSharp.Algo.Indicators.TrueRange)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.AverageTrueRange" />.</summary>
      <param name="movingAverage">Скользящая средняя.</param>
      <param name="trueRange">Истинный диапазон.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AverageTrueRange.MovingAverage">
      <summary>Скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AverageTrueRange.TrueRange">
      <summary>Истинный диапазон.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AverageTrueRange.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AverageTrueRange.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AverageTrueRange.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ChandeMomentumOscillator">
      <summary>Осциллятор ценовых моментов Чанде.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ChandeMomentumOscillator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ChandeMomentumOscillator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ChandeMomentumOscillator.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ChandeMomentumOscillator.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ChandeMomentumOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.CommodityChannelIndex">
      <summary>Индекс товарного канала.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CommodityChannelIndex.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.CommodityChannelIndex" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CommodityChannelIndex.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.CommodityChannelIndex.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CommodityChannelIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.DetrendedPriceOscillator">
      <summary>Бестрендовый ценовой осциллятор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DetrendedPriceOscillator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.DetrendedPriceOscillator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DetrendedPriceOscillator.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.DetrendedPriceOscillator.IsFormed">
      <summary>Индикатор сформирован.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DetrendedPriceOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.DiMinus">
      <summary>DIMinus is a component of the Directional Movement System developed by Welles Wilder.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DiMinus.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.DiMinus" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DiMinus.GetValue(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Candle)">
      <summary>Получить значение части.</summary>
      <param name="current">Текущая свеча.</param>
      <param name="prev">Предыдущая свеча.</param>
      <returns>Значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.DiPart">
      <summary>Часть индикатора <see cref="T:StockSharp.Algo.Indicators.DirectionalIndex" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DiPart.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Indicators.DiPart" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DiPart.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.DiPart.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DiPart.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DiPart.GetValue(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Candle)">
      <summary>Получить значение части.</summary>
      <param name="current">Текущая свеча.</param>
      <param name="prev">Предыдущая свеча.</param>
      <returns>Значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.DiPlus">
      <summary>DIPlus is a component of the Directional Movement System developed by Welles Wilder.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DiPlus.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.DiPlus" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DiPlus.GetValue(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Candle)">
      <summary>Получить значение части.</summary>
      <param name="current">Текущая свеча.</param>
      <param name="prev">Предыдущая свеча.</param>
      <returns>Значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.DirectionalIndex">
      <summary>Индекса направленного движения Welles Wilder.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DirectionalIndex.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.DirectionalIndex" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.DirectionalIndex.Length">
      <summary>Длина периода.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.DirectionalIndex.Plus">
      <summary>DI+.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.DirectionalIndex.Minus">
      <summary>DI-.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DirectionalIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DirectionalIndex.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DirectionalIndex.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Ichimoku">
      <summary>Ишимоку.</summary>
      <remarks>http://ta.mql4.com/indicators/oscillators/ichimoku.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Ichimoku.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Ichimoku" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Ichimoku.#ctor(StockSharp.Algo.Indicators.IchimokuLine,StockSharp.Algo.Indicators.IchimokuLine)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Ichimoku" />.</summary>
      <param name="tenkan">Линия Tenkan.</param>
      <param name="kijun">Линия Kijun.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Ichimoku.Tenkan">
      <summary>Линия Tenkan.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Ichimoku.Kijun">
      <summary>Линия Kijun.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Ichimoku.SenkouA">
      <summary>Линия Senkou (A).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Ichimoku.SenkouB">
      <summary>Линия Senkou (B).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Ichimoku.Chinkou">
      <summary>Линия Chinkou.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IchimokuChinkouLine">
      <summary>Линия Chinkou.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuChinkouLine.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.IchimokuChinkouLine" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuChinkouLine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IchimokuLine">
      <summary>Реализация одной из линий индикатора Ишимоку Кинко Хайо (Tenkan, Kijun, Senkou Span B).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuLine.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.IchimokuLine" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuLine.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IchimokuLine.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuLine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IchimokuSenkouALine">
      <summary>Линия Senkou (A).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouALine.#ctor(StockSharp.Algo.Indicators.IchimokuLine,StockSharp.Algo.Indicators.IchimokuLine)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.IchimokuSenkouALine" />.</summary>
      <param name="tenkan">Линия Tenkan.</param>
      <param name="kijun">Линия Kijun.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouALine.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouALine.Tenkan">
      <summary>Линия Tenkan.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouALine.Kijun">
      <summary>Линия Kijun.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouALine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IchimokuSenkouBLine">
      <summary>Линия Senkou (B).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouBLine.#ctor(StockSharp.Algo.Indicators.IchimokuLine)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.IchimokuLine" />.</summary>
      <param name="kijun">Линия Kijun.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouBLine.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouBLine.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IchimokuSenkouBLine.Kijun">
      <summary>Линия Kijun.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IchimokuSenkouBLine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Momentum">
      <summary>Моментум.</summary>
      <remarks>Momentum Simple = C - C-n Где C- цена закрытия текущего периода. Где С-n - цена закрытия N периодов назад.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Momentum.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Momentum" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Momentum.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Momentum.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.RateOfChange">
      <summary>Скорость изменения.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RateOfChange.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.RateOfChange" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RateOfChange.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.RelativeStrengthIndex">
      <summary>Индекс относительной силы.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeStrengthIndex.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.RelativeStrengthIndex" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.RelativeStrengthIndex.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeStrengthIndex.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeStrengthIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.RelativeVigorIndex">
      <summary>Индекс Относительной Энергии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndex.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndex" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndex.#ctor(StockSharp.Algo.Indicators.RelativeVigorIndexAverage,StockSharp.Algo.Indicators.RelativeVigorIndexSignal)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndex" />.</summary>
      <param name="average">Средневзвешанная часть индикатора.</param>
      <param name="signal">Сигнальная часть индикатора.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.RelativeVigorIndex.Average">
      <summary>Средневзвешанная часть индикатора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.RelativeVigorIndex.Signal">
      <summary>Сигнальная часть индикатора.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.RelativeVigorIndexAverage">
      <summary>Средневзвешанная часть индикатора <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndex" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndexAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="P:StockSharp.Algo.Indicators.RelativeVigorIndexAverage.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.RelativeVigorIndexSignal">
      <summary>Сигнальная часть индикатора <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndex" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexSignal.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.RelativeVigorIndexSignal" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RelativeVigorIndexSignal.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.StochasticK">
      <summary>Стохастик %K.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StochasticK.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.StochasticK" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.StochasticK.IsFormed">
      <summary>Индикатор сформирован.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StochasticK.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StochasticK.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.TrueRange">
      <summary>Истинный диапазон.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TrueRange.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.TrueRange" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TrueRange.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TrueRange.GetPriceMovements(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Candle)">
      <summary>Получить компоненты цен для выбора максимального значения.</summary>
      <param name="currentCandle">Текущая свеча.</param>
      <param name="prevCandle">Предыдущая свеча.</param>
      <returns>Компоненты цен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TrueRange.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.UltimateOscillator">
      <summary>Последний осцилятор.</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/UltimateOsc.ashx http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:ultimate_oscillator.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.UltimateOscillator.#ctor">
      <summary>Создать индикатор <see cref="T:StockSharp.Algo.Indicators.UltimateOscillator" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.UltimateOscillator.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.UltimateOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.BollingerBand">
      <summary>Полоса Боллинджера.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BollingerBand.#ctor(StockSharp.Algo.Indicators.LengthIndicator{System.Decimal},StockSharp.Algo.Indicators.StandardDeviation)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.BollingerBand" />.</summary>
      <param name="ma">Скользящая средняя.</param>
      <param name="dev">Стандартное отклонение.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BollingerBand.Width">
      <summary>Ширина канала.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BollingerBand.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BollingerBand.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BollingerBand.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.BollingerBands">
      <summary>Полосы Боллинджера.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BollingerBands.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.BollingerBands" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BollingerBands.#ctor(StockSharp.Algo.Indicators.LengthIndicator{System.Decimal})">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.BollingerBands" />.</summary>
      <param name="ma">Скользящая средняя.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BollingerBands.MovingAverage">
      <summary>Средняя линия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BollingerBands.UpBand">
      <summary>Верхняя полоса+.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BollingerBands.LowBand">
      <summary>Нижняя полоса-.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BollingerBands.Length">
      <summary>Длина периода. По-умолчанию длина равна 1.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BollingerBands.Width">
      <summary>Ширина канала Полос Боллинджера. Значение по умолчанию равно 2.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BollingerBands.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BollingerBands.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BollingerBands.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage">
      <summary>Double Exponential Moving Average.</summary>
      <remarks>((2 * EMA) – EMA of EMA).</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DoubleExponentialMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Envelope">
      <summary>Envelope.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Envelope.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Envelope" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Envelope.#ctor(StockSharp.Algo.Indicators.LengthIndicator{System.Decimal})">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Envelope" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Envelope.Middle">
      <summary>Средняя линия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Envelope.Upper">
      <summary>Верхняя линия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Envelope.Lower">
      <summary>Нижняя линия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Envelope.Length">
      <summary>Длина периода. По-умолчанию длина равна 1.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Envelope.Shift">
      <summary>Ширина сдвига. Задается в процентах от 0 до 1. По-умолчанию равно 0.25.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Envelope.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Envelope.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Envelope.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Envelope.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ExponentialMovingAverage">
      <summary>Экспоненциальная скользящая средняя.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ExponentialMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ExponentialMovingAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ExponentialMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ExponentialMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.HullMovingAverage">
      <summary>Скользящая средняя Халла (Hull Moving Average).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.HullMovingAverage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.HullMovingAverage.SqrtPeriod">
      <summary>Период результирующей средней. Если равно 0, период результирующей средней равен квадратному корню периода HMA. По умолчанию равно 0.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.HullMovingAverage.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.HullMovingAverage.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.JurikMovingAverage">
      <summary>Юриковская (Jurik's) скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.JurikMovingAverage.Phase">
      <summary>Фаза.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.JurikMovingAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.Initialize">
      <summary>Начальная инициализация переменных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.JurikMovingAverage.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage">
      <summary>Адаптивная скользящая средняя Кауфманна.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.FastSCPeriod">
      <summary>Период "быстрой" EMA. Значение по умолчанию 2.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.SlowSCPeriod">
      <summary>Период "медленной" EMA. Значение по умолчанию 30.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence">
      <summary>Схождение/расхождение скользящих средних.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.#ctor(StockSharp.Algo.Indicators.ExponentialMovingAverage,StockSharp.Algo.Indicators.ExponentialMovingAverage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence" />.</summary>
      <param name="longMa">Длинная скользящая средняя.</param>
      <param name="shortMa">Короткая скользящая средняя.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.LongMa">
      <summary>Длинная скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.ShortMa">
      <summary>Короткая скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram">
      <summary>Схождение/расхождение скользящих средних. Гистограмма.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram.#ctor(StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence,StockSharp.Algo.Indicators.ExponentialMovingAverage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram" />.</summary>
      <param name="macd">Схождение/расхождение скользящих средних.</param>
      <param name="signalMa">Сигнальная скользящая средняя.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal">
      <summary>Схождение/расхождение скользящих средних с сигнальной линией.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal.#ctor(StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence,StockSharp.Algo.Indicators.ExponentialMovingAverage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal" />.</summary>
      <param name="macd">Схождение/расхождение скользящих средних.</param>
      <param name="signalMa">Сигнальная скользящая средняя.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal.Macd">
      <summary>Схождение/расхождение скользящих средних.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal.SignalMa">
      <summary>Сигнальная скользящая средняя.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.NickRypockTrailingReverse">
      <summary>NickRypockTrailingReverse (Nick Rypock Trailing reverse).</summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.NickRypockTrailingReverse._trend">
      <summary>Направление тренда.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.NickRypockTrailingReverse.Multiple">
      <summary>Множитель.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.NickRypockTrailingReverse" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.NickRypockTrailingReverse.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.OptimalTracking">
      <summary>Optimal Tracking.</summary>
      <remarks>Based on a Kalman Filter (Dr. R. E. Kalman, 1960) and Kalatas Tracking Index (Paul. R. Kalata, 1984).</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.OptimalTracking.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.OptimalTracking" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.OptimalTracking.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.OptimalTracking.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ParabolicSar">
      <summary>Реализация индикатора тренда - Parabolic SAR.</summary>
      <remarks>http://ta.mql4.com/indicators/trends/parabolic_sar.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ParabolicSar.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ParabolicSar" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ParabolicSar.Acceleration">
      <summary>Фактор ускорения.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ParabolicSar.AccelerationStep">
      <summary>Шаг фактора ускорения.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ParabolicSar.AccelerationMax">
      <summary>Максимальный фактор ускорения.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ParabolicSar.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ParabolicSar.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ParabolicSar.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Peak">
      <summary>Пик.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Peak.#ctor">
      <summary>Создать индикатор <see cref="T:StockSharp.Algo.Indicators.Peak" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Peak.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.PeakBar">
      <summary>ПикБар.</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/PeakBar.ashx.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.PeakBar.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.PeakBar" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.PeakBar.ReversalAmount">
      <summary>Порог изменения индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.PeakBar.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.PeakBar.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.PeakBar.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.RangeActionVerificationIndex">
      <summary>Range Action Verification Index.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RangeActionVerificationIndex.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.RangeActionVerificationIndex" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.RangeActionVerificationIndex.ShortSma">
      <summary>Короткая скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.RangeActionVerificationIndex.LongSma">
      <summary>Длинная скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.RangeActionVerificationIndex.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RangeActionVerificationIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RangeActionVerificationIndex.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.RangeActionVerificationIndex.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.SimpleMovingAverage">
      <summary>Простая скользящая средняя.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SimpleMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.SimpleMovingAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SimpleMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.SmoothedMovingAverage">
      <summary>Сглаженное скользящее среднее.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SmoothedMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.SmoothedMovingAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SmoothedMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SmoothedMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.StandardDeviation">
      <summary>Стандартное отклонение.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StandardDeviation.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.StandardDeviation" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.StandardDeviation.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StandardDeviation.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.StandardDeviation.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.TripleExponentialMovingAverage">
      <summary>Тройная экспоненциальная скользящая средняя.</summary>
      <remarks>http://tradingsim.com/blog/triple-exponential-moving-average/ (3 * EMA) – (3 * EMA of EMA) + EMA of EMA of EMA).</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TripleExponentialMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.TripleExponentialMovingAverage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.TripleExponentialMovingAverage.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TripleExponentialMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TripleExponentialMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Trough">
      <summary>Впадина.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Trough.#ctor">
      <summary>Создать индикатор <see cref="T:StockSharp.Algo.Indicators.Trough" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Trough.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.TroughBar">
      <summary>ВпадинаБар.</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/TroughBar.ashx.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TroughBar.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.TroughBar" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.TroughBar.ReversalAmount">
      <summary>Порог изменения индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TroughBar.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TroughBar.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.TroughBar.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage">
      <summary>Взвешенная по объему скользящая средняя.</summary>
      <remarks>http://www2.wealth-lab.com/WL5Wiki/VMA.ashx http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:vwap_intraday.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage.#ctor">
      <summary>Создать индикатор <see cref="T:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.VolumeWeightedMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.WeightedMovingAverage">
      <summary>Взвешанная скользящая средняя.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.WeightedMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.WeightedMovingAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.WeightedMovingAverage.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.WeightedMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.WilderMovingAverage">
      <summary>Скользящая средняя Welles Wilder.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.WilderMovingAverage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.WilderMovingAverage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.WilderMovingAverage.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ZigZag">
      <summary>ЗигЗаг.</summary>
      <remarks>ZigZag отслеживает и соединяет между собой крайние точки графика отстоящие друг от друга не менее чем на заданный процент по шкале цены.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZag.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ZigZag" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZag.BackStep">
      <summary>Минимальное число баров между локальными максимумами, минимумами.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZag.Depth">
      <summary>Минимум баров, на котором Zigzag не будет строить второй максимум (или минимум), если тот меньше (или больше) на deviation предыдущего соответственно.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZag.Deviation">
      <summary>Минимальное количество пунктов между максимумами (минимумами) двух соседних баров для того чтобы индикатор Zigzag сформировал локальную вершину (локальный минимум).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZag.HighValueFunc">
      <summary>Конвертер, который возвращает из свечи цену для поиска максимума.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZag.LowValueFunc">
      <summary>Конвертер, который возвращает из свечи цену для поиска минимумв.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZag.CurrentValueFunc">
      <summary>Конвертер, который возвращает из свечи цену для текущего значения.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZag.CurrentValue">
      <summary>Текущее значение индикатора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZag.LastValueShift">
      <summary>Смещение для последнего значения индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZag.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZag.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZag.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZag.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ZigZagEquis">
      <summary>ЗигЗаг (Metastock).</summary>
      <remarks>Индикатор Зиг-Заг (Zig Zag) фильтрует колебания цен или значений индикаторов, которые не выходят за определенную величину выраженную в % или абсолютных числах. Это делается для предварительного анализа графика на котором акцентированы только достаточно большие изменения цен (значений индикатора).</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ZigZagEquis" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZagEquis.Deviation">
      <summary>Процентное изменение.</summary>
      <remarks>Указывается в диапазоне от 0 до 1.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZagEquis.ByPrice">
      <summary>Конвертер, который возвращает из свечи цену для расчетов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ZigZagEquis.CurrentValue">
      <summary>Текущее значение индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ZigZagEquis.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Acceleration">
      <summary>Индикатор Замедления / Ускорения.</summary>
      <remarks>http://ta.mql4.com/indicators/bills/acceleration_deceleration.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Acceleration.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Acceleration" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Acceleration.#ctor(StockSharp.Algo.Indicators.AwesomeOscillator,StockSharp.Algo.Indicators.SimpleMovingAverage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Acceleration" />.</summary>
      <param name="ao">Чудесный осцилятор.</param>
      <param name="sma">Cкользящая средняя.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Acceleration.Sma">
      <summary>Cкользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Acceleration.Ao">
      <summary>Чудесный осцилятор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Acceleration.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Acceleration.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Acceleration.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Acceleration.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Alligator">
      <summary>Аллигатор.</summary>
      <remarks>http://ta.mql4.com/indicators/bills/alligator.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Alligator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Alligator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Alligator.#ctor(StockSharp.Algo.Indicators.AlligatorLine,StockSharp.Algo.Indicators.AlligatorLine,StockSharp.Algo.Indicators.AlligatorLine)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Alligator" />.</summary>
      <param name="jaw">Челюсть.</param>
      <param name="teeth">Зубы.</param>
      <param name="lips">Губы.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Alligator.Jaw">
      <summary>Челюсть.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Alligator.Teeth">
      <summary>Зубы.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Alligator.Lips">
      <summary>Губы.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Alligator.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.AlligatorLine">
      <summary>Реализация одной из линий индикатора Alligator (Jaw, Teeth, Lips).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AlligatorLine.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.AlligatorLine" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AlligatorLine.Shift">
      <summary>Сдвиг в будущее.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AlligatorLine.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AlligatorLine.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AlligatorLine.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AlligatorLine.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AlligatorLine.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.AwesomeOscillator">
      <summary>Чудесный осцилятор.</summary>
      <remarks>http://ta.mql4.com/indicators/bills/awesome.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.AwesomeOscillator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.#ctor(StockSharp.Algo.Indicators.SimpleMovingAverage,StockSharp.Algo.Indicators.SimpleMovingAverage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.AwesomeOscillator" />.</summary>
      <param name="longSma">Длинная скользящая средняя.</param>
      <param name="shortSma">Короткая скользящая средняя.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AwesomeOscillator.LongMa">
      <summary>Длинная скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AwesomeOscillator.ShortMa">
      <summary>Короткая скользящая средняя.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AwesomeOscillator.MedianPrice">
      <summary>Медианная цена.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.AwesomeOscillator.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.AwesomeOscillator.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.FractalPart">
      <summary>Часть <see cref="T:StockSharp.Algo.Indicators.Fractals" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.FractalPart.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.FractalPart" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.FractalPart.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.Fractals">
      <summary>Фракталы.</summary>
      <remarks>http://ta.mql4.com/indicators/bills/fractal.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Fractals.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Fractals" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Fractals.#ctor(System.Int32,StockSharp.Algo.Indicators.FractalPart,StockSharp.Algo.Indicators.FractalPart)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.Fractals" />.</summary>
      <param name="length">Длина периода.</param>
      <param name="up">Фрактал вверх.</param>
      <param name="down">Фрактал вниз.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Fractals.Length">
      <summary>Длина периода.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Fractals.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Fractals.Up">
      <summary>Фрактал вверх.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.Fractals.Down">
      <summary>Фрактал вниз.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Fractals.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Fractals.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Fractals.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.Fractals.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.GatorHistogram">
      <summary>Гистограмма осцилятора <see cref="T:StockSharp.Algo.Indicators.GatorOscillator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.GatorHistogram.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.GatorHistogram.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Indicators.GatorHistogram" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.GatorHistogram.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.GatorHistogram.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.GatorOscillator">
      <summary>Gator осцилятор.</summary>
      <remarks>http://ta.mql4.com/indicators/bills/gator.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.GatorOscillator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.GatorOscillator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.GatorOscillator.#ctor(StockSharp.Algo.Indicators.Alligator,StockSharp.Algo.Indicators.GatorHistogram,StockSharp.Algo.Indicators.GatorHistogram)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.GatorOscillator" />.</summary>
      <param name="alligator">Аллигатор.</param>
      <param name="histogram1">Верхняя гистограмма.</param>
      <param name="histogram2">Нижняя гистограмма.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.GatorOscillator.Histogram1">
      <summary>Верхняя гистограмма.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.GatorOscillator.Histogram2">
      <summary>Нижняя гистограмма.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.GatorOscillator.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.GatorOscillator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MarketFacilitationIndex">
      <summary>Индекс Облегчения Рынка.</summary>
      <remarks>http://ta.mql4.com/indicators/bills/market_facilitation_index.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketFacilitationIndex.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MarketFacilitationIndex" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketFacilitationIndex.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.WilliamsR">
      <summary>Процентный диапазон Уильямса.</summary>
      <remarks>%R = (Highest High - Close)/(Highest High - Lowest Low) * -100 http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:williams_r http://www2.wealth-lab.com/WL5Wiki/WilliamsR.ashx.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Indicators.WilliamsR.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.WilliamsR" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.WilliamsR.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.WilliamsR.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.WilliamsR.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ComplexIndicatorModes">
      <summary>Режимы обработки вложенных индикаторов.</summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Sequence">
      <summary>Последовательно. Результат выполнения предыдущего индикатора передается в следующий.</summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Parallel">
      <summary>Параллельно. Результаты выполнения индикаторов не зависят друг от друга.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.BaseComplexIndicator">
      <summary>Базовый индикатор, который строится в виде комбинации нескольких индикаторов.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.#ctor(StockSharp.Algo.Indicators.IIndicator[])">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.BaseComplexIndicator" />.</summary>
      <param name="innerIndicators">Вложенные индикаторы.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.Mode">
      <summary>Режим обработки вложенных индикаторов. По умолчаннию равно <see cref="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Parallel" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.InnerIndicators">
      <summary>Вложенные индикаторы.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Indicators.BaseIndicator">
      <summary>Базовый индикатор.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Indicators.BaseIndicator" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicator.Id">
      <summary>Уникальный идентификатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicator.Name">
      <summary>Название индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicator.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicator.Container">
      <summary>Контейнер, хранящий данные индикатора.</summary>
    </member>
    <member name="E:StockSharp.Algo.Indicators.BaseIndicator.Changed">
      <summary>Событие об изменении индикатора (например, добавлено новое значение).</summary>
    </member>
    <member name="E:StockSharp.Algo.Indicators.BaseIndicator.Reseted">
      <summary>Событие о сбросе состояния индикатора на первоначальное. Событие вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Process(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.RaiseChangedEvent(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Indicators.BaseIndicator.Changed" />.</summary>
      <param name="input">Входное значение индикатора.</param>
      <param name="result">Результирующее значение индикатора.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Indicators.IIndicator" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IComplexIndicator">
      <summary>Интерфейс индикатора, который строится в виде комбинации нескольких индикаторов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IComplexIndicator.InnerIndicators">
      <summary>Вложенные индикаторы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IIndicator">
      <summary>Интерфейс, описывающий индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicator.Id">
      <summary>Уникальный идентификатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicator.Name">
      <summary>Название индикатора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicator.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicator.Container">
      <summary>Контейнер, хранящий данные индикатора.</summary>
    </member>
    <member name="E:StockSharp.Algo.Indicators.IIndicator.Changed">
      <summary>Событие об изменении индикатора (например, добавлено новое значение).</summary>
    </member>
    <member name="E:StockSharp.Algo.Indicators.IIndicator.Reseted">
      <summary>Событие о сбросе состояния индикатора на первоначальное. Событие вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicator.Process(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Обработать входное значение.</summary>
      <param name="input">Входное значение.</param>
      <returns>Новое значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicator.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IIndicatorContainer">
      <summary>Интерфейс контейнера, хранящего данные индикатора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorContainer.Count">
      <summary>Текущее количество сохраненных значений.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.AddValue(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Добавить новые значения.</summary>
      <param name="input">Входное значение индикатора.</param>
      <param name="result">Результирующее значение индикатора.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.GetValues">
      <summary>Получить все значения индикатора.</summary>
      <returns>Все значения индикатора. Пустое множество, если значений нет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.GetValue(System.Int32)">
      <summary>Получить значения индикатора по индексу.</summary>
      <param name="index">Порядковый номер значения с конца.</param>
      <returns>Входное и результирующие значения индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.ClearValues">
      <summary>Удалить все значения индикатора.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IIndicatorValue">
      <summary>Значение индикатора, на основе которого он обновит свое значение, а так значение, хранящее результат вычисления индикатора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.Indicator">
      <summary>Индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.IsEmpty">
      <summary>Значение индикатора отсутствует.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.IsFinal">
      <summary>Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.InputValue">
      <summary>Входное значение.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.IsSupport(System.Type)">
      <summary>Поддерживает ли значение необходимый для индикатора тип данных.</summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>
        <see langword="true" />, если тип данных поддерживается, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.GetValue``1">
      <summary>Получить значение по типу данных.</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.BaseIndicatorValue">
      <summary>Базовый класс для значения индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Indicators.BaseIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.Indicator">
      <summary>Индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.IsEmpty">
      <summary>Значение индикатора отсутствует.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.IsFinal">
      <summary>Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicatorValue.InputValue">
      <summary>Входное значение.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.IsSupport(System.Type)">
      <summary>Поддерживает ли значение необходимый для индикатора тип данных.</summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>
        <see langword="true" />, если тип данных поддерживается, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.GetValue``1">
      <summary>Получить значение по типу данных.</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.CompareTo(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Сравнить <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue" /> на эквивалентность.</summary>
      <param name="other">Другое значение, с которым необходимо сравнивать.</param>
      <returns>Результат сравнения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicatorValue.System#IComparable#CompareTo(System.Object)">
      <summary>Сравнить <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue" /> на эквивалентность.</summary>
      <param name="other">Другое значение, с которым необходимо сравнивать.</param>
      <returns>Результат сравнения.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1">
      <summary>Базовое значение индикатора, работающее с один типом данных.</summary>
      <typeparam name="TValue">Тип значения.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.#ctor(StockSharp.Algo.Indicators.IIndicator,`0)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1" />.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.#ctor(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1" />.</summary>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.Value">
      <summary>Значение.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsEmpty">
      <summary>Значение индикатора отсутствует.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsFinal">
      <summary>Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.InputValue">
      <summary>Входное значение.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsSupport(System.Type)">
      <summary>Поддерживает ли значение необходимый для индикатора тип данных.</summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>
        <see langword="true" />, если тип данных поддерживается, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.GetValue``1">
      <summary>Получить значение по типу данных.</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.CompareTo(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Сравнить <see cref="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1" /> на эквивалентность.</summary>
      <param name="other">Другое значение, с которым необходимо сравнивать.</param>
      <returns>Результат сравнения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.DecimalIndicatorValue">
      <summary>Значение индикатора, работающее с типом данных <see cref="T:System.Decimal" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,System.Decimal)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.DecimalIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.DecimalIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.CandleIndicatorValue">
      <summary>Значение индикатора, работающее с типом данных <see cref="T:StockSharp.Algo.Candles.Candle" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.Algo.Candles.Candle)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.Algo.Candles.Candle,System.Func{StockSharp.Algo.Candles.Candle,System.Decimal})">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <param name="getPart">Конвертер свечи, через который можно получить ее параметр. По-умолчанию используется <see cref="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByClose" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByClose">
      <summary>Конвертер, который берет из свечи цену закрытия <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice" />.</summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByOpen">
      <summary>Конвертер, который берет из свечи цену открытия <see cref="P:StockSharp.Algo.Candles.Candle.OpenPrice" />.</summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByMiddle">
      <summary>Конвертер, который берет из свечи середину тела (<see cref="P:StockSharp.Algo.Candles.Candle.OpenPrice" /> + <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice" />) / 2.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.IsSupport(System.Type)">
      <summary>Поддерживает ли значение необходимый для индикатора тип данных.</summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>
        <see langword="true" />, если тип данных поддерживается, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.GetValue``1">
      <summary>Получить значение по типу данных.</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue">
      <summary>Значение индикатора, работающее с типом данных <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.BusinessEntities.MarketDepth)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="depth">Стакан.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.BusinessEntities.MarketDepth,System.Func{StockSharp.BusinessEntities.MarketDepth,System.Nullable{System.Decimal}})">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="depth">Стакан.</param>
      <param name="getPart">Конвертер стакана, через который можно получить его параметр. По-умолчанию используется <see cref="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByMiddle" />.</param>
    </member>
    <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByBestBid">
      <summary>Конвертер, который берет из стакана цену лучшего бида <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestBid" />.</summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByBestAsk">
      <summary>Конвертер, который берет из стакана цену лучшего оффера <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestAsk" />.</summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByMiddle">
      <summary>Конвертер, который берет из стакана середину спреда <see cref="P:StockSharp.BusinessEntities.MarketDepthPair.MiddlePrice" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.IsSupport(System.Type)">
      <summary>Поддерживает ли значение необходимый для индикатора тип данных.</summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>
        <see langword="true" />, если тип данных поддерживается, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.GetValue``1">
      <summary>Получить значение по типу данных.</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.PairIndicatorValue`1">
      <summary>Значение индикатора, работающее с парой <see ref="Tuple{TValue, TValue}" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.PairIndicatorValue`1.#ctor(StockSharp.Algo.Indicators.IIndicator,System.Tuple{`0,`0})">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.PairIndicatorValue`1" />.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.PairIndicatorValue`1.#ctor(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.PairIndicatorValue`1" />.</summary>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.PairIndicatorValue`1.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ComplexIndicatorValue">
      <summary>Комплексное значение индикатора <see cref="T:StockSharp.Algo.Indicators.IComplexIndicator" />, которое получается в результате вычисления.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ComplexIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.IsEmpty">
      <summary>Значение индикатора отсутствует.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.IsFinal">
      <summary>Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.InputValue">
      <summary>Входное значение.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.InnerValues">
      <summary>Вложенные значения.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.IsSupport(System.Type)">
      <summary>Поддерживает ли значение необходимый для индикатора тип данных.</summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>
        <see langword="true" />, если тип данных поддерживается, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.GetValue``1">
      <summary>Получить значение по типу данных.</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Измененная копия входного значения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.CompareTo(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Сравнить <see cref="T:StockSharp.Algo.Indicators.ComplexIndicatorValue" /> на эквивалентность.</summary>
      <param name="other">Другое значение, с которым необходимо сравнивать.</param>
      <returns>Результат сравнения.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IndicatorContainer">
      <summary>Контейнер, хранящий данные индикаторов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IndicatorContainer.MaxValueCount">
      <summary>Максимальное количество значений индикаторов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IndicatorContainer.Count">
      <summary>Текущее количество сохраненных значений.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.AddValue(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Добавить новые значения.</summary>
      <param name="input">Входное значение индикатора.</param>
      <param name="result">Результирующее значение индикатора.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.GetValues">
      <summary>Получить все значения индикатора.</summary>
      <returns>Все значения индикатора. Пустое множество, если значений нет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.GetValue(System.Int32)">
      <summary>Получить значения индикатора по индексу.</summary>
      <param name="index">Порядковый номер значения с конца.</param>
      <returns>Входное и результирующие значения индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.ClearValues">
      <summary>Удалить все значения индикатора.</summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IndicatorHelper">
      <summary>Вспомогательный класс для работы с индикаторами.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetCurrentValue(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Получить текущее значение индикатора.</summary>
      <param name="indicator">Индикатор.</param>
      <returns>Текущее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetCurrentValue``1(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Получить текущее значение индикатора.</summary>
      <typeparam name="T">Тип значения.</typeparam>
      <param name="indicator">Индикатор.</param>
      <returns>Текущее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetValue(StockSharp.Algo.Indicators.IIndicator,System.Int32)">
      <summary>Получить значение индикатора по индексу (0 - последнее значение).</summary>
      <param name="indicator">Индикатор.</param>
      <param name="index">Индекс значения.</param>
      <returns>Значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetValue``1(StockSharp.Algo.Indicators.IIndicator,System.Int32)">
      <summary>Получить значение индикатора по индексу (0 - последнее значение).</summary>
      <typeparam name="T">Тип значения.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="index">Индекс значения.</param>
      <returns>Значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.Process(StockSharp.Algo.Indicators.IIndicator,StockSharp.Algo.Candles.Candle)">
      <summary>Обновить индикатор ценой закрытия свечи <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice" />.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="candle">Свеча.</param>
      <returns>Новое значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.Process(StockSharp.Algo.Indicators.IIndicator,System.Decimal,System.Boolean)">
      <summary>Обновить индикатор числовым значением.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="value">Числовое значение.</param>
      <param name="isFinal">Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени). По-умолчанию <see langword="true" />.</param>
      <returns>Новое значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.Process``1(StockSharp.Algo.Indicators.IIndicator,System.Tuple{``0,``0},System.Boolean)">
      <summary>Обновить индикатор числовой парой.</summary>
      <param name="indicator">Индикатор.</param>
      <param name="value">Пара значений.</param>
      <param name="isFinal">Является ли пара окончательной (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени). По-умолчанию <see langword="true" />.</param>
      <returns>Новое значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetInputValue``1(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Получить входное значение для <see cref="T:StockSharp.Algo.Indicators.IIndicatorValue" />.</summary>
      <typeparam name="T">Тип значения.</typeparam>
      <param name="indicatorValue">Значение индикатора.</param>
      <returns>Входное значение указанного типа.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.LengthIndicator`1">
      <summary>Базовый класс для индикаторов с одним результирующим значением и основанных на периоде.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Indicators.LengthIndicator`1" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Reset">
      <summary>Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.Length">
      <summary>Длина периода. По-умолчанию длина равна 1.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.IsFormed">
      <summary>Сформирован ли индикатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.Buffer">
      <summary>Буфер для хранения данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue">
      <summary>Смещенное значение индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue" />.</summary>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,System.Int32,StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>Создать <see cref="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue" />.</summary>
      <param name="shift">Смещение значения индикатора.</param>
      <param name="value">Значение индикатора.</param>
      <param name="indicator">Индикатор.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ShiftedIndicatorValue.Shift">
      <summary>Смещение значения индикатора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.IsSupport(System.Type)">
      <summary>Поддерживает ли значение необходимый для индикатора тип данных.</summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>
        <see langword="true" />, если тип данных поддерживается, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.GetValue``1">
      <summary>Получить значение по типу данных.</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.SetValue``1(StockSharp.Algo.Indicators.IIndicator,``0)">
      <summary>Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).</summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="value">Значение.</param>
      <returns>Измененная копия входного значения.</returns>
    </member>
    <member name="T:StockSharp.Algo.ExtendedInfoStorageMessageAdapter">
      <summary>Адаптер сообщения, сохраняющий <see cref="P:StockSharp.Messages.Message.ExtensionInfo" /> в <see cref="T:StockSharp.Algo.Storages.IExtendedInfoStorage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.ExtendedInfoStorageMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Storages.IExtendedInfoStorageItem)">
      <summary>Создать <see cref="T:StockSharp.Messages.MessageAdapterWrapper" />.</summary>
      <param name="innerAdapter">Адаптер.</param>
      <param name="storage">Хранилище расширенной информации <see cref="P:StockSharp.Messages.Message.ExtensionInfo" />.</param>
    </member>
    <member name="P:StockSharp.Algo.ExtendedInfoStorageMessageAdapter.Storage">
      <summary>Хранилище расширенной информации <see cref="P:StockSharp.Messages.Message.ExtensionInfo" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.ExtendedInfoStorageMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.ExtendedInfoStorageMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.ExtendedInfoStorageMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IExtendedInfoStorageItem">
      <summary>Хранилище расширенной информации <see cref="P:StockSharp.Messages.Message.ExtensionInfo" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Fields">
      <summary>Название полей расширенной информации.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Add(StockSharp.Messages.SecurityId,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Добавить расширенную информацию.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="extensionInfo">Расширенная информация.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorageItem.Load">
      <summary>Загрузить расширенную информацию.</summary>
      <returns>Расширенная информация.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IExtendedInfoStorage">
      <summary>Хранилище расширенной информации <see cref="P:StockSharp.Messages.Message.ExtensionInfo" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IExtendedInfoStorage.Get(System.String,System.String[])">
      <summary>Получить и инициализировать хранилище по заданному имени.</summary>
      <param name="storageName">Имя хранилища.</param>
      <param name="fields">Название полей расширенной информации.</param>
      <returns>Хранилище.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.CsvExtendedInfoStorage">
      <summary>Хранилище расширенной информации <see cref="P:StockSharp.Messages.Message.ExtensionInfo" />, использующее CSV файлы.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.CsvExtendedInfoStorage.#ctor(System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.CsvExtendedInfoStorage" />.</summary>
      <param name="path">Путь к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.CsvExtendedInfoStorage.Get(System.String,System.String[])">
      <summary>Получить и инициализировать хранилище по заданному имени.</summary>
      <param name="storageName">Имя хранилища.</param>
      <param name="fields">Название полей расширенной информации.</param>
      <returns>Хранилище.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.INativeIdStorage">
      <summary>Хранилище системных идентификатор инструментов.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.INativeIdStorage.Init">
      <summary>Инициализировать хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.INativeIdStorage.Get(System.String)">
      <summary>Получить все системные идентификаторы.</summary>
      <param name="name">Имя хранилища.</param>
      <returns>Идентификаторы инструментов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.INativeIdStorage.TryAdd(System.String,StockSharp.Messages.SecurityId,System.Object,System.Boolean)">
      <summary>Добавить идентификатор в хранилище.</summary>
      <param name="name">Имя хранилища.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="nativeId">Внутренний идентификатор торговой системы.</param>
      <param name="isPersistable">Сохранить идентификатор как постоянный.</param>
      <returns>
        <see langword="true" />, если был добавлен. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.INativeIdStorage.TryGetByNativeId(System.String,System.Object)">
      <summary>Получить идентификатор инструмента.</summary>
      <param name="name">Имя хранилища.</param>
      <param name="nativeId">Внутренний идентификатор торговой системы.</param>
      <returns>Идентификатор инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.INativeIdStorage.TryGetBySecurityId(System.String,StockSharp.Messages.SecurityId)">
      <summary>Получить системных идентификатор.</summary>
      <param name="name">Имя хранилища.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Внутренний идентификатор торговой системы.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.CsvNativeIdStorage">
      <summary>Хранилище системных идентификатор инструментов в формате CSV.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.#ctor(System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.CsvNativeIdStorage" />.</summary>
      <param name="path">Путь к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.Init">
      <summary>Инициализировать хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.Get(System.String)">
      <summary>Получить все системные идентификаторы.</summary>
      <param name="name">Имя хранилища.</param>
      <returns>Идентификаторы инструментов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.TryAdd(System.String,StockSharp.Messages.SecurityId,System.Object,System.Boolean)">
      <summary>Добавить идентификатор в хранилище.</summary>
      <param name="name">Имя хранилища.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="nativeId">Внутренний идентификатор торговой системы.</param>
      <param name="isPersistable">Сохранить идентификатор как постоянный.</param>
      <returns>
        <see langword="true" />, если был добавлен. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.TryGetByNativeId(System.String,System.Object)">
      <summary>Получить идентификатор инструмента.</summary>
      <param name="name">Имя хранилища.</param>
      <param name="nativeId">Внутренний идентификатор торговой системы.</param>
      <returns>Идентификатор инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.CsvNativeIdStorage.TryGetBySecurityId(System.String,StockSharp.Messages.SecurityId)">
      <summary>Получить системных идентификатор.</summary>
      <param name="name">Имя хранилища.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Внутренний идентификатор торговой системы.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.InMemoryNativeIdStorage">
      <summary>Хранилища системных идентификаторов.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.AllSecurityMarketDataStorage`1.Save(System.Collections.Generic.IEnumerable{`0})">
      <summary>Сохранить маркет-данные в хранилище.</summary>
      <param name="data">Маркет-данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.AllSecurityMarketDataStorage`1.Delete(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удалить маркет-данные из хранилища.</summary>
      <param name="data">Маркет-данные, которые необходимо удалить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.AllSecurityMarketDataStorage`1.Load(System.DateTime)">
      <summary>Загрузить данные.</summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные. Если данных не существует, то будет возвращено пустое множество.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.BufferMessageAdapter">
      <summary>Буферизирующию адаптер сообщений.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.BufferMessageAdapter.DataBuffer`2">
      <summary>Буфер маркет-данных.</summary>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="TMarketData">Тип рыночных данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.DataBuffer`2.Add(`0,`1)">
      <summary>Добавить новую информацию в буфер.</summary>
      <param name="key">Ключ, которому принадлежит новая информация.</param>
      <param name="data">Новая информация.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.DataBuffer`2.Get">
      <summary>Получить накопленные данные из буфера и удалить их.</summary>
      <returns>Полученные данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.BufferMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetTicks">
      <summary>Получить накопленные тики.</summary>
      <returns>Тики.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetOrderLog">
      <summary>Получить накопленный лог заявок.</summary>
      <returns>Строчки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetTransactions">
      <summary>Получить накопленные транзакции.</summary>
      <returns>Транзакции.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetCandles">
      <summary>Получить накопленные свечи.</summary>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetLevel1">
      <summary>Получить накопленные level1.</summary>
      <returns>Level1.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetOrderBooks">
      <summary>Получить накопленные стаканы.</summary>
      <returns>Стаканы.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.GetNews">
      <summary>Получить накопленные новости.</summary>
      <returns>Новости.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BufferMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Storages.StorageMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.CacheableMarketDataDrive">
      <summary>Хранилище маркет-данных, сохраняющее данных в кэш-хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.CacheableMarketDataDrive.#ctor(StockSharp.Algo.Storages.IMarketDataStorageDrive,StockSharp.Algo.Storages.IMarketDataStorageDrive)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.CacheableMarketDataDrive" />.</summary>
      <param name="sourceDrive">Исходное хранилище маркет-данных.</param>
      <param name="cacheDrive">Кэш-хранилище маркет-данных.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1">
      <summary>Агрегатор, позволяющий последовательно загружать маркет-данных из нескольких хранилищ.</summary>
      <typeparam name="T">Тип сообщения.</typeparam>
    </member>
    <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.Boards">
      <summary>Список всех площадок, для которых были загружены инструменты.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.MessageCount">
      <summary>Количество сообщений в очереди.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.MaxMessageCount">
      <summary>Максимальный размер очереди сообщений.</summary>
      <remarks>Значение по умолчанию равно -1, что соответствует размеру без ограничений.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.StartDate">
      <summary>Дата в истории, с которой необходимо начать эмуляцию.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.StopDate">
      <summary>Дата в истории, на которой необходимо закончить эмуляцию (дата включается).</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.PostTradeMarketTimeChangedCount">
      <summary>Количество вызовов события <see cref="E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged" /> после окончания торгов. По-умолчанию равно 2.</summary>
      <remarks>Необходимо для активации пост-трейд правил (правила, которые опираются на события, происходящие после окончания торгов).</remarks>
    </member>
    <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.MarketTimeChangedInterval">
      <summary>Интервал генерации сообщения <see cref="T:StockSharp.Messages.TimeMessage" />. По-умолчанию равно 1 секунде.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.#ctor(StockSharp.Algo.Storages.BasketMarketDataStorage{`0})">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.AddStorage(StockSharp.Algo.Storages.IMarketDataStorage)">
      <summary>Добавить хранилище маркет-данных.</summary>
      <param name="storage">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.RemoveStorage``1(StockSharp.BusinessEntities.Security,StockSharp.Messages.MessageTypes,System.Object)">
      <summary>Удалить хранилище маркет-данных.</summary>
      <typeparam name="TStorage">Тип хранилища.</typeparam>
      <param name="security">Инструмент стакана.</param>
      <param name="messageType">Тип сообщения.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="messageType" />. Например, <see cref="P:StockSharp.Messages.CandleMessage.Arg" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.MoveNext">
      <summary>К следующему элементу.</summary>
      <returns>
        <see langword="true" /> если перечислитель успешно перешел к следующему элементу; <see langword="false" /> если перечислитель дошел до конца коллекции.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.Reset">
      <summary>Установить перечислитель в начальное положение.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.Current">
      <summary>Получить текущий элемент.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.CsvEntityRegistry">
      <summary>Реестр CSV объектов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Path">
      <summary>Путь к данным.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Storage">
      <summary>Специальный интерфейс для прямого доступа к хранилищу.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.DelayAction">
      <summary>Отложенное действие.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Exchanges">
      <summary>Список бирж.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.ExchangeBoards">
      <summary>Список биржевых площадок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Securities">
      <summary>Список инструментов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Portfolios">
      <summary>Список портфелей.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Positions">
      <summary>Список позиций.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.MyTrades">
      <summary>Список собственных сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Trades">
      <summary>Список тиковых сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Orders">
      <summary>Список заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.OrderFails">
      <summary>Список ошибок регистрации и снятия заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.News">
      <summary>Список новостей.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.#ctor(System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.CsvEntityRegistry" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvEntityRegistry.Init">
      <summary>Инициализировать хранилище.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1">
      <summary>Сериализатор свечек в CSV формате.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.#ctor(StockSharp.Messages.SecurityId,System.Object,System.Text.Encoding)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="arg">Параметр свечи.</param>
      <param name="encoding">Кодировка.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.Arg">
      <summary>Параметр свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.CreateMetaInfo(System.DateTime)">
      <summary>Создать пустую мета-информацию.</summary>
      <param name="date">Дата.</param>
      <returns>Мета-информация о данных за один день.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{`0},StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Сохранить данные в поток байтов.</summary>
      <param name="stream">Поток данных.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.Write(Ecng.Common.CsvFileWriter,`0,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Записать данные.</summary>
      <param name="writer">CSV писатель.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CandleCsvSerializer`1.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Считать данные.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.CsvHelper">
      <summary>CSV расширение.</summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.DateFormat">
      <summary>
        <see cref="T:System.DateTime" /> формат.</summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.TimeMlsFormat">
      <summary>
        <see cref="T:System.TimeSpan" /> формат с миллисекундами.</summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.TimeFormat">
      <summary>
        <see cref="T:System.TimeSpan" /> формат.</summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.DateParser">
      <summary>
        <see cref="T:System.DateTime" /> парсер.</summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.TimeMlsParser">
      <summary>
        <see cref="T:System.TimeSpan" /> парсер.</summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.Csv.CsvHelper.TimeParser">
      <summary>
        <see cref="T:System.TimeSpan" /> парсер.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvHelper.ReadTime(Ecng.Common.FastCsvReader,System.DateTime)">
      <summary>Считать <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="date">Дата.</param>
      <returns>
        <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1">
      <summary>Сериализатор в формате CSV.</summary>
      <typeparam name="TData">Типы данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.#ctor(System.Text.Encoding)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1" />.</summary>
      <param name="encoding">Кодировка.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="encoding">Кодировка.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Encoding">
      <summary>Кодировка.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Format">
      <summary>Формат хранилища.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.CreateMetaInfo(System.DateTime)">
      <summary>Создать пустую мета-информацию.</summary>
      <param name="date">Дата.</param>
      <returns>Мета-информация о данных за один день.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{`0},StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Сохранить данные в поток байтов.</summary>
      <param name="stream">Поток данных.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Write(Ecng.Common.CsvFileWriter,`0,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Записать данные.</summary>
      <param name="writer">CSV писатель.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Deserialize(System.IO.Stream,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Загрузить данные из потока.</summary>
      <param name="stream">Поток.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.CsvMarketDataSerializer`1.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Считать данные.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.Level1CsvSerializer">
      <summary>Сериализатор level1 в CSV формате.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.Level1CsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.Level1CsvSerializer" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="encoding">Кодировка.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.Level1CsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.Level1ChangeMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Записать данные.</summary>
      <param name="writer">CSV писатель.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.Level1CsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Считать данные.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.NewsCsvSerializer">
      <summary>Сериализатор новостей в CSV формате.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.NewsCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.NewsMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Записать данные.</summary>
      <param name="writer">CSV писатель.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.NewsCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Считать данные.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer">
      <summary>Сериализатор лога заявок в CSV формате.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="encoding">Кодировка.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer.CreateMetaInfo(System.DateTime)">
      <summary>Создать пустую мета-информацию.</summary>
      <param name="date">Дата.</param>
      <returns>Мета-информация о данных за один день.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.ExecutionMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Записать данные.</summary>
      <param name="writer">CSV писатель.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.OrderLogCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Считать данные.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer">
      <summary>Сериализатор котировок в CSV формате.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="encoding">Кодировка.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Algo.TimeQuoteChange,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Записать данные.</summary>
      <param name="writer">CSV писатель.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.QuoteCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Считать данные.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.TickCsvSerializer">
      <summary>Сериализатор тиков в CSV формате.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.TickCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.TickCsvSerializer" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="encoding">Кодировка.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.TickCsvSerializer.CreateMetaInfo(System.DateTime)">
      <summary>Создать пустую мета-информацию.</summary>
      <param name="date">Дата.</param>
      <returns>Мета-информация о данных за один день.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.TickCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.ExecutionMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Записать данные.</summary>
      <param name="writer">CSV писатель.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.TickCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Считать данные.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer">
      <summary>Сериализатор транзакций в CSV формате.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer.#ctor(StockSharp.Messages.SecurityId,System.Text.Encoding)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="encoding">Кодировка.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer.Write(Ecng.Common.CsvFileWriter,StockSharp.Messages.ExecutionMessage,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Записать данные.</summary>
      <param name="writer">CSV писатель.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.Csv.TransactionCsvSerializer.Read(Ecng.Common.FastCsvReader,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Считать данные.</summary>
      <param name="reader">CSV читатель.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.ExchangeInfoProvider">
      <summary>Провайдер бирж и торговых площадок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeInfoProvider.#ctor(StockSharp.Algo.Storages.IEntityRegistry)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.ExchangeInfoProvider" />.</summary>
      <param name="entityRegistry">Хранилище торговых объектов.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.ExchangeInfoProvider.Boards">
      <summary>Все биржи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ExchangeInfoProvider.Exchanges">
      <summary>Все площадки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Storages.ExchangeInfoProvider.BoardAdded">
      <summary>Оповещение о добавлении новой площадки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Storages.ExchangeInfoProvider.ExchangeAdded">
      <summary>Оповещение о добавлении новой биржи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeInfoProvider.Save(StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Сохранить площадку.</summary>
      <param name="board">Торговая площадка.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeInfoProvider.Save(StockSharp.BusinessEntities.Exchange)">
      <summary>Сохранить биржу.</summary>
      <param name="exchange">Биржа.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeInfoProvider.GetExchangeBoard(System.String)">
      <summary>Получить площадку по коду.</summary>
      <param name="code">Код площадки <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Code" />.</param>
      <returns>Торговая площадка. Если площадка с заданным кодом не существует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeInfoProvider.GetExchange(System.String)">
      <summary>Получить биржу по коду.</summary>
      <param name="code">Код биржи <see cref="P:StockSharp.BusinessEntities.Exchange.Name" />.</param>
      <returns>Биржа. Если биржа с заданным кодом не существует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.ExchangeList">
      <summary>Класс для представления в виде списка бирж, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.ExchangeList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataMetaInfo">
      <summary>Мета-информация о данных за один день.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.Date">
      <summary>Дата дня.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.Count">
      <summary>Количество данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.PriceStep">
      <summary>Значение <see cref="P:StockSharp.BusinessEntities.Security.PriceStep" /> в день <see cref="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.Date" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.VolumeStep">
      <summary>Значение <see cref="P:StockSharp.BusinessEntities.Security.VolumeStep" /> в день <see cref="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.Date" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.FirstTime">
      <summary>Время первой записи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.LastTime">
      <summary>Время последней записи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.LastId">
      <summary>Идентификатор последней записи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataMetaInfo.Write(System.IO.Stream)">
      <summary>Сохранить параметры мета-информации в поток.</summary>
      <param name="stream">Поток данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataMetaInfo.Read(System.IO.Stream)">
      <summary>Загрузить параметры мета-информации из потока.</summary>
      <param name="stream">Поток данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataMetaInfo.IsOverride">
      <summary>Перезаписать все данные.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.MetaInfo.Write(System.IO.Stream)">
      <summary>Сохранить параметры мета-информации в поток.</summary>
      <param name="stream">Поток данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.MetaInfo.Read(System.IO.Stream)">
      <summary>Загрузить параметры мета-информации из потока.</summary>
      <param name="stream">Поток данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.MetaInfo.IsOverride">
      <summary>Перезаписать все данные.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1">
      <summary>Хранилище, генерирующее данные в процессе работы.</summary>
      <typeparam name="T">Типы данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{StockSharp.Messages.Message}},System.Type)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1" />.</summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Дополнительный аргумент, ассоциированный с данными. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="getData">Обработчик, возвращающий данные из памяти.</param>
      <param name="dataType">Типы данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1.#ctor(StockSharp.BusinessEntities.Security,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{`0}})">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1" />.</summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Дополнительный аргумент, ассоциированный с данными. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="getData">Обработчик, возвращающий данные из памяти.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.InMemoryMarketDataStorage`1.Load(System.DateTime)">
      <summary>Загрузить данные.</summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные. Если данных не существует, то будет возвращено пустое множество.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.ISecurityMarketDataDrive">
      <summary>Интерфейс, описывающий хранилище для инструмента.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ISecurityMarketDataDrive.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetTickStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
      <summary>Получить хранилище тиковых сделок для заданного инструмента.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetQuoteStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Получить хранилище стаканов для заданного инструмента.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetOrderLogStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
      <summary>Получить хранилище лога заявок для заданного инструмента.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetLevel1Storage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Получить хранилище level1 данных.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище level1 данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetCandleStorage(System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.CandleMessage})">
      <summary>Получить хранилище свечек для заданного инструмента.</summary>
      <param name="candleType">Тип свечи.</param>
      <param name="arg">Параметр свечи.</param>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetTransactionStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
      <summary>Получить хранилище транзакций для заданного инструмента.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище транзакций.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityMarketDataDrive.GetStorage(System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataSerializer)">
      <summary>Получить хранилище маркет-данных.</summary>
      <param name="dataType">Тип рыночных данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище маркет-данных.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.SecurityMarketDataDrive">
      <summary>Хранилище для инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.#ctor(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.BusinessEntities.Security)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.SecurityMarketDataDrive" />.</summary>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityMarketDataDrive.Drive">
      <summary>Хранилище (база данных, файл и т.д.).</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityMarketDataDrive.Security">
      <summary>Инструмент стакана.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityMarketDataDrive.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetTickStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
      <summary>Получить хранилище тиковых сделок для заданного инструмента.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetQuoteStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Получить хранилище стаканов для заданного инструмента.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetOrderLogStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
      <summary>Получить хранилище лога заявок для заданного инструмента.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetLevel1Storage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Получить хранилище level1 данных.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище level1 данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetCandleStorage(System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.CandleMessage})">
      <summary>Получить хранилище свечек для заданного инструмента.</summary>
      <param name="candleType">Тип свечи.</param>
      <param name="arg">Параметр свечи.</param>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetTransactionStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.ExecutionMessage})">
      <summary>Получить хранилище транзакций для заданного инструмента.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище транзакций.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityMarketDataDrive.GetStorage(System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataSerializer)">
      <summary>Получить хранилище маркет-данных.</summary>
      <param name="dataType">Тип рыночных данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище маркет-данных.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.ISecurityStorage">
      <summary>Интерфейс для доступа к хранилищу информации об инструментах.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityStorage.Save(StockSharp.BusinessEntities.Security)">
      <summary>Сохранить инструмент.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityStorage.Delete(StockSharp.BusinessEntities.Security)">
      <summary>Удалить инструмент.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityStorage.DeleteBy(StockSharp.BusinessEntities.Security)">
      <summary>Удалить инструменты по критерию.</summary>
      <param name="criteria">Критерий.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ISecurityStorage.GetSecurityIds">
      <summary>Получить идентификаторы сохраненных инструментов.</summary>
      <returns>Идентификаторы инструментов.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IStoragePositionList">
      <summary>Интерфейс доступа к хранилищу позиций.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStoragePositionList.ReadBySecurityAndPortfolio(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Portfolio)">
      <summary>Загрузить позицию.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="portfolio">Портфель.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IStorageSecurityList">
      <summary>Интерфейс для доступа к хранилищу инструментов.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.NewsList">
      <summary>Класс для представления в виде списка новостей, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.NewsList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.NewsList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.StorageEntityFactory">
      <summary>Фарбика сущностей, использующая хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageEntityFactory.#ctor(StockSharp.Algo.Storages.IEntityRegistry)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.StorageEntityFactory" />.</summary>
      <param name="entityRegistry">Хранилище торговых объектов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageEntityFactory.CreateSecurity(System.String)">
      <summary>Создать инструмент по идентификатору.</summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Созданный инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageEntityFactory.CreatePortfolio(System.String)">
      <summary>Создать портфель по номеру счета.</summary>
      <param name="name">Номер счета.</param>
      <returns>Созданный портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageEntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>Создать позицию.</summary>
      <param name="portfolio">Портфель.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Созданная позиция.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IContinuousSecurityMarketDataStorage">
      <summary>Интерфейс, описывающий хранилище маркет-данных для непрерывного инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IContinuousSecurityMarketDataStorage.GetStorage(System.DateTime)">
      <summary>Получить хранилище для составного инструмента.</summary>
      <param name="date">Дата.</param>
      <returns>Хранилище составного инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ContinuousSecurityMarketDataStorage`1.Save(System.Collections.Generic.IEnumerable{`0})">
      <summary>Сохранить маркет-данные в хранилище.</summary>
      <param name="data">Маркет-данные.</param>
      <returns>Количество сохраненных данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ContinuousSecurityMarketDataStorage`1.Delete(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удалить маркет-данные из хранилища.</summary>
      <param name="data">Маркет-данные, которые необходимо удалить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ContinuousSecurityMarketDataStorage`1.Load(System.DateTime)">
      <summary>Загрузить данные.</summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные. Если данных не существует, то будет возвращено пустое множество.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.EntityRegistry">
      <summary>Хранилище торговых объектов.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.EntityRegistry.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.EntityRegistry" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.EntityRegistry.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.EntityRegistry" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Storage">
      <summary>Специальный интерфейс для прямого доступа к хранилищу.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Exchanges">
      <summary>Список бирж.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.ExchangeBoards">
      <summary>Список биржевых площадок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Securities">
      <summary>Список инструментов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Portfolios">
      <summary>Список портфелей.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Positions">
      <summary>Список позиций.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.MyTrades">
      <summary>Список собственных сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Trades">
      <summary>Список тиковых сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Orders">
      <summary>Список заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.OrderFails">
      <summary>Список ошибок регистрации и снятия заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.News">
      <summary>Список новостей.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.DelayAction">
      <summary>Отложенное действие.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.ExchangeBoardList">
      <summary>Класс для представления в виде списка биржевых площадок, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeBoardList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.ExchangeBoardList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeBoardList.GetIds">
      <summary>Получить идентификаторы.</summary>
      <returns>Идентификаторы.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IEntityRegistry">
      <summary>Интерфейс, описывающий хранилище торговых объектов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Storage">
      <summary>Специальный интерфейс для прямого доступа к хранилищу.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.DelayAction">
      <summary>Отложенное действие.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Exchanges">
      <summary>Список бирж.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.ExchangeBoards">
      <summary>Список биржевых площадок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Securities">
      <summary>Список инструментов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Portfolios">
      <summary>Список портфелей.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Positions">
      <summary>Список позиций.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.MyTrades">
      <summary>Список собственных сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Trades">
      <summary>Список тиковых сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Orders">
      <summary>Список заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.OrderFails">
      <summary>Список ошибок регистрации и снятия заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.News">
      <summary>Список новостей.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataSerializer">
      <summary>Сериализатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataSerializer.Format">
      <summary>Формат хранилища.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer.CreateMetaInfo(System.DateTime)">
      <summary>Создать пустую мета-информацию.</summary>
      <param name="date">Дата.</param>
      <returns>Мета-информация о данных за один день.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer.Serialize(System.IO.Stream,System.Collections.IEnumerable,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Сохранить данные в поток байтов.</summary>
      <param name="stream">Поток данных.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer.Deserialize(System.IO.Stream,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Загрузить данные из потока.</summary>
      <param name="stream">Поток данных.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataSerializer`1">
      <summary>Сериализатор.</summary>
      <typeparam name="TData">Типы данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer`1.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{`0},StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Сохранить данные в поток байтов.</summary>
      <param name="stream">Поток данных.</param>
      <param name="data">Данные.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataSerializer`1.Deserialize(System.IO.Stream,StockSharp.Algo.Storages.IMarketDataMetaInfo)">
      <summary>Загрузить данные из потока.</summary>
      <param name="stream">Поток.</param>
      <param name="metaInfo">Мета-информация о данных за один день.</param>
      <returns>Данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataStorage">
      <summary>Интерфейс, описывающий хранилище маркет-данных (тики, стаканы и т.д.).</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Dates">
      <summary>Все даты, для которых записаны маркет-данные.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.DataType">
      <summary>Тип маркет-данных, с которыми работает данное хранилище.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Security">
      <summary>Инструмент, с которым работает внешнее хранилище.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Arg">
      <summary>Дополнительный аргумент, ассоциированный с данными. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Drive">
      <summary>Хранилище (база данных, файл и т.д.).</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.AppendOnlyNew">
      <summary>Добавлять ли только новые данные или пытаться записать все данные без фильтра.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Save(System.Collections.IEnumerable)">
      <summary>Сохранить маркет-данные в хранилище.</summary>
      <param name="data">Маркет-данные.</param>
      <returns>Количество сохраненных данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Delete(System.Collections.IEnumerable)">
      <summary>Удалить маркет-данные из хранилища.</summary>
      <param name="data">Маркет-данные, которые необходимо удалить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Delete(System.DateTime)">
      <summary>Удалить маркет-данные из хранилища за указанную дату.</summary>
      <param name="date">Дата, для которой необходимо удалить все данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Load(System.DateTime)">
      <summary>Загрузить данные.</summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные. Если данных не существует, то будет возвращено пустое множество.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.GetMetaInfo(System.DateTime)">
      <summary>Получить мета-информация о данных.</summary>
      <param name="date">Дата, для которой необходимо получить мета-информация о данных.</param>
      <returns>Мета-информация о данных. Если дня в истории не существует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Serializer">
      <summary>Сериализатор.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataStorage`1">
      <summary>Интерфейс, описывающий хранилище маркет-данных (тики, стаканы и т.д.).</summary>
      <typeparam name="TData">Тип рыночных данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Save(System.Collections.Generic.IEnumerable{`0})">
      <summary>Сохранить маркет-данные в хранилище.</summary>
      <param name="data">Маркет-данные.</param>
      <returns>Количество сохраненных данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Delete(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удалить маркет-данные из хранилища.</summary>
      <param name="data">Маркет-данные, которые необходимо удалить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Load(System.DateTime)">
      <summary>Загрузить данные.</summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные. Если данных не существует, то будет возвращено пустое множество.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage`1.Serializer">
      <summary>Сериализатор.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataStorageDrive">
      <summary>Интерфейс, описывающий хранилище, ассоциированное с <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDrive.Drive">
      <summary>Хранилище (база данных, файл и т.д.).</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDrive.Dates">
      <summary>Получить все даты, для которых записаны маркет-данные.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.ClearDatesCache">
      <summary>Удалить кэш-файлы, хранящие в себе информацию о доступных диапазонах времени.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.Delete(System.DateTime)">
      <summary>Удалить маркет-данные из хранилища за указанную дату.</summary>
      <param name="date">Дата, для которой необходимо удалить все данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.SaveStream(System.DateTime,System.IO.Stream)">
      <summary>Сохранить данные в формате хранилища StockSharp.</summary>
      <param name="date">Дата, для которой необходимо сохранить данные.</param>
      <param name="stream">Данные в формате хранилища StockSharp.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.LoadStream(System.DateTime)">
      <summary>Загрузить данные в формате хранилища StockSharp.</summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные в формате хранилища StockSharp. Если данных не существует, то будет возвращено <see cref="F:System.IO.Stream.Null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataDrive">
      <summary>Интерфейс, описывающий хранилище (база данных, файл и т.д.).</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataDrive.Path">
      <summary>Путь к данными.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetNewsMessageStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.NewsMessage})">
      <summary>Получить хранилище новостей.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище новостей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetSecurityDrive(StockSharp.BusinessEntities.Security)">
      <summary>Получить хранилище для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Хранилище для инструмента.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataDrive.AvailableSecurities">
      <summary>Получить все доступные инструменты.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetAvailableDataTypes(StockSharp.Messages.SecurityId,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить все доступные типы данных.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="format">Тип формата.</param>
      <returns>Типы данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetStorageDrive(StockSharp.Messages.SecurityId,System.Type,System.Object,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип рыночных данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Messages.CandleMessage.Arg" />.</param>
      <param name="format">Тип формата.</param>
      <returns>Хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.BaseMarketDataDrive">
      <summary>Базовая реализация <see cref="T:StockSharp.Algo.Storages.IMarketDataDrive" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Storages.BaseMarketDataDrive" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.BaseMarketDataDrive.Path">
      <summary>Путь к данными.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetNewsMessageStorage(StockSharp.Algo.Storages.IMarketDataSerializer{StockSharp.Messages.NewsMessage})">
      <summary>Получить хранилище новостей.</summary>
      <param name="serializer">Сериализатор.</param>
      <returns>Хранилище новостей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetSecurityDrive(StockSharp.BusinessEntities.Security)">
      <summary>Получить хранилище для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Хранилище для инструмента.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.BaseMarketDataDrive.AvailableSecurities">
      <summary>Получить все доступные инструменты.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetAvailableDataTypes(StockSharp.Messages.SecurityId,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить все доступные типы данных.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="format">Тип формата.</param>
      <returns>Типы данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetStorageDrive(StockSharp.Messages.SecurityId,System.Type,System.Object,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Создать хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип рыночных данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Messages.CandleMessage.Arg" />.</param>
      <param name="format">Тип формата.</param>
      <returns>Хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.LocalMarketDataDrive">
      <summary>Файловое хранилище маркет-данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.LocalMarketDataDrive" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.#ctor(System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.LocalMarketDataDrive" />.</summary>
      <param name="path">Путь к директории с данными.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.LocalMarketDataDrive.Path">
      <summary>Путь к директории с данными.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.LocalMarketDataDrive.AvailableSecurities">
      <summary>Получить все доступные инструменты.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetAvailableDataTypes(StockSharp.Messages.SecurityId,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить все доступные типы данных.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="format">Тип формата.</param>
      <returns>Типы данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetStorageDrive(StockSharp.Messages.SecurityId,System.Type,System.Object,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Создать хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип рыночных данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Messages.CandleMessage.Arg" />.</param>
      <param name="format">Тип формата.</param>
      <returns>Хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetExtension(StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить расширение файла для формата.</summary>
      <param name="format">Формат.</param>
      <returns>Расширение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetDataType(System.String)">
      <summary>Получить тип данных и параметр из переданного имени файла.</summary>
      <param name="fileName">Название файла.</param>
      <returns>Тип данных и параметр, ассоциированный с типом. Например, <see cref="P:StockSharp.Messages.CandleMessage.Arg" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetFileName(System.Type,System.Object,System.Nullable{StockSharp.Algo.Storages.StorageFormats})">
      <summary>Получить название файла по типу данных.</summary>
      <param name="dataType">Типы данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Messages.CandleMessage.Arg" />.</param>
      <param name="format">Формат хранилища. Если установлено, то к имени файла будет добавлено расширение.</param>
      <returns>Название файла.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetDate(System.String)">
      <summary>Преобразовать имя директории в дату.</summary>
      <param name="dirName">Название директории.</param>
      <returns>Дата.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetDirName(System.DateTime)">
      <summary>Преобразовать дату в имя директории.</summary>
      <param name="date">Дата.</param>
      <returns>Название директории.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetSecurityPath(StockSharp.Messages.SecurityId)">
      <summary>Получить путь к папке с маркет-данными для инструмента.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Путь к папке с маркет-данными.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.StorageMessageAdapter">
      <summary>Адаптер сообщений, использующий хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Storages.IEntityRegistry,StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.StorageMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
      <param name="entityRegistry">Хранилище торговых объектов.</param>
      <param name="storageRegistry">Хранилище маркет-данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.Drive">
      <summary>Хранилище (база данных, файл и т.д.).</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.Format">
      <summary>Формат.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.DaysLoad">
      <summary>Общее количество сохраненных дней.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.UseCandlesInsteadTrades">
      <summary>Использовать свечи вместо тиков.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StorageMessageAdapter.CandlesTimeFrame">
      <summary>Использовать свечи с заданным тайм-фреймом.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.Load">
      <summary>Загрузить сохраненные данные из хранилища.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Storages.StorageMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.HistoryInitializedMessage">
      <summary>Indicate history initialized message.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.HistoryInitializedMessage.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.HistoryInitializedMessage.MessageType">
      <summary>Тип сообщения.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.HistoryInitializedMessage.#ctor(StockSharp.Messages.SecurityId)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.HistoryInitializedMessage" />.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.StorageFormats">
      <summary>Типы форматов.</summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.StorageFormats.Binary">
      <summary>Бинарный формат StockSharp.</summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.StorageFormats.Csv">
      <summary>Текстовый формат CSV.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.StorageHelper">
      <summary>Вспомогательный класс для работы с внешнем хранилищем.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetCandleStorage``2(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.BusinessEntities.Security,``1,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище свечек.</summary>
      <typeparam name="TCandle">Тип свечи.</typeparam>
      <typeparam name="TArg">Тип параметра свечи.</typeparam>
      <param name="storageRegistry">Внешнее хранилище.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр свечи.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetCandleStorage(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище свечек.</summary>
      <param name="storageRegistry">Внешнее хранилище.</param>
      <param name="series">Серия свечек.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.Load``1(StockSharp.Algo.Storages.IMarketDataStorage{``0},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Создать итерационный загрузчик маркет-данных для диапазона времени.</summary>
      <typeparam name="TData">Типы данных.</typeparam>
      <param name="storage">Хранилище маркет-данных.</param>
      <param name="from">Время начала, с которого необходимо загружать данные. Если значение не указано, то будут загружены данные с начальной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate(StockSharp.Algo.Storages.IMarketDataStorage)" />.</param>
      <param name="to">Время окончания, до которого включительно необходимо загружать данные. Если значение не указано, то будут загружены данные до конечной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetToDate(StockSharp.Algo.Storages.IMarketDataStorage)" /> включительно.</param>
      <returns>Итерационный загрузчик маркет-данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.Delete(StockSharp.Algo.Storages.IMarketDataStorage,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Удалить маркет-данные из хранилища для заданного периода.</summary>
      <param name="storage">Хранилище маркет-данных.</param>
      <param name="from">Время начала, с которого необходимо удалять данные. Если значение не указано, то будут удалены данные с начальной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate(StockSharp.Algo.Storages.IMarketDataStorage)" />.</param>
      <param name="to">Время окончания, до которого включительно необходимо удалять данные. Если значение не указано, то будут удалены данные до конечной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetToDate(StockSharp.Algo.Storages.IMarketDataStorage)" /> включительно.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate(StockSharp.Algo.Storages.IMarketDataStorage)">
      <summary>Получить начальную дату, с которой храняться маркет-данные в хранилище.</summary>
      <param name="storage">Хранилище маркет-данных.</param>
      <returns>Начальная дата. Если значение не инициализировано, значит хранилище пустое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetToDate(StockSharp.Algo.Storages.IMarketDataStorage)">
      <summary>Получить конечную дату, по которую храняться маркет-данные в хранилище.</summary>
      <param name="storage">Хранилище маркет-данных.</param>
      <returns>Конечная дата. Если значение не инициализировано, значит хранилище пустое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetDates(StockSharp.Algo.Storages.IMarketDataStorage,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Получить все даты, для которых записаны маркет-данные за указанный диапазон.</summary>
      <param name="storage">Хранилище маркет-данных.</param>
      <param name="from">Время начала диапазона. Если значение не указано, то будут загружены данные с начальной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate(StockSharp.Algo.Storages.IMarketDataStorage)" />.</param>
      <param name="to">Время окончания диапазона. Если значение не указано, то будут загружены данные до конечной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetToDate(StockSharp.Algo.Storages.IMarketDataStorage)" /> включительно.</param>
      <returns>Все доступные даты внутри диапазона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.ToCandleArg(System.Type,System.String)">
      <summary>Сконвертировать строковое представление аргумента свечи в типизированное.</summary>
      <param name="type">Тип сообщения свечи.</param>
      <param name="str">Строковое представление аргумента.</param>
      <returns>Аргумент.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.ReadBySecurityId(StockSharp.Algo.Storages.IStorageEntityList{StockSharp.BusinessEntities.Security},StockSharp.Messages.SecurityId)">
      <summary>Загрузить инструмент по идентификатору.</summary>
      <param name="securities">Хранилище коллекции инструментов.</param>
      <param name="securityId">Идентификатор.</param>
      <returns>Инструмент.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.StorageRegistry">
      <summary>Хранилище маркет-данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.StorageRegistry" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive">
      <summary>Хранилище, которое используется по-умолчанию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
      <summary>Добавить хранилище тиковых сделок.</summary>
      <param name="storage">Хранилище тиковых сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.MarketDepth})">
      <summary>Добавить хранилище стаканов.</summary>
      <param name="storage">Хранилище стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>Зарегистрировать хранилище лога заявок.</summary>
      <param name="storage">Хранилище лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Candles.Candle})">
      <summary>Добавить хранилище свечек.</summary>
      <param name="storage">Хранилище свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.ExecutionMessage})">
      <summary>Зарегистрировать хранилище тиковых сделок.</summary>
      <param name="storage">Хранилище тиковых сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Зарегистрировать хранилище стаканов.</summary>
      <param name="storage">Хранилище стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.ExecutionMessage})">
      <summary>Зарегистрировать хранилище лога заявок.</summary>
      <param name="storage">Хранилище лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterLevel1Storage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Зарегистрировать хранилище изменений инструмента.</summary>
      <param name="storage">Хранилище изменений инструмента.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.CandleMessage})">
      <summary>Зарегистрировать хранилище свечек.</summary>
      <param name="storage">Хранилище свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище тиковых сделок для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище стаканов для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetOrderLogStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище лога заявок для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetCandleStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище свечек для заданного инструмента.</summary>
      <param name="candleType">Тип свечи.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр свечи.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetTickMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище тиковых сделок для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetQuoteMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище стаканов для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetOrderLogMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище лога заявок для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetTransactionStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище транзакций для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище транзакций.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetLevel1MessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище изменений инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище изменений инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetCandleMessageStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище свечек для заданного инструмента.</summary>
      <param name="candleMessageType">Тип сообщения свечи.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр свечи.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetExecutionMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Messages.ExecutionTypes,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище <see cref="T:StockSharp.Messages.ExecutionMessage" /> для переданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="type">Тип данных, информация о которых содержится <see cref="T:StockSharp.Messages.ExecutionMessage" />.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище <see cref="T:StockSharp.Messages.ExecutionMessage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище маркет-данных.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="dataType">Тип рыночных данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="drive">Хранилище.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище маркет-данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetNewsStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище новостей.</summary>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище новостей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetNewsMessageStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище новостей.</summary>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище новостей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetSecurityStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище инструментов.</summary>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище инструментов.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.TradeList">
      <summary>Класс для представления в виде списка тиковых сделок, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradeList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.TradeList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.IStorageRegistry">
      <summary>Интерфейс, описывающий хранилище маркет-данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive">
      <summary>Хранилище, которое используется по-умолчанию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetNewsStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище новостей.</summary>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище новостей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetNewsMessageStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище новостей.</summary>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище новостей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище тиковых сделок для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище стаканов для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetOrderLogStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище лога заявок для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetCandleStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище свечек для заданного инструмента.</summary>
      <param name="candleType">Тип свечи.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр свечи.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetTickMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище тиковых сделок для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetQuoteMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище стаканов для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetOrderLogMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище лога заявок для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetLevel1MessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище level1 данных.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище level1 данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetCandleMessageStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище свечек для заданного инструмента.</summary>
      <param name="candleType">Тип свечи.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Параметр свечи.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetExecutionMessageStorage(StockSharp.BusinessEntities.Security,StockSharp.Messages.ExecutionTypes,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище <see cref="T:StockSharp.Messages.ExecutionMessage" /> для переданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="type">Тип данных, информация о которых содержится <see cref="T:StockSharp.Messages.ExecutionMessage" />.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище <see cref="T:StockSharp.Messages.ExecutionMessage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetTransactionStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище транзакций для заданного инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище транзакций.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище маркет-данных.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="dataType">Тип рыночных данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище маркет-данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetSecurityStorage(StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)">
      <summary>Получить хранилище инструментов.</summary>
      <param name="drive">Хранилище. Если значение равно <see langword="null" />, то будет использоваться <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</param>
      <param name="format">Тип формата. По-умолчанию передается <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</param>
      <returns>Хранилище инструментов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
      <summary>Зарегистрировать хранилище тиковых сделок.</summary>
      <param name="storage">Хранилище тиковых сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.MarketDepth})">
      <summary>Зарегистрировать хранилище стаканов.</summary>
      <param name="storage">Хранилище стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>Зарегистрировать хранилище лога заявок.</summary>
      <param name="storage">Хранилище лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Candles.Candle})">
      <summary>Зарегистрировать хранилище свечек.</summary>
      <param name="storage">Хранилище свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.ExecutionMessage})">
      <summary>Зарегистрировать хранилище тиковых сделок.</summary>
      <param name="storage">Хранилище тиковых сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.QuoteChangeMessage})">
      <summary>Зарегистрировать хранилище стаканов.</summary>
      <param name="storage">Хранилище стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.ExecutionMessage})">
      <summary>Зарегистрировать хранилище лога заявок.</summary>
      <param name="storage">Хранилище лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterLevel1Storage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Зарегистрировать хранилище level1 данных.</summary>
      <param name="storage">Хранилище level1 данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Messages.CandleMessage})">
      <summary>Зарегистрировать хранилище свечек.</summary>
      <param name="storage">Хранилище свечек.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.IStorageEntityList`1">
      <summary>Интерфейс для представления в виде списка торговых объектов, полученных из внешнего хранилища.</summary>
      <typeparam name="T">Тип торгового объекта (например, <see cref="T:StockSharp.BusinessEntities.Security" /> или <see cref="T:StockSharp.BusinessEntities.MyTrade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.ReadById(System.Object)">
      <summary>Загрузить торговый объект по идентификатору.</summary>
      <param name="id">Идентификатор.</param>
      <returns>Торговый объект. Если по идентификатору объект не был найден, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.Save(`0)">
      <summary>Сохранить торговый объект.</summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.IStorageEntityList`1.DelayAction">
      <summary>Отложенное действие.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.ReadLasts(System.Int32)">
      <summary>Загрузить последние созданные данные.</summary>
      <param name="count">Количество запрашиваемых данных.</param>
      <returns>Диапазон данных.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.BaseStorageEntityList`1">
      <summary>Базовый класс для представления в виде списка торговых объектов, хранящихся в базе данных.</summary>
      <typeparam name="T">Тип торгового объекта (например, <see cref="T:StockSharp.BusinessEntities.Security" /> или <see cref="T:StockSharp.BusinessEntities.MyTrade" />).</typeparam>
    </member>
    <member name="P:StockSharp.Algo.Storages.BaseStorageEntityList`1.SyncRoot">
      <summary>Объект синхронизации.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.BaseStorageEntityList`1.TimeField">
      <summary>Поле, обозначающее время.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.#ctor(Ecng.Serialization.IStorage)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Storages.BaseStorageEntityList`1" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.Add(`0)">
      <summary>Добавить торговый объект в коллекцию.</summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.Remove(`0)">
      <summary>Удалить торговый объект из коллекции.</summary>
      <param name="entity">Торговый объект.</param>
      <returns>
        <see langword="true" />, если элемент был удален. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.Save(`0)">
      <summary>Сохранить торговый объект.</summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.ReadLasts(System.Int32)">
      <summary>Загрузить последние созданные данные.</summary>
      <param name="count">Количество запрашиваемых данных.</param>
      <returns>Диапазон данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnAdd(`0)">
      <summary>Вызывается при добавлении элемента в хранилище.</summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnClear">
      <summary>Вызывается при удалении всех элементов в хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnGetCount">
      <summary>Вызывается при получении количества элементов в хранилище.</summary>
      <returns>Количество элементов в хранилище.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnGetGroup(System.Int64,System.Int64,Ecng.Serialization.Field,System.ComponentModel.ListSortDirection)">
      <summary>Вызывается при выборке элементов из хранилища.</summary>
      <param name="startIndex">Индекс первого элемента.</param>
      <param name="count">Число элементов.</param>
      <param name="orderBy">Условие сортировки.</param>
      <param name="direction">Направление сортировки.</param>
      <returns>Набор элементов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnRemove(`0)">
      <summary>Вызывается при удалении элемента из хранилища.</summary>
      <param name="entity">Элемент.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.OnUpdate(`0)">
      <summary>Вызывается при обновлении элемента в хранилище.</summary>
      <param name="entity">Элемент.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавить элементы.</summary>
      <param name="items">Новые элементы.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удалить элементы.</summary>
      <param name="items">Элементы, которые необходимо удалить.</param>
      <returns>Удаленные элементы.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Удалить элементы.</summary>
      <param name="index">Индекс, начиная с которого необходимо удалить элементы.</param>
      <param name="count">Количество удаляемых элементов.</param>
      <returns>Количество удаленных элементов.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.OrderFailList">
      <summary>Класс для представления в виде списка заявок с ошибками, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.OrderFailList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.OrderFailList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.IBasketMarketDataStorageEnumerator`1">
      <summary>Перечислитель агрегатора.</summary>
      <typeparam name="T">Тип сообщения.</typeparam>
    </member>
    <member name="P:StockSharp.Algo.Storages.IBasketMarketDataStorageEnumerator`1.DataTypes">
      <summary>Доступные тип сообщений.</summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.BasketMarketDataStorage`1">
      <summary>Хранилище-агрегатор, позволяющее загружать данные одновременно из нескольких хранилищ маркет-данных.</summary>
      <typeparam name="T">Тип сообщения.</typeparam>
    </member>
    <member name="P:StockSharp.Algo.Storages.BasketMarketDataStorage`1.BasketMarketDataStorageEnumerator.Current">
      <summary>Текущее сообщение.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.BasketMarketDataStorage`1.BasketMarketDataStorageEnumerator.DataTypes">
      <summary>Доступные типы данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.BasketMarketDataStorage`1.InnerStorages">
      <summary>Вложенные хранилища маркет-данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BasketMarketDataStorage`1.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.BasketMarketDataStorage`1" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BasketMarketDataStorage`1.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BasketMarketDataStorage`1.Load(System.DateTime)">
      <summary>Загрузить сообщения из вложенных хранилищ за указанную дату.</summary>
      <param name="date">Дата.</param>
      <returns>Загрузчик сообщений.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.MyTradeList">
      <summary>Класс для представления в виде списка собственных сделок, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.MyTradeList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.MyTradeList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.MyTradeList.GetOverridedAddSource(StockSharp.BusinessEntities.MyTrade)">
      <summary>Получить данных из сущности для создания.</summary>
      <param name="entity">Сущность.</param>
      <returns>Данные для создания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.MyTradeList.GetOverridedRemoveSource(StockSharp.BusinessEntities.MyTrade)">
      <summary>Получить данных из сущности для удаления.</summary>
      <param name="entity">Сущность.</param>
      <returns>Данные для удаления.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.MyTradeList.ReadByOrderAndTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>Загрузить собственную сделку.</summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Своя сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.MyTradeList.Save(StockSharp.BusinessEntities.MyTrade)">
      <summary>Сохранить торговый объект.</summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.OrderList">
      <summary>Класс для представления в виде списка заявок, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.OrderList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.OrderList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.PortfolioList">
      <summary>Класс для представления в виде списка портфелей, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.PortfolioList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.PortfolioList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.PositionList">
      <summary>Класс для представления в виде списка позиций, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.PositionList.#ctor(Ecng.Serialization.IStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.PositionList" />.</summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.PositionList.GetOverridedAddSource(StockSharp.BusinessEntities.Position)">
      <summary>Получить данных из сущности для создания.</summary>
      <param name="entity">Сущность.</param>
      <returns>Данные для создания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.PositionList.GetOverridedRemoveSource(StockSharp.BusinessEntities.Position)">
      <summary>Получить данных из сущности для удаления.</summary>
      <param name="entity">Сущность.</param>
      <returns>Данные для удаления.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.PositionList.ReadBySecurityAndPortfolio(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Portfolio)">
      <summary>Загрузить позицию.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="portfolio">Портфель.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.PositionList.Save(StockSharp.BusinessEntities.Position)">
      <summary>Сохранить торговый объект.</summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.SecurityList">
      <summary>Класс для представления в виде списка инструментов, хранящихся во внешнем хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.#ctor(StockSharp.Algo.Storages.IEntityRegistry)">
      <summary>Создать <see cref="T:StockSharp.Algo.Storages.SecurityList" />.</summary>
      <param name="registry">Хранилище торговых объектов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.Lookup(StockSharp.BusinessEntities.Security)">
      <summary>Найти инструменты, соответствующие фильтру <paramref name="criteria" />.</summary>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Найденные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.Save(StockSharp.BusinessEntities.Security)">
      <summary>Сохранить торговый объект.</summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.GetSecurityIds">
      <summary>Получить идентификаторы сохраненных инструментов.</summary>
      <returns>Идентификаторы инструментов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.OnAdd(StockSharp.BusinessEntities.Security)">
      <summary>Вызывается при добавлении элемента в хранилище.</summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.Delete(StockSharp.BusinessEntities.Security)">
      <summary>Удалить инструмент.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.DeleteBy(StockSharp.BusinessEntities.Security)">
      <summary>Удалить инструменты по критерию.</summary>
      <param name="criteria">Критерий.</param>
    </member>
    <member name="T:StockSharp.Algo.OfflineMessageAdapter">
      <summary>Адаптер сообщений, хранящий входящие сообщения до тех пор, пока не будет установлено соединение.</summary>
    </member>
    <member name="M:StockSharp.Algo.OfflineMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.OfflineMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер.</param>
    </member>
    <member name="P:StockSharp.Algo.OfflineMessageAdapter.MaxMessageCount">
      <summary>Максимальный размер очереди сообщений. Значение по умолчанию равно 10000.</summary>
      <remarks>Значение -1 означает отсутствие ограничений.</remarks>
    </member>
    <member name="M:StockSharp.Algo.OfflineMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.OfflineMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.OfflineMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.OfflineMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.PnL.PnLMessageAdapter">
      <summary>Адаптер сообщений, рассчитывающий прибыль-убыток.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.PnL.PnLMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLMessageAdapter.PnLManager">
      <summary>Менеджер прибыли-убытка.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.PnL.PnLMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="P:StockSharp.Algo.PnL.PortfolioPnLManager.PnL">
      <summary>Суммарное значение прибыли-убытка.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PortfolioPnLManager.RealizedPnL">
      <summary>Относительное значение прибыли-убытка без учета открытой позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PortfolioPnLManager.Reset">
      <summary>Обнулить <see cref="P:StockSharp.Algo.PnL.PortfolioPnLManager.PnL" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PortfolioPnLManager.ProcessMyTrade(StockSharp.Messages.ExecutionMessage,StockSharp.Algo.PnL.PnLInfo@)">
      <summary>Рассчитать прибыльность сделки. Если сделка уже ранее была обработана, то возвращается предыдущая информация.</summary>
      <param name="trade">Сделка.</param>
      <param name="info">Информация о новой сделке.</param>
      <returns>
        <see langword="true" />, если получена новая сделка, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.PnL.PortfolioPnLManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать сообщение, содержащее рыночные данные.</summary>
      <param name="message">Сообщение, содержащее рыночные данные.</param>
    </member>
    <member name="T:StockSharp.Algo.PnL.PnLInfo">
      <summary>Информация о сделке, закрытый ее объем и ее прибыльность.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLInfo.#ctor(StockSharp.Messages.ExecutionMessage,System.Decimal,System.Decimal)">
      <summary>Создать <see cref="T:StockSharp.Algo.PnL.PnLInfo" />.</summary>
      <param name="trade">Своя сделка.</param>
      <param name="closedVolume">Объем позиции, который был закрыт собственной сделкой.</param>
      <param name="pnL">Реализованная данной сделкой прибыль.</param>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLInfo.Trade">
      <summary>Своя сделка.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLInfo.ClosedVolume">
      <summary>Объем позиции, который был закрыт собственной сделкой.</summary>
      <remarks>Например, в стратегии позиция была 2, Сделка на -5 контрактов. Закрытая позиция 2.</remarks>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLInfo.PnL">
      <summary>Реализованная данной сделкой прибыль.</summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.PnLQueue">
      <summary>Очередь расчета прибыли по потоку сообщений.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLQueue.#ctor(StockSharp.Messages.SecurityId)">
      <summary>Создать <see cref="T:StockSharp.Algo.PnL.PnLQueue" />.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.PriceStep">
      <summary>Шаг цены инструмента.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.StepPrice">
      <summary>Стоимость шага.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.Leverage">
      <summary>Плечо.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.LotMultiplier">
      <summary>Коэфициент объема между лотом и активом.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.TradePrice">
      <summary>Последняя цена тиковой сделки.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.BidPrice">
      <summary>Последняя цена спроса.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.AskPrice">
      <summary>Последняя цена предложения.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.UnrealizedPnL">
      <summary>Нереализованная прибыль.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLQueue.RealizedPnL">
      <summary>Реализованная прибыль.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLQueue.Process(StockSharp.Messages.ExecutionMessage)">
      <summary>Рассчитать прибыльность сделки. Если сделка уже ранее была обработана, то возвращается предыдущая информация.</summary>
      <param name="trade">Сделка.</param>
      <returns>Информация о новой сделке.</returns>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLQueue.ProcessLevel1(StockSharp.Messages.Level1ChangeMessage)">
      <summary>Обработать сообщение, содержащее рыночные данные.</summary>
      <param name="levelMsg">Сообщение, содержащее рыночные данные.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLQueue.ProcessExecution(StockSharp.Messages.ExecutionMessage)">
      <summary>Обработать сообщение, содержащее информацию о тиковой сделке.</summary>
      <param name="execMsg">Сообщение, содержащее информацию о тиковой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLQueue.ProcessQuotes(StockSharp.Messages.QuoteChangeMessage)">
      <summary>Обработать сообщение, содержащее данные о стакане.</summary>
      <param name="quoteMsg">Сообщение, содержащее данные о стакане.</param>
    </member>
    <member name="T:StockSharp.Algo.PnL.PnLManager">
      <summary>Менеджер прибыли-убытка.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLManager.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.PnL.PnLManager" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLManager.PnL">
      <summary>Суммарное значение прибыли-убытка.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLManager.RealizedPnL">
      <summary>Относительное значение прибыли-убытка без учета открытой позиции.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLManager.UnrealizedPnL">
      <summary>Значение нереализованной прибыли-убытка.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLManager.Reset">
      <summary>Обнулить <see cref="P:StockSharp.Algo.PnL.PnLManager.PnL" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать сообщение, содержащее маркет-данные или сделку. Если сделка была ранее обработана, будет возвращена предыдущая информация.</summary>
      <param name="message">Сообщение, содержащее маркет-данные или сделку.</param>
      <returns>Информация о новой сделке.</returns>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLManager.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLManager.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.PnL.IPnLManager">
      <summary>Интерфейс менеджера расчета прибыли-убытка.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.IPnLManager.PnL">
      <summary>Суммарное значение прибыли-убытка.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.IPnLManager.RealizedPnL">
      <summary>Значение реализованной прибыли-убытка.</summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.IPnLManager.UnrealizedPnL">
      <summary>Значение нереализованной прибыли-убытка.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.IPnLManager.Reset">
      <summary>Обнулить <see cref="P:StockSharp.Algo.PnL.IPnLManager.PnL" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.IPnLManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать сообщение, содержащее маркет-данные или сделку. Если сделка была ранее обработана, будет возвращена предыдущая информация.</summary>
      <param name="message">Сообщение, содержащее маркет-данные или сделку.</param>
      <returns>Информация о новой сделке.</returns>
    </member>
    <member name="T:StockSharp.Algo.Positions.PositionMessageAdapter">
      <summary>Адаптер сообщений, рассчитывающий позицию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.Positions.PositionMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
    </member>
    <member name="P:StockSharp.Algo.Positions.PositionMessageAdapter.PositionManager">
      <summary>Менеджер позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Positions.PositionMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Positions.PositionManager">
      <summary>Менеджер расчета позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionManager.#ctor(System.Boolean)">
      <summary>Создать <see cref="T:StockSharp.Algo.Positions.PositionManager" />.</summary>
      <param name="byOrders">Расчитывать позицию по реализованному объему у заявок (<see langword="true" />) или по сделкам (<see langword="false" />).</param>
    </member>
    <member name="P:StockSharp.Algo.Positions.PositionManager.ByOrders">
      <summary>Расчитывать позицию по реализованному объему у заявок (<see langword="true" />) или по сделкам (<see langword="false" />).</summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.PositionManager.Position">
      <summary>Суммарное значение позиции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.PositionManager.Positions">
      <summary>Позиции, сгруппированные по инструментам и портфелям.</summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.PositionManager.NewPosition">
      <summary>Событие появления новой позиций в <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.PositionManager.PositionChanged">
      <summary>Событие изменения позиции в <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionManager.Reset">
      <summary>Обнулить позицию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Рассчитать позицию.</summary>
      <param name="message">Сообщение.</param>
      <returns>Позиция по заявке или сделке.</returns>
    </member>
    <member name="T:StockSharp.Algo.Positions.IPositionManager">
      <summary>Интерфейс для менеджера расчета позиции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.IPositionManager.Position">
      <summary>Суммарное значение позиции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.IPositionManager.Positions">
      <summary>Позиции, сгруппированные по инструментам и портфелям.</summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.IPositionManager.NewPosition">
      <summary>Событие появления новой позиций в <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.IPositionManager.PositionChanged">
      <summary>Событие изменения позиции в <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.IPositionManager.Reset">
      <summary>Обнулить позицию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.IPositionManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Рассчитать позицию.</summary>
      <param name="message">Сообщение.</param>
      <returns>Позиция по заявке или сделке.</returns>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskMessageAdapter">
      <summary>Адаптер сообщений, контролирующий риск-правила.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.Risk.RiskMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskMessageAdapter.RiskManager">
      <summary>Риск менеджер.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Risk.RiskMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Risk.IRiskManager">
      <summary>Интерфейс, описывающий менеджера контроля рисков.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.IRiskManager.Rules">
      <summary>Список правил.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.IRiskManager.ProcessRules(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>Список правил, которые были активированы сообщением.</returns>
    </member>
    <member name="T:StockSharp.Algo.Risk.IRiskRule">
      <summary>Интерфейс, описывающий риск-правило.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.IRiskRule.Title">
      <summary>Заголовок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.IRiskRule.Action">
      <summary>Действие.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.IRiskRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.IRiskRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskActions">
      <summary>Типы действий.</summary>
    </member>
    <member name="F:StockSharp.Algo.Risk.RiskActions.ClosePositions">
      <summary>Закрыть позиции.</summary>
    </member>
    <member name="F:StockSharp.Algo.Risk.RiskActions.StopTrading">
      <summary>Остановить торговлю.</summary>
    </member>
    <member name="F:StockSharp.Algo.Risk.RiskActions.CancelOrders">
      <summary>Отменить заявки.</summary>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskManager">
      <summary>Менеджер контроля рисков.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskManager.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Risk.RiskManager" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskManager.Rules">
      <summary>Список правил.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskManager.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskManager.ProcessRules(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>Список правил, которые были активированы сообщением.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskManager.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskManager.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskRule">
      <summary>Базовое риск-правило.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskRule.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Risk.RiskRule" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskRule.Title">
      <summary>Заголовок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskRule.Action">
      <summary>Действие, которое необходимо совершить в случае активации правило.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskPnLRule">
      <summary>Риск-правило, отслеживающее прибыль-убыток.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskPnLRule.PnL">
      <summary>Прибыль-убыток.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPnLRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPnLRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPnLRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskPositionSizeRule">
      <summary>Риск-правило, отслеживающее размер позиции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskPositionSizeRule.Position">
      <summary>Размер позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPositionSizeRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPositionSizeRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPositionSizeRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskPositionTimeRule">
      <summary>Риск-правило, отслеживающее время жизни позиции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskPositionTimeRule.Time">
      <summary>Время жизни позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPositionTimeRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPositionTimeRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPositionTimeRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskPositionTimeRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskCommissionRule">
      <summary>Риск-правило, отслеживающее размер комиссии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskCommissionRule.Commission">
      <summary>Размер комиссии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskCommissionRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskCommissionRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskCommissionRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskSlippageRule">
      <summary>Риск-правило, отслеживающее размер проскальзывания.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskSlippageRule.Slippage">
      <summary>Размер проскальзывания.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskSlippageRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskSlippageRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskSlippageRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskOrderPriceRule">
      <summary>Риск-правило, отслеживающее цену заявки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskOrderPriceRule.Price">
      <summary>Цена заявки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderPriceRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderPriceRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderPriceRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskOrderVolumeRule">
      <summary>Риск-правило, отслеживающее объем заявки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskOrderVolumeRule.Volume">
      <summary>Объем заявки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderVolumeRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderVolumeRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderVolumeRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskOrderFreqRule">
      <summary>Риск-правило, отслеживающее частоту выставления заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskOrderFreqRule.Count">
      <summary>Количество заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskOrderFreqRule.Interval">
      <summary>Интервал, в пределах которого будет отслеживать количество заявок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderFreqRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderFreqRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderFreqRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskOrderFreqRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskTradePriceRule">
      <summary>Риск-правило, отслеживающее цену сделки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskTradePriceRule.Price">
      <summary>Цена сделки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradePriceRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradePriceRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradePriceRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskTradeVolumeRule">
      <summary>Риск-правило, отслеживающее объем сделки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskTradeVolumeRule.Volume">
      <summary>Объем сделки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradeVolumeRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradeVolumeRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradeVolumeRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Risk.RiskTradeFreqRule">
      <summary>Риск-правило, отслеживающее частоту совершения сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskTradeFreqRule.Count">
      <summary>Количество сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Risk.RiskTradeFreqRule.Interval">
      <summary>Интервал, в пределах которого будет отслеживать количество сделок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradeFreqRule.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradeFreqRule.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать торговое сообщение.</summary>
      <param name="message">Торговое сообщение.</param>
      <returns>
        <see langword="true" />, если правило активировалось, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradeFreqRule.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Risk.RiskTradeFreqRule.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.SecurityNativeIdMessageAdapter">
      <summary>Адаптер сообщений, использующих системных идентификатор инструментов.</summary>
    </member>
    <member name="P:StockSharp.Algo.SecurityNativeIdMessageAdapter.Storage">
      <summary>Хранилище системных идентификатор инструментов.</summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.SecurityNativeIdMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
    </member>
    <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Algo.Storages.INativeIdStorage)">
      <summary>Создать <see cref="T:StockSharp.Algo.SecurityNativeIdMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
      <param name="storage">Хранилище системных идентификатор инструментов.</param>
    </member>
    <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.SecurityNativeIdMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.SecurityNativeIdMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.SecurityRemoveMessage">
      <summary>Сообщение об удалении инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityRemoveMessage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.SecurityRemoveMessage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.SecurityRemoveMessage.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="T:StockSharp.Algo.SecurityTrie">
      <summary>Дерево поиска инструментов.</summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.SecurityTrie" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.SecurityTrie.Count">
      <summary>Получить количество инструментов, хранящееся в <see cref="T:StockSharp.Algo.SecurityTrie" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.SecurityTrie.IsReadOnly">
      <summary>Является ли значение <see cref="T:System.Collections.Generic.ICollection`1" /> только на чтение.</summary>
      <returns>
        <see langword="true" /> если значение <see cref="T:System.Collections.Generic.ICollection`1" /> только на чтение; иначе <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.Add(StockSharp.BusinessEntities.Security)">
      <summary>Новый инструмент была добавлен.</summary>
      <param name="security">Новые инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.Retrieve(System.String)">
      <summary>Найти все инструменты по фильтру.</summary>
      <param name="filter">Фильтр.</param>
      <returns>Найденные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.CopyTo(StockSharp.BusinessEntities.Security[],System.Int32)">
      <summary>Скопировать элементы <see cref="T:System.Collections.Generic.ICollection`1" /> в <see cref="T:System.Array" />, начиная с индекса <see cref="T:System.Array" />.</summary>
      <param name="array">Целевой массив.</param>
      <param name="arrayIndex">Начальный индекс.</param>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.Remove(StockSharp.BusinessEntities.Security)">
      <summary>Удалить инструмент.</summary>
      <param name="security">Инструмент.</param>
      <returns>
        <see langword="true" /> если <paramref name="security" /> был успешно удалено из <see cref="T:StockSharp.Algo.SecurityTrie" />; иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.RemoveRange(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Удалить инструменты.</summary>
      <param name="securities">Инструменты.</param>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.Clear">
      <summary>Удалить все инструменты.</summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.Contains(StockSharp.BusinessEntities.Security)">
      <summary>Определить, содержится ли в <see cref="T:System.Collections.Generic.ICollection`1" /> значение.</summary>
      <returns>
        <see langword="true" /> если <paramref name="item" /> содержится в <see cref="T:System.Collections.Generic.ICollection`1" />; иначе, <see langword="false" />.</returns>
      <param name="item">Значение, которое необходимо найти в <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.GetEnumerator">
      <summary>Вернуть перечислитель.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> перечислитель.</returns>
    </member>
    <member name="M:StockSharp.Algo.SecurityTrie.System#Collections#IEnumerable#GetEnumerator">
      <summary>Вернуть перечислитель.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> перечислитель.</returns>
    </member>
    <member name="T:StockSharp.Algo.Slippage.SlippageMessageAdapter">
      <summary>Адаптер сообщений, рассчитывающий проскальзывание.</summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.Slippage.SlippageMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
    </member>
    <member name="P:StockSharp.Algo.Slippage.SlippageMessageAdapter.SlippageManager">
      <summary>Менеджер проскальзывания.</summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Slippage.SlippageMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Slippage.ISlippageManager">
      <summary>Интерфейс для менеджера расчета проскальзывания.</summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage">
      <summary>Суммарное значение проскальзывания.</summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.Reset">
      <summary>Сбросить состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Рассчитать проскальзывание.</summary>
      <param name="message">Сообщение.</param>
      <returns>Проскальзывание. Если проскальзывание рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Slippage.SlippageManager">
      <summary>Менеджер проскальзывания.</summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Slippage.SlippageManager" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.SlippageManager.Slippage">
      <summary>Суммарное значение проскальзывания.</summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.SlippageManager.CalculateNegative">
      <summary>Считать отрицательное проскальзывание. По-умолчанию расчет выключен.</summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.Reset">
      <summary>Обнулить <see cref="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Рассчитать проскальзывание.</summary>
      <param name="message">Сообщение.</param>
      <returns>Проскальзывание. Если проскальзывание рассчитать невозможно, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.IInnerAdapterList">
      <summary>Интерфейс, описывающий список адаптеров к торговым системам, с которыми оперирует агрегатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.IInnerAdapterList.SortedAdapters">
      <summary>Внутренние адаптеры, отсортированные по скорости работы.</summary>
    </member>
    <member name="P:StockSharp.Algo.IInnerAdapterList.Item(StockSharp.Messages.IMessageAdapter)">
      <summary>Индексатор, через который задаются приоритеты скорости (чем меньше значение, те быстрее адаптер) на внутренние адаптеры.</summary>
      <param name="adapter">Внутренний адаптер.</param>
      <returns>Приоритет адаптера. Если задается значение -1, то адаптер считается выключенным.</returns>
    </member>
    <member name="T:StockSharp.Algo.BasketMessageAdapter">
      <summary>Адаптер-агрегатор, позволяющий оперировать одновременно несколькими адаптерами, подключенных к разным торговым системам.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.InnerAdapters">
      <summary>Адаптеры, с которыми оперирует агрегатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.Portfolios">
      <summary>Портфели, которые используются для отправки транзакций.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.NativeIdStorage">
      <summary>Хранилище системных идентификатор инструментов.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.ExtendedInfoStorage">
      <summary>Хранилище расширенной информации <see cref="P:StockSharp.Messages.Message.ExtensionInfo" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.#ctor(Ecng.Common.IdGenerator)">
      <summary>Создать <see cref="T:StockSharp.Algo.BasketMessageAdapter" />.</summary>
      <param name="transactionIdGenerator">Генератор транзакций.</param>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.SupportedMessages">
      <summary>Поддерживаемые типы сообщений, который может обработать адаптер.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.PortfolioLookupRequired">
      <summary>Требуется ли дополнительное сообщение <see cref="T:StockSharp.Messages.PortfolioLookupMessage" /> для получения списка портфелей и позиций.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.OrderStatusRequired">
      <summary>Требуется ли дополнительное сообщение <see cref="T:StockSharp.Messages.OrderStatusMessage" /> для получения списка заявок и собственных сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.SecurityLookupRequired">
      <summary>Требуется ли дополнительное сообщение <see cref="T:StockSharp.Messages.SecurityLookupMessage" /> для получения списка инструментов.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.IsSupportNativePortfolioLookup">
      <summary>Поддерживается ли торговой системой поиск портфелей.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.IsSupportNativeSecurityLookup">
      <summary>Поддерживается ли торговой системой поиск инструментов.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketMessageAdapter.IsRestorSubscriptioneOnReconnect">
      <summary>Восстановить подписку при переподключении.</summary>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.CreateOrderCondition">
      <summary>Создать для заявки типа <see cref="F:StockSharp.Messages.OrderTypes.Conditional" /> условие, которое поддерживается подключением.</summary>
      <returns>Условие для заявки. Если подключение не поддерживает заявки типа <see cref="F:StockSharp.Messages.OrderTypes.Conditional" />, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.IsConnectionAlive">
      <summary>Проверить, установлено ли еще соединение. Проверяется только в том случае, если было успешно установлено подключение.</summary>
      <returns>
        <see langword="true" />, если соединение еще установлено, <see langword="false" />, если торговая система разорвала подключение.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.Message)">
      <summary>Обработчик события <see cref="E:StockSharp.Messages.IMessageChannel.NewOutMessage" /> вложенного адаптера.</summary>
      <param name="innerAdapter">Вложенный адаптер.</param>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.GetSortedAdapters">
      <summary>Получить адаптеры <see cref="P:StockSharp.Algo.IInnerAdapterList.SortedAdapters" />, отсортированные в зависимости от заданного приоритета. По-умолчанию сортировка отсутствует.</summary>
      <returns>Отсортированные адаптеры.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketMessageAdapter.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.BasketPortfolio">
      <summary>Корзина портфелей.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketPortfolio.InnerPortfolios">
      <summary>Портфели, из которых создана данная корзина.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketPortfolio.InnerPositions">
      <summary>Позиции, из которых создана данная корзина.</summary>
    </member>
    <member name="T:StockSharp.Algo.WeightedPortfolio">
      <summary>Корзина портфелей, основанная на весах <see cref="P:StockSharp.Algo.WeightedPortfolio.Weights" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.WeightedPortfolio.#ctor(StockSharp.BusinessEntities.IConnector)">
      <summary>Создать <see cref="T:StockSharp.Algo.WeightedPortfolio" />.</summary>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
    </member>
    <member name="P:StockSharp.Algo.WeightedPortfolio.Weights">
      <summary>Инструменты и их весовые коэффициенты в корзине.</summary>
    </member>
    <member name="P:StockSharp.Algo.WeightedPortfolio.InnerPortfolios">
      <summary>Портфели, из которых создана данная корзина.</summary>
    </member>
    <member name="P:StockSharp.Algo.WeightedPortfolio.InnerPositions">
      <summary>Позиции, из которых создана данная корзина.</summary>
    </member>
    <member name="T:StockSharp.Algo.BasketPosition">
      <summary>Корзина позиций, которые принадлежат <see cref="T:StockSharp.Algo.BasketPortfolio" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.BasketPosition.InnerPositions">
      <summary>Позиции, из которых создана данная корзина.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.BaseCandleSource`1">
      <summary>Базовый реализация интерфейса <see cref="T:StockSharp.Algo.Candles.ICandleSource`1" />.</summary>
      <typeparam name="TValue">Типы данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Candles.BaseCandleSource`1" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.BaseCandleSource`1.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.BaseCandleSource`1.Processing">
      <summary>Событие появления нового значения для обработки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.BaseCandleSource`1.Stopped">
      <summary>Событие окончания обработки серии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.BaseCandleSource`1.Error">
      <summary>Событие ошибки транслирования данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запросить получение данных.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.BaseCandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.RaiseProcessing(StockSharp.Algo.Candles.CandleSeries,`0)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleSource`1.Processing" />.</summary>
      <param name="series">Серия свечек.</param>
      <param name="values">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.RaiseError(System.Exception)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleSource`1.Error" />.</summary>
      <param name="error">Описание ошибки.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.RaiseStopped(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleSource`1.Stopped" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource">
      <summary>Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource.RaiseProcessing(StockSharp.Algo.Candles.CandleSeries,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue})">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleSource`1.Processing" />.</summary>
      <param name="series">Серия свечек.</param>
      <param name="values">Новые данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1">
      <summary>Построитель свечей. Подключается к событию <see cref="E:StockSharp.Algo.Candles.ICandleSource`1.Processing" /> источника <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" /> и создает свечи основываясь на получаемых данных.</summary>
      <typeparam name="TCandle">Тип свечи, которую будет формировать построитель.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />.</summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Sources">
      <summary>Источники данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Container">
      <summary>Контейнер данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.CandleManager">
      <summary>Менеджер свечек. Заполняется, если построитель является источником внутри <see cref="P:StockSharp.Algo.Candles.ICandleManager.Sources" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.StorageRegistry">
      <summary>Хранилище данных. Передается во все источники, реализующие интерфейс <see cref="T:StockSharp.Algo.Candles.IStorageCandleSource" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Processing">
      <summary>Событие появления нового значения для обработки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Stopped">
      <summary>Событие окончания обработки серии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Error">
      <summary>Событие ошибки формирования свечек.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запустить получение свечек для указанной серии.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать свечи.</param>
      <param name="from">Начальная дата, с которой необходимо получать свечи.</param>
      <param name="to">Конечная дата, до которой необходимо получать свечи.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Остановить получение свечек, запущенное через <see cref="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.OnNewValues(StockSharp.Algo.Candles.CandleSeries,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue})">
      <summary>Обработать новые данные.</summary>
      <param name="series">Серия свечек.</param>
      <param name="values">Новые данные.</param>
      <returns>Время последнего элемента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Создать новую свечу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечу.</param>
      <returns>Созданная свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Сформирована ли свеча до добавления данных.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечи.</param>
      <returns>
        <see langword="true" />, если свечу необходимо закончить. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.FirstInitCandle(StockSharp.Algo.Candles.CandleSeries,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Заполнить первоначальные параметры свечи.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные.</param>
      <returns>Свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.UpdateCandle(StockSharp.Algo.Candles.CandleSeries,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Обновить свечу данными.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.StockSharp#Algo#Candles#Compression#ICandleBuilder#ProcessValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Обработать новые данные.</summary>
      <param name="series">Серия свечек.</param>
      <param name="currentCandle">Текущая свеча.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечи.</param>
      <returns>Новая свеча. Если новую свечу нет необходимости создавать, то возвращается <paramref name="currentCandle" />. Если новую свечу создать невозможно (<paramref name="value" /> не может быть применено к свечам), то возвращается <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessValue(StockSharp.Algo.Candles.CandleSeries,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Обработать новые данные.</summary>
      <param name="series">Серия свечек.</param>
      <param name="currentCandle">Текущая свеча.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечи.</param>
      <returns>Новая свеча. Если новую свечу нет необходимости создавать, то возвращается <paramref name="currentCandle" />. Если новую свечу создать невозможно (<paramref name="value" /> не может быть применено к свечам), то возвращается <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.RaiseProcessing(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Processing" />.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.RaiseError(System.Exception)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Error" />.</summary>
      <param name="error">Информация об ошибке поиска инструментов.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ForceFinishCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>Принудительно завершить свечу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder">
      <summary>Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder" />.</summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.Timeout">
      <summary>Временной сдвиг от окончания тайм-фрейма, после которого для незакрытой свечи принудительно посылается сигнал на закрытие. По-умолчанию равно 10% от тайм-фрейма.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.GenerateEmptyCandles">
      <summary>Генерировать ли пустые свечи (<see cref="F:StockSharp.Messages.CandleStates.None" />) при отсутствии сделок. По-умолчанию режим включен.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запустить получение свечек для указанной серии.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать свечи.</param>
      <param name="from">Начальная дата, с которой необходимо получать свечи.</param>
      <param name="to">Конечная дата, до которой необходимо получать свечи.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Создать новую свечу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечу.</param>
      <returns>Созданная свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.TimeFrameCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Сформирована ли свеча до добавления данных.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечи.</param>
      <returns>
        <see langword="true" />, если свечу необходимо закончить. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder">
      <summary>Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.TickCandle" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder" />.</summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Создать новую свечу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечу.</param>
      <returns>Созданная свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.TickCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Сформирована ли свеча до добавления данных.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечи.</param>
      <returns>
        <see langword="true" />, если свечу необходимо закончить. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.UpdateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.TickCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Обновить свечу данными.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder">
      <summary>Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.VolumeCandle" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder" />.</summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Создать новую свечу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечу.</param>
      <returns>Созданная свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.VolumeCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Сформирована ли свеча до добавления данных.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечи.</param>
      <returns>
        <see langword="true" />, если свечу необходимо закончить. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.RangeCandleBuilder">
      <summary>Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.RangeCandle" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.RangeCandleBuilder" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.RangeCandleBuilder" />.</summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Создать новую свечу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечу.</param>
      <returns>Созданная свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.RangeCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Сформирована ли свеча до добавления данных.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечи.</param>
      <returns>
        <see langword="true" />, если свечу необходимо закончить. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.PnFCandleBuilder">
      <summary>Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.PnFCandle" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.PnFCandleBuilder" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.PnFCandleBuilder" />.</summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Создать новую свечу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечу.</param>
      <returns>Созданная свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Сформирована ли свеча до добавления данных.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечи.</param>
      <returns>
        <see langword="true" />, если свечу необходимо закончить. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.UpdateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Обновить свечу данными.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <param name="value">Данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder">
      <summary>Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.RenkoCandle" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder" />.</summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.ProcessValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.RenkoCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Обработать новые данные.</summary>
      <param name="series">Серия свечек.</param>
      <param name="currentCandle">Текущая свеча.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечи.</param>
      <returns>Новая свеча. Если новую свечу нет необходимости создавать, то возвращается <paramref name="currentCandle" />. Если новую свечу создать невозможно (<paramref name="value" /> не может быть применено к свечам), то возвращается <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilder">
      <summary>Интерфейс построителя свечек.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilder.CandleType">
      <summary>Тип свечи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilder.Sources">
      <summary>Источники данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilder.Container">
      <summary>Контейнер данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilder.ProcessValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Обработать новые данные.</summary>
      <param name="series">Серия свечек.</param>
      <param name="currentCandle">Текущая свеча.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечи.</param>
      <returns>Новая свеча. Если новую свечу нет необходимости создавать, то возвращается <paramref name="currentCandle" />. Если новую свечу создать невозможно (<paramref name="value" /> не может быть применено к свечам), то возвращается <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue">
      <summary>Интерфейс, описывающий данные источника <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Security">
      <summary>Инструмент, по которому были сформированы данные.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Time">
      <summary>Время появления новых данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Price">
      <summary>Цена.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Volume">
      <summary>Volume.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.OrderDirection">
      <summary>Направление заявки.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue">
      <summary>Данные источника <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" />, созданные на основе <see cref="P:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue.Trade" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue.#ctor(StockSharp.BusinessEntities.Trade)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue" />.</summary>
      <param name="trade">Тиковая сделка.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue.Trade">
      <summary>Тиковая сделка.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TickCandleBuilderSourceValue">
      <summary>Данные источника <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" />, созданные на основе <see cref="T:StockSharp.BusinessEntities.Trade" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilderSourceValue.#ctor(StockSharp.BusinessEntities.Security,StockSharp.Messages.ExecutionMessage)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilderSourceValue" />.</summary>
      <param name="security">Инструмент, по которому были сформированы данные.</param>
      <param name="tick">Тиковая сделка.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.TickCandleBuilderSourceValue.Tick">
      <summary>Тиковая сделка.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.DepthCandleBuilderSourceValue">
      <summary>Данные источника <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" />, созданные на основе <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.DepthCandleBuilderSourceValue.#ctor(StockSharp.BusinessEntities.MarketDepth)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.DepthCandleBuilderSourceValue" />.</summary>
      <param name="depth">Стакан.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.DepthCandleBuilderSourceValue.Depth">
      <summary>Стакан.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1">
      <summary>Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />, который получает данные из <see cref="T:StockSharp.BusinessEntities.IConnector" />.</summary>
      <typeparam name="T">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.#ctor(StockSharp.BusinessEntities.IConnector)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1" />.</summary>
      <param name="connector">Подключение, через которое будут получаться новые данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Connector">
      <summary>Подключение, через которое будут получаться новые данные.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запросить получение данных.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Зарегистрировать получение данных для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Остановить получение данных для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.GetSecurityValues(StockSharp.BusinessEntities.Security)">
      <summary>Получить ранее накопленные значения.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Накопленные значения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.AddNewValues(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавить синхронно новые данные, полученные от <see cref="P:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Connector" />.</summary>
      <param name="values">Новые данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource">
      <summary>Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, который создает <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" /> из тиковых сделок <see cref="T:StockSharp.BusinessEntities.Trade" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.#ctor(StockSharp.BusinessEntities.IConnector)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource" />.</summary>
      <param name="connector">Подключение, через которое будут получаться новые сделки, используя событие <see cref="E:StockSharp.BusinessEntities.IConnector.NewTrades" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Зарегистрировать получение данных для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Остановить получение данных для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.GetSecurityValues(StockSharp.BusinessEntities.Security)">
      <summary>Получить ранее накопленные значения.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Накопленные значения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource">
      <summary>Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, который создает <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" /> из стакана <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.#ctor(StockSharp.BusinessEntities.IConnector)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource" />.</summary>
      <param name="connector">Подключение, через которое будут получаться измененные стаканы, используя событие <see cref="E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Зарегистрировать получение данных для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Остановить получение данных для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.GetSecurityValues(StockSharp.BusinessEntities.Security)">
      <summary>Получить ранее накопленные значения.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Накопленные значения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer">
      <summary>Интерфейс контейнера, хранящего данные.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer.ValuesKeepTime">
      <summary>Время хранения <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" /> в памяти. По-умолчанию равно нулю (хранение отсутствует).</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Известить контейнер для начале получения данных для серии.</summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой будут получаться данные.</param>
      <param name="to">Конечная дата, до которой будут получаться данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer.AddValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Добавить данные для свечи.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча, для которой нужно добавить данные.</param>
      <param name="value">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer.GetValues(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>Получить все данные по свече.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча, по которой нужно найти данные.</param>
      <returns>Найденные данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource">
      <summary>Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceList">
      <summary>Коллекция источников данных.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1">
      <summary>Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />, который получает данные из внешнего хранилища.</summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.StorageRegistry">
      <summary>Хранилище данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Drive">
      <summary>Хранилище, которое используется по-умолчанию. По умолчанию используется <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>Получить хранилище данных <typeparamref name="TSourceValue" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Хранилище данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.GetValues(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Получить данные.</summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
      <returns>Данные. Если данных не существует для заданного диапазона, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запросить получение данных.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Dispose">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TradeStorageCandleBuilderSource">
      <summary>Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, получающий тиковые сделки из внешнего хранилища <see cref="T:StockSharp.Algo.Storages.IStorageRegistry" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeStorageCandleBuilderSource.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.TradeStorageCandleBuilderSource" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeStorageCandleBuilderSource.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>Получить хранилище тиковых сделок.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.MarketDepthStorageCandleBuilderSource">
      <summary>Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, получающий тиковые сделки из внешнего хранилища <see cref="T:StockSharp.Algo.Storages.IStorageRegistry" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthStorageCandleBuilderSource.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.MarketDepthStorageCandleBuilderSource" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthStorageCandleBuilderSource.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>Получить хранилище стаканов.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource">
      <summary>Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, получающий тиковые сделки из внешнего хранилища <see cref="T:StockSharp.Algo.Storages.IStorageRegistry" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>Получить хранилище данных.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Хранилище данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.GetValues(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Получить данные.</summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
      <returns>Данные. Если данных не существует для заданного диапазона, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.CandleBuilderContainer">
      <summary>Стандартный контейнер данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilderContainer" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.ValuesKeepTime">
      <summary>Время хранения <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" /> в памяти. По-умолчанию равно нулю (хранение отсутствует).</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Известить контейнер для начале получения данных для серии.</summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой будут получаться данные.</param>
      <param name="to">Конечная дата, до которой будут получаться данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.AddValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Добавить данные для свечи.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча, для которой нужно добавить данные.</param>
      <param name="value">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.GetValues(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>Получить все данные по свече.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча, по которой нужно найти данные.</param>
      <returns>Найденные данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1">
      <summary>Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />, который переводит данные из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" />.</summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.DefaultConverter">
      <summary>Функция по-умолчанию для перевода данных из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.Converter">
      <summary>Функция для перевода данных из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.DefaultFilter">
      <summary>Функция по-умолчанию для фильтрации данных <typeparamref name="TSourceValue" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.Filter">
      <summary>Функция для фильтрации данных <typeparamref name="TSourceValue" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.Convert(System.Collections.Generic.IEnumerable{`0})">
      <summary>Сконвертировать новые данные с помощью <see cref="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.Converter" />.</summary>
      <param name="values">Новые исходные данные.</param>
      <returns>Данные, в формате <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.NewSourceValues(StockSharp.Algo.Candles.CandleSeries,System.Collections.Generic.IEnumerable{`0})">
      <summary>Сконвертировать и передать новые данные в метод <see cref="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource.RaiseProcessing(StockSharp.Algo.Candles.CandleSeries,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue})" />.</summary>
      <param name="series">Серия свечек.</param>
      <param name="values">Новые исходные данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1">
      <summary>Источник данных, работающий непосредственно с готовой коллекцией данных.</summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.#ctor(StockSharp.BusinessEntities.Security,System.DateTimeOffset,System.DateTimeOffset,System.Collections.Generic.IEnumerable{`0})">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1" />.</summary>
      <param name="security">Инструмент, данные которого передаются в источник.</param>
      <param name="from">Время первого значения.</param>
      <param name="to">Время последнего значения.</param>
      <param name="values">Готовая коллеция данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.Values">
      <summary>Готовая коллеция данные.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запросить получение данных.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.VolumeProfileHelper">
      <summary>Вспомогательный класс для <see cref="T:StockSharp.Algo.Candles.Compression.VolumeProfile" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalBuyVolume(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарный объем покупок в <see cref="T:StockSharp.Algo.Candles.Compression.VolumeProfile" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Суммарный объем покупок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalSellVolume(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарный объем продаж в <see cref="T:StockSharp.Algo.Candles.Compression.VolumeProfile" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Суммарный объем продаж.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalBuyCount(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарное количество покупок в <see cref="T:StockSharp.Algo.Candles.Compression.VolumeProfile" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Суммарное количество покупок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalSellCount(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарное количество продаж в <see cref="T:StockSharp.Algo.Candles.Compression.VolumeProfile" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Суммарное количество продаж.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>POC (Point Of Control) возвращает <see cref="T:StockSharp.Messages.CandlePriceLevel" />, по которому прошел максимальный объем.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>
        <see cref="T:StockSharp.Messages.CandlePriceLevel" />, по которому прошел максимальный объем.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.BuyVolAbovePoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарный объем покупок, который прошел выше <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Суммарный объем покупок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.BuyVolBelowPoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарный объем покупок, который прошел ниже <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Суммарный объем покупок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.SellVolAbovePoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарный объем продаж, который прошел выше <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Суммарный объем продаж.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.SellVolBelowPoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарный объем продаж, который прошел ниже <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Суммарный объем продаж.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.VolumeAbovePoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарный объем, который прошел выше <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Общий объем.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.VolumeBelowPoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарный объем, который прошел ниже <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Общий объем.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.Delta(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Разница между <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalBuyVolume(StockSharp.Algo.Candles.Compression.VolumeProfile)" /> и <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.TotalSellVolume(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Дельта.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PriceLevelOfMaxDelta(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Возвращает ценовой уровень, по которому прошла максимальная <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.Delta(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>
        <see cref="T:StockSharp.Messages.CandlePriceLevel" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PriceLevelOfMinDelta(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Возвращает ценовой уровень, по которому прошла минимальная <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.Delta(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Ценовой уровень.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.DeltaAbovePoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарная Дельта, которая прошла выше <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Дельта.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.DeltaBelowPoC(StockSharp.Algo.Candles.Compression.VolumeProfile)">
      <summary>Суммарная Дельта, которая прошла ниже <see cref="M:StockSharp.Algo.Candles.Compression.VolumeProfileHelper.PoC(StockSharp.Algo.Candles.Compression.VolumeProfile)" />.</summary>
      <param name="volumeProfile">Профиль объема.</param>
      <returns>Дельта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.VolumeProfile">
      <summary>Профиль объема.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfile.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.VolumeProfile" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfile.#ctor(System.Collections.Generic.IList{StockSharp.Messages.CandlePriceLevel})">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.Compression.VolumeProfile" />.</summary>
      <param name="priceLevels">Ценовые уровни.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.VolumeProfile.High">
      <summary>Верхний ценовой уровень.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.VolumeProfile.Low">
      <summary>Нижний ценовой уровень.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.VolumeProfile.PoC">
      <summary>Точка контроля.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.VolumeProfile.VolumePercent">
      <summary>Процент от общего объема (по умолчанию 70%).</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.VolumeProfile.PriceLevels">
      <summary>Ценовые уровни.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfile.Update(StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>Обновить профиль новым значением.</summary>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfile.Update(StockSharp.Messages.CandlePriceLevel)">
      <summary>Обновить профиль новым значением.</summary>
      <param name="priceLevel">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeProfile.Calculate">
      <summary>Рассчитать область стоимости.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleManagerContainer">
      <summary>Стандартный контейнер, хранящий данные свечек.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleManagerContainer" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManagerContainer.CandlesKeepTime">
      <summary>Время хранения свечек в памяти. По-умолчанию равно 2-ум дням.</summary>
      <remarks>Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то свечи не будут удаляться.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.AddCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>Добавить свечу для серии.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <returns>
        <see langword="true" />, если свеча не ранее добавлена, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset)">
      <summary>Получить для серии все ассоциированные с ней свечи на период <paramref name="time" />.</summary>
      <param name="series">Серия свечек.</param>
      <param name="time">Период свечи.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить для серии все ассоциированные с ней свечи.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandle(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>Получить свечу по индексу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candleIndex">Порядковый номер свечи с конца.</param>
      <returns>Найденная свеча. Если свечи не существует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTimeOffset})">
      <summary>Получить свечи по серии и диапазону дат.</summary>
      <param name="series">Серия свечек.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечи. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime" />.</param>
      <returns>Найденные свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>Получить свечи по серии и общему количеству.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandleCount(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить количество свечек.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Количество свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Известить контейнер для начале получения свечек для серии.</summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой будут получаться свечи.</param>
      <param name="to">Конечная дата, до которой будут получаться свечи.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleHelper">
      <summary>Вспомогательный класс для работы со свечами.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandle(System.Type)">
      <summary>Определить, наследуется ли тип от <see cref="T:StockSharp.Algo.Candles.Candle" />.</summary>
      <param name="candleType">Тип свечи.</param>
      <returns>
        <see langword="true" /> если тип наследуется от <see cref="T:StockSharp.Algo.Candles.Candle" />, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.TimeFrame(StockSharp.BusinessEntities.Security,System.TimeSpan)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Range(StockSharp.BusinessEntities.Security,StockSharp.Messages.Unit)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.RangeCandle" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.RangeCandle.PriceRange" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Volume(StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.VolumeCandle" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.VolumeCandle.Volume" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Tick(StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.TickCandle" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.TickCandle.MaxTradeCount" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.PnF(StockSharp.BusinessEntities.Security,StockSharp.Messages.PnFArg)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.PnFCandle" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.PnFCandle.PnFArg" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Renko(StockSharp.BusinessEntities.Security,StockSharp.Messages.Unit)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.RenkoCandle" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.RenkoCandle.BoxSize" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Start(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Запустить получение свечек.</summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleCount(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить количество свечек.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
      <returns>Количество свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset)">
      <summary>Получить все свечи на период <paramref name="time" />.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
      <param name="time">Период свечи.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить все свечи.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTimeOffset})">
      <summary>Получить свечи по диапазону дат.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечи. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime" />.</param>
      <returns>Найденные свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>Получить свечи по общему количеству.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandle``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>Получить свечу по индексу.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
      <param name="candleIndex">Порядковый номер свечи с конца.</param>
      <returns>Найденная свеча. Если свечи не существует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset)">
      <summary>Получить временную свечу за определенную дату.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
      <param name="time">Дата свечи.</param>
      <returns>Найденная свеча (<see langword="null" />, если свеча по заданным критериям не существует).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCurrentCandle``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить текущую свечу.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
      <returns>Найденная свеча. Если свеча не существует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetSeries``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>Получить серию свечек по заданным параметрам.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Параметр свечи.</param>
      <returns>Серия свечек. <see langword="null" />, если такая серия не зарегистрирована.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles``1(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},System.Object)">
      <summary>Построить свечи из коллекции тиковых сделок.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="trades">Тиковые сделки.</param>
      <param name="arg">Параметр свечи.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},StockSharp.Algo.Candles.CandleSeries)">
      <summary>Построить свечи из коллекции тиковых сделок.</summary>
      <param name="trades">Тиковые сделки.</param>
      <param name="series">Серия свечек.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage},StockSharp.Algo.Candles.CandleSeries)">
      <summary>Построить свечи из коллекции тиковых сделок.</summary>
      <param name="trades">Тиковые сделки.</param>
      <param name="series">Серия свечек.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth},StockSharp.Algo.Candles.CandleSeries)">
      <summary>Построить свечи из коллекции стаканов.</summary>
      <param name="depths">Стаканы.</param>
      <param name="series">Серия свечек.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage},StockSharp.Algo.Candles.CandleSeries)">
      <summary>Построить свечи из коллекции стаканов.</summary>
      <param name="depths">Стаканы.</param>
      <param name="series">Серия свечек.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToTrades(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>Построить тики из свечек.</summary>
      <param name="candles">Свечек.</param>
      <returns>Trades.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToTrades(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage},System.Decimal)">
      <summary>Построить тиковые сделки из свечек.</summary>
      <param name="candles">Свечек.</param>
      <param name="volumeStep">Шаг объема.</param>
      <returns>Тиковые сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToTrades(StockSharp.Messages.CandleMessage,System.Decimal,System.Int32)">
      <summary>Построить тиковые сделки из свечи.</summary>
      <param name="candleMsg">Свеча.</param>
      <param name="volumeStep">Шаг объема.</param>
      <param name="decimals">Количество знаком после запятой у объема.</param>
      <returns>Тиковые сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandlesRegistered``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>Зарегистрирована ли группировка свечек по определённому признаку.</summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="arg">Параметр свечи.</param>
      <returns>
        <see langword="true" />, если зарегистрирована. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTimeOffset)">
      <summary>Получить временные рамки свечи.</summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <returns>Временные рамки свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTimeOffset,StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Получить временные рамки свечи относительно времени работы биржи.</summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <param name="board">Информация о площадке, из которой будет взято время работы <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.WorkingTime" />.</param>
      <returns>Временные рамки свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTimeOffset,StockSharp.BusinessEntities.ExchangeBoard,StockSharp.Messages.WorkingTime)">
      <summary>Получить временные рамки свечи относительно режиме работы биржи.</summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <param name="board">Информация о площадке.</param>
      <param name="time">Информация о режиме работы биржи.</param>
      <returns>Временные рамки свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLength(StockSharp.Algo.Candles.Candle)">
      <summary>Получить длину свечи.</summary>
      <param name="candle">Свеча, для которой необходимо получить длины.</param>
      <returns>Длина свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetBody(StockSharp.Algo.Candles.Candle)">
      <summary>Получить тело свечи.</summary>
      <param name="candle">Свеча, для которой необходимо получить тело.</param>
      <returns>Тело свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTopShadow(StockSharp.Algo.Candles.Candle)">
      <summary>Получить длину верхней тени свечи.</summary>
      <param name="candle">Свеча, для которой необходимо получить длины верхней тени.</param>
      <returns>Длина верхней тени свечи. Если 0, то тень отсутствует.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetBottomShadow(StockSharp.Algo.Candles.Candle)">
      <summary>Получить длину нижней тени свечи.</summary>
      <param name="candle">Свеча, для которой необходимо получить длины нижней тени.</param>
      <returns>Длина нижней тени свечи. Если 0, то тень отсутствует.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsWhiteOrBlack(StockSharp.Algo.Candles.Candle)">
      <summary>Белая ли или черная свеча.</summary>
      <param name="candle">Свеча, для которой необходимо определить цвет.</param>
      <returns>
        <see langword="true" />, если свеча белая, <see langword="false" />, если черная, и <see langword="null" />, если свеча плоская.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsMarubozu(StockSharp.Algo.Candles.Candle)">
      <summary>Бестеневая ли свеча тени.</summary>
      <param name="candle">Свеча, для которой необходимо определить наличие теней.</param>
      <returns>
        <see langword="true" />, если свеча не имеет теней, <see langword="false" />, если имеет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsSpinningTop(StockSharp.Algo.Candles.Candle)">
      <summary>Нейтральная ли свеча сделкам.</summary>
      <param name="candle">Свеча, для которой необходимо рассчитать, нейтральна ли она.</param>
      <returns>
        <see langword="true" />, если свеча нейтральна, <see langword="false" />, если не нейтральная.</returns>
      <remarks>Нейтральность определяется как ситуация, когда в период свечи ни покупатели ни продавцы не создали тренд.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsHammer(StockSharp.Algo.Candles.Candle)">
      <summary>Является ли свеча молотом.</summary>
      <param name="candle">Свеча, которую необходимо проверить на паттерн.</param>
      <returns>
        <see langword="true" />, если является, <see langword="false" />, если нет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsDragonflyOrGravestone(StockSharp.Algo.Candles.Candle)">
      <summary>Является ли свеча стрекозой или надгробьем.</summary>
      <param name="candle">Свеча, которую необходимо проверить на паттерн.</param>
      <returns>
        <see langword="true" />, если стрекоза, <see langword="false" />, если надгробье, <see langword="null" /> - ни то, ни другое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsBullishOrBearish(StockSharp.Algo.Candles.Candle)">
      <summary>Бычья ли или медвежья свеча.</summary>
      <param name="candle">Свеча, которую необходимо проверить на тренд.</param>
      <returns>
        <see langword="true" />, если бычья, <see langword="false" />, если медвежья, <see langword="null" /> - ни то, ни другое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.Security,Ecng.ComponentModel.Range{System.DateTimeOffset},System.TimeSpan)">
      <summary>Получить количество временных интервалов в пределах заданного отрезка времени.</summary>
      <param name="security">Инструмент, по которому вычисляется время работы биржи через свойство <see cref="P:StockSharp.BusinessEntities.Security.Board" />.</param>
      <param name="range">Заданный отрезок времени, для которого нужно получить количество временных интервалов.</param>
      <param name="timeFrame">Размер временного интервала.</param>
      <returns>Полученное количество временных интервалов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range{System.DateTimeOffset},System.TimeSpan)">
      <summary>Получить количество временных интервалов в пределах заданного отрезка времени.</summary>
      <param name="board">Информация о площадке, по которому вычисляется время работы через свойство <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.WorkingTime" />.</param>
      <param name="range">Заданный отрезок времени, для которого нужно получить количество временных интервалов.</param>
      <param name="timeFrame">Размер временного интервала.</param>
      <returns>Полученное количество временных интервалов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetValueArea(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>Рассчитать область по группе свечей.</summary>
      <param name="candles">Свечек.</param>
      <returns>Область.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.StartRealTime``1(``0,Ecng.Collections.CachedSynchronizedSet{StockSharp.Algo.Candles.CandleSeries},System.TimeSpan,System.Action{StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTimeOffset}},System.TimeSpan)">
      <summary>Запустить таймер получения из переданного <paramref name="connector" /> свечек реального времени.</summary>
      <typeparam name="TConnector">Тип подключения, реализующего <see cref="T:StockSharp.Algo.Candles.IExternalCandleSource" />.</typeparam>
      <param name="connector">Подключение, реализующее <see cref="T:StockSharp.Algo.Candles.IExternalCandleSource" />.</param>
      <param name="registeredSeries">Все зарегистрированные серии свечек.</param>
      <param name="offset">Временной отступ для нового запроса получение новой свечи. Необходим для того, чтобы сервер успел сформировать данные в своем хранилище свечек.</param>
      <param name="requestNewCandles">Обработчик, получающий новые свечи.</param>
      <param name="interval">Периодичность обновления данных.</param>
      <returns>Созданный таймер.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Candle">
      <summary>Базовый класс для свечи (содержит основные параметры).</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Security">
      <summary>Инструмент стакана.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenTime">
      <summary>Время начала свечи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.CloseTime">
      <summary>Время окончания свечи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.HighTime">
      <summary>Время с максимальной ценой в свече.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.LowTime">
      <summary>Время с минимальной ценой в свече.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenPrice">
      <summary>Цена открытия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.ClosePrice">
      <summary>Цена закрытия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.HighPrice">
      <summary>Максимальная цена.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.LowPrice">
      <summary>Минимальная цена.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.TotalPrice">
      <summary>Суммарный оборот по сделкам.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenVolume">
      <summary>Объем открытия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.CloseVolume">
      <summary>Объем закрытия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.HighVolume">
      <summary>Максимальный объем.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.LowVolume">
      <summary>Минимальный объем.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.TotalVolume">
      <summary>Общий объем.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.RelativeVolume">
      <summary>Относительный объем.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Arg">
      <summary>Параметр свечи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.TotalTicks">
      <summary>Количество тиковых сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.UpTicks">
      <summary>Количество восходящих тиковых сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.DownTicks">
      <summary>Количество нисходящих тиковых сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.State">
      <summary>Состояние.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.PriceLevels">
      <summary>Ценовые уровни.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenInterest">
      <summary>Открытый интерес.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Candle.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Candle.CopyTo``1(``0)">
      <summary>Скопировать данные сообщения в <paramref name="destination" />.</summary>
      <typeparam name="TCandle">Тип свечи.</typeparam>
      <param name="destination">Объект, в который копируется информация.</param>
      <returns>Объект, в который копируется информация.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.TimeFrameCandle">
      <summary>Свеча, группируемая по тайм-фрейму.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame">
      <summary>Тайм-фрейм.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TimeFrameCandle.Arg">
      <summary>Параметр свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.TimeFrameCandle.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.TickCandle">
      <summary>Свеча, группируемая по количеству сделок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TickCandle.MaxTradeCount">
      <summary>Максимальное количество сделок, которое может содержать свеча.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TickCandle.CurrentTradeCount">
      <summary>Текущее количество сделок, которое содержит свеча.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TickCandle.Arg">
      <summary>Параметр свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.TickCandle.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Candles.TickCandle" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.VolumeCandle">
      <summary>Свеча, группируемая по количеству контрактов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.VolumeCandle.Volume">
      <summary>Максимальное количество контрактов, которое может содержать свеча.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.VolumeCandle.Arg">
      <summary>Параметр свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.VolumeCandle.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Candles.VolumeCandle" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.RangeCandle">
      <summary>Свеча, группируемая по ценовому диапазону.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RangeCandle.PriceRange">
      <summary>Дельта цены, в рамках которой свеча может содержать сделки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RangeCandle.Arg">
      <summary>Параметр свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.RangeCandle.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Candles.RangeCandle" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.PnFCandle">
      <summary>Свеча пункто-цифрового графика (график крестики-нолики).</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.PnFArg">
      <summary>Значение параметров.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.Type">
      <summary>Тип символов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.Arg">
      <summary>Параметр свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFCandle.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Candles.PnFCandle" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.RenkoCandle">
      <summary>Свеча Рэнко графика.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RenkoCandle.BoxSize">
      <summary>Изменение цены, при превышении которого регистрируется новая свеча.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RenkoCandle.Arg">
      <summary>Параметр свечи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.RenkoCandle.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Candles.RenkoCandle" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManagerContainer">
      <summary>Интерфейс контейнера, хранящего данные свечек.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManagerContainer.CandlesKeepTime">
      <summary>Время хранения свечек в памяти. По-умолчанию равно 2-ум дням.</summary>
      <remarks>Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то свечи не будут удаляться.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Известить контейнер для начале получения свечек для серии.</summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой будут получаться свечи.</param>
      <param name="to">Конечная дата, до которой будут получаться свечи.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.AddCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>Добавить свечу для серии.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свеча.</param>
      <returns>
        <see langword="true" />, если свеча не ранее добавлена, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset)">
      <summary>Получить для серии все ассоциированные с ней свечи на период <paramref name="time" />.</summary>
      <param name="series">Серия свечек.</param>
      <param name="time">Период свечи.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить для серии все ассоциированные с ней свечи.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandle(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>Получить свечу по индексу.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candleIndex">Порядковый номер свечи с конца.</param>
      <returns>Найденная свеча. Если свечи не существует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTimeOffset})">
      <summary>Получить свечи по серии и диапазону дат.</summary>
      <param name="series">Серия свечек.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечи. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime" />.</param>
      <returns>Найденные свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>Получить свечи по серии и общему количеству.</summary>
      <param name="series">Серия свечек.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечи.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandleCount(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить количество свечек.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Количество свечек.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManager">
      <summary>Интерфейс менеджера свечек.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManager.Container">
      <summary>Контейнер данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManager.Series">
      <summary>Все активные на текущий момент серии свечек, запущенные через <see cref="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManager.Sources">
      <summary>Источники свечек.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManagerSource">
      <summary>Источник свечек для <see cref="T:StockSharp.Algo.Candles.ICandleManager" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManagerSource.CandleManager">
      <summary>Менеджер свечек, которому принадлежит данный источник.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManagerSourceList">
      <summary>Коллекция источников свечек.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleSource`1">
      <summary>Источник данных.</summary>
      <typeparam name="TValue">Типы данных.</typeparam>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleSource`1.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource`1.Processing">
      <summary>Событие появления нового значения для обработки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource`1.Stopped">
      <summary>Событие окончания обработки серии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource`1.Error">
      <summary>Событие ошибки транслирования данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запросить получение данных.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.IExternalCandleSource">
      <summary>Внешний источник свечек (например, подключение <see cref="T:StockSharp.BusinessEntities.IConnector" />, предоставляющее возможность получения готовых свечек).</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.IExternalCandleSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="E:StockSharp.Algo.Candles.IExternalCandleSource.NewCandles">
      <summary>Событие появления новых свечек, полученных после подписки через <see cref="M:StockSharp.Algo.Candles.IExternalCandleSource.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.IExternalCandleSource.Stopped">
      <summary>Событие окончания обработки серии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.IExternalCandleSource.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подписаться на получение свечек.</summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.IExternalCandleSource.UnSubscribeCandles(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Остановить подписку получения свечек, ранее созданную через <see cref="M:StockSharp.Algo.Candles.IExternalCandleSource.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.IStorageCandleSource">
      <summary>Интерфейс источника свечек для <see cref="T:StockSharp.Algo.Candles.ICandleManager" />, который загружает данные из внешнего хранилища.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.IStorageCandleSource.StorageRegistry">
      <summary>Хранилище данных.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.StorageCandleSource">
      <summary>Источник свечек для <see cref="T:StockSharp.Algo.Candles.ICandleManager" />, который загружает свечи из внешнего хранилища.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.StorageCandleSource" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleSource.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleSource.StorageRegistry">
      <summary>Хранилище данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleSource.Drive">
      <summary>Хранилище, которое используется по-умолчанию. По умолчанию используется <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleSource.StockSharp#Algo#Candles#ICandleManagerSource#CandleManager">
      <summary>Менеджер свечек, которому принадлежит данный источник.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запросить получение данных.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.StorageCandleSource.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.Dispose">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleManager">
      <summary>Менеджер свечек.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.ExternalCandleSource.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderSource)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.</summary>
      <param name="builderSource">Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor(StockSharp.BusinessEntities.IConnector)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.</summary>
      <param name="connector">Подключение к торговой системе для создания источника тиковых сделок по-умолчанию.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Container">
      <summary>Контейнер данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.StorageRegistry">
      <summary>Хранилище данных. Передается во все источники, реализующие интерфейс <see cref="T:StockSharp.Algo.Candles.IStorageCandleSource" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Series">
      <summary>Все активные на текущий момент серии свечек, запущенные через <see cref="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Sources">
      <summary>Источники свечек.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.SpeedPriority">
      <summary>Приоритет источника по скорости (0 - самый оптимальный).</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.Processing">
      <summary>Событие появления нового значения для обработки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.Stopped">
      <summary>Событие окончания обработки серии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.Error">
      <summary>Событие ошибки формирования свечек.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Получить временные диапазоны, для которых у данного источника для передаваемой серии свечек есть данные.</summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Запросить получение данных.</summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)" />.</summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.RaiseError(System.Exception)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleManager.Error" />.</summary>
      <param name="error">Информация об ошибке поиска инструментов.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleSeries">
      <summary>Серия свечек.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.#ctor(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" />.</summary>
      <param name="candleType">Тип свечи.</param>
      <param name="security">Инструмент, по которому необходимо формировать свечи.</param>
      <param name="arg">Параметр формирования свечи. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.Security">
      <summary>Инструмент, по которому необходимо формировать свечи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.CandleType">
      <summary>Тип свечи.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.Arg">
      <summary>Параметр формирования свечи. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.WorkingTime">
      <summary>Граница времени, в пределах которой должны транслироваться свечи для данной серии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.IsCalcVolumeProfile">
      <summary>Производить расчет <see cref="P:StockSharp.Algo.Candles.Candle.PriceLevels" />. По-умолчанию, выключено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.From">
      <summary>Начальная дата, с которой необходимо получать данные.</summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.To">
      <summary>Конечная дата, до которой необходимо получать данные.</summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Connector">
      <summary>Класс для создания подключений к торговым системам.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.RaiseConnectedOnFirstAdapter">
      <summary>Вызывать событие <see cref="E:StockSharp.Algo.Connector.Connected" /> при установке подключения первого адаптера в <see cref="P:StockSharp.Algo.Connector.Adapter" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.InMessageChannel">
      <summary>Канал входящих сообщений.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.OutMessageChannel">
      <summary>Транспортный канал исходящих сообщений.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.InnerAdapter">
      <summary>Внутренний адаптер сообщений.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.Adapter">
      <summary>Адаптер сообщений.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.SupportOffline">
      <summary>Использовать <see cref="T:StockSharp.Algo.OfflineMessageAdapter" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.TransactionAdapter">
      <summary>Адаптер для транзакций.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.MarketDataAdapter">
      <summary>Адаптер для маркет-данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.StorageAdapter">
      <summary>Адаптер-хранилище.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.SendOutMessage(StockSharp.Messages.Message)">
      <summary>Отправить исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.SendOutError(System.Exception)">
      <summary>Отправить ошибку.</summary>
      <param name="error">Описание ошибки.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetPortfolio(System.String,System.Func{StockSharp.BusinessEntities.Portfolio,System.Boolean})">
      <summary>Получить портфель по названию. Если портфель не зарегистрирован, то он создается через <see cref="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)" />.</summary>
      <param name="name">Имя портфеля.</param>
      <param name="changePortfolio">Обработчик, изменяющий портфель.</param>
      <returns>Портфель.</returns>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewMyTrade">
      <summary>Собственная сделка была получена.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewMyTrades">
      <summary>Событие появления собственных новых сделок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewTrade">
      <summary>Тиковая сделка была получена.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewTrades">
      <summary>Событие появления всех новых сделок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewOrder">
      <summary>Заявка была получена.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewOrders">
      <summary>Событие появления новых заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.OrderChanged">
      <summary>Заявка изменена (отменена, исполнена).</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewStopOrders">
      <summary>Событие появления новых стоп-заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.OrdersChanged">
      <summary>Событие изменения состояния заявок (снята, удовлетворена).</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.OrderRegisterFailed">
      <summary>Событие ошибки регистрации заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.OrderCancelFailed">
      <summary>Событие ошибки отмены заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.StopOrdersChanged">
      <summary>Событие изменения стоп-заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.StopOrderRegisterFailed">
      <summary>Событие ошибки регистрации стоп-заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.StopOrderCancelFailed">
      <summary>Событие ошибки отмены стоп-заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewStopOrder">
      <summary>Событие получения стоп-заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.StopOrderChanged">
      <summary>Событие изменения стоп-заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewSecurity">
      <summary>Инструмент получен.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.OrdersRegisterFailed">
      <summary>Событие об ошибках, связанных с регистрацией заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.OrdersCancelFailed">
      <summary>Событие об ошибках, связанных со снятием заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MassOrderCanceled">
      <summary>Событие массовой отмены заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MassOrderCancelFailed">
      <summary>Событие об ошибке массовой отмены заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.StopOrdersRegisterFailed">
      <summary>Событие об ошибках, связанных с регистрацией стоп-заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.StopOrdersCancelFailed">
      <summary>Событие об ошибках, связанных со снятием стоп-заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewSecurities">
      <summary>Событие появления новых инструментов.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.SecurityChanged">
      <summary>Событие изменения инструмента.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.SecuritiesChanged">
      <summary>Событие изменения параметров инструментов.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewPortfolio">
      <summary>Портфель получен.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewPortfolios">
      <summary>Событие появления новых портфелей.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.PortfolioChanged">
      <summary>Портфель изменен.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.PortfoliosChanged">
      <summary>Событие изменения параметров портфелей.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewPosition">
      <summary>Позиция получена.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewPositions">
      <summary>Событие появления новых позиций.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.PositionChanged">
      <summary>Позиция изменена.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.PositionsChanged">
      <summary>Событие изменения параметров позиций.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewMarketDepth">
      <summary>Стакан получен.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MarketDepthChanged">
      <summary>Стакан изменен.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewMarketDepths">
      <summary>Событие появления новых стаканов с котировками.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MarketDepthsChanged">
      <summary>Событие изменения стаканов с котировками.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewOrderLogItem">
      <summary>Событие появления новых записей в логе заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewOrderLogItems">
      <summary>Событие появления новых записей в логе заявок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MarketTimeChanged">
      <summary>Событие, сигнализирующее об изменении текущего времени на биржевых площадках <see cref="P:StockSharp.BusinessEntities.IConnector.ExchangeBoards" />. Передается разница во времени, прошедшее с последнего вызова события. Первый раз событие передает значение <see cref="F:System.TimeSpan.Zero" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewNews">
      <summary>Событие появления новости.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewsChanged">
      <summary>Событие изменения новости (например, при скачивании текста <see cref="P:StockSharp.BusinessEntities.News.Story" />).</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.NewMessage">
      <summary>Событие обработки нового сообщения <see cref="T:StockSharp.Messages.Message" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.Connected">
      <summary>Событие успешного подключения.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.Disconnected">
      <summary>Событие успешного отключения.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.ConnectionError">
      <summary>Событие ошибки подключения (например, соединения было разорвано).</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.ConnectedEx">
      <summary>Событие успешного подключения.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.DisconnectedEx">
      <summary>Событие успешного отключения.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.ConnectionErrorEx">
      <summary>Событие ошибки подключения (например, соединения было разорвано).</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.Error">
      <summary>Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.LookupSecuritiesResult">
      <summary>Событие, передающее результат поиска, запущенного через метод <see cref="M:StockSharp.BusinessEntities.IConnector.LookupSecurities(StockSharp.BusinessEntities.Security)" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.LookupPortfoliosResult">
      <summary>Событие, передающее результат поиска, запущенного через метод <see cref="M:StockSharp.BusinessEntities.IConnector.LookupPortfolios(StockSharp.BusinessEntities.Portfolio)" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MarketDataSubscriptionSucceeded">
      <summary>Событие успешной регистрации инструмента для получения маркет-данных.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MarketDataSubscriptionFailed">
      <summary>Событие ошибки регистрации инструмента для получения маркет-данных.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MarketDataUnSubscriptionSucceeded">
      <summary>Успешная отписка на маркет-данные.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.MarketDataUnSubscriptionFailed">
      <summary>Ошибка отписки от маркет-данных.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.SessionStateChanged">
      <summary>Событие изменения состояния сессии для биржевой площадки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.ValuesChanged">
      <summary>Событие изменения инструмента.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.Restored">
      <summary>Событие об успешном восстановлении соединения.</summary>
    </member>
    <member name="E:StockSharp.Algo.Connector.TimeOut">
      <summary>Событие о тайм-ауте подключения.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseNewStopOrder(StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.NewStopOrders" />.</summary>
      <param name="stopOrder">Стоп-заявка, которую необходимо передавать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseStopOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.StopOrdersChanged" />.</summary>
      <param name="stopOrder">Стоп-заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseStopOrdersRegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.StopOrdersRegisterFailed" />.</summary>
      <param name="fail">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseStopOrdersCancelFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.StopOrdersCancelFailed" />.</summary>
      <param name="fail">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseNewNews(StockSharp.BusinessEntities.News)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.NewNews" />.</summary>
      <param name="news">Новости.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseNewsChanged(StockSharp.BusinessEntities.News)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.NewsChanged" />.</summary>
      <param name="news">Новости.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseConnected">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.Connected" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseConnectedEx(StockSharp.Messages.IMessageAdapter)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.ConnectedEx" />.</summary>
      <param name="adapter">Адаптер, инициирующий события.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseDisconnected">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.Disconnected" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseDisconnectedEx(StockSharp.Messages.IMessageAdapter)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.DisconnectedEx" />.</summary>
      <param name="adapter">Адаптер, инициирующий события.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseConnectionError(System.Exception)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.ConnectionError" />.</summary>
      <param name="exception">Ошибка подключения.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseConnectionErrorEx(StockSharp.Messages.IMessageAdapter,System.Exception)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.ConnectionErrorEx" />.</summary>
      <param name="adapter">Адаптер, инициирующий события.</param>
      <param name="exception">Ошибка подключения.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseError(System.Exception)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.Error" />.</summary>
      <param name="exception">Ошибка обработки данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseMarketTimeChanged(System.TimeSpan)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.MarketTimeChanged" />.</summary>
      <param name="diff">Разница во времени, прошедшее с последнего вызова события. Первый раз событие передает значение <see cref="F:System.TimeSpan.Zero" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseLookupSecuritiesResult(System.Exception,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.LookupSecuritiesResult" />.</summary>
      <param name="error">Ошибка поиска инструментов. Значение будет равно <see langword="null" />, если операция выполнена успешно.</param>
      <param name="securities">Найденные инструменты.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseLookupPortfoliosResult(System.Exception,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.LookupPortfoliosResult" />.</summary>
      <param name="error">Ошибка поиска портфелей. Значение будет равно <see langword="null" />, если операция выполнена успешно.</param>
      <param name="portfolios">Найденные портфели.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RaiseNewMessage(StockSharp.Messages.Message)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Connector.NewMessage" />.</summary>
      <param name="message">Новое сообщение.</param>
    </member>
    <member name="P:StockSharp.Algo.Connector.RegisteredSecurities">
      <summary>Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.Algo.Connector.RegisterSecurity(StockSharp.BusinessEntities.Security)" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.RegisteredMarketDepths">
      <summary>Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.Algo.Connector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.RegisteredTrades">
      <summary>Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.Algo.Connector.RegisterTrades(StockSharp.BusinessEntities.Security)" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.RegisteredOrderLogs">
      <summary>Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.Algo.Connector.RegisterOrderLog(StockSharp.BusinessEntities.Security)" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.RegisteredPortfolios">
      <summary>Список всех портфелей, зарегистрированных через <see cref="M:StockSharp.Algo.Connector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.SubscribeMarketData(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataMessage)">
      <summary>Подписаться на получение рыночных данных по инструменту.</summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
      <param name="message">Сообщение, содержащее информацию о подписке.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.UnSubscribeMarketData(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataMessage)">
      <summary>Отписаться от получения рыночных данных по инструменту.</summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
      <param name="message">Сообщение, содержащее информацию об отписке.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.</summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Остановить получение новой информации.</summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Начать получать котировки (стакан) по инструменту. Значение котировок можно получить через событие <see cref="E:StockSharp.Algo.Connector.MarketDepthsChanged" />.</summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.UnRegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Остановить получение котировок по инструменту.</summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RegisterFilteredMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Начать получать отфильтрованные котировки (стакан) по инструменту. Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.IConnector.GetFilteredMarketDepth(StockSharp.BusinessEntities.Security)" />.</summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.UnRegisterFilteredMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Остановить получение отфильтрованных котировок по инструменту.</summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через событие <see cref="E:StockSharp.BusinessEntities.IConnector.NewTrades" />.</summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>Остановить получение сделок (тиковые данные) по инструменту.</summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>Начать получать новую информацию по портфелю.</summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>Начать получать новую информацию по портфелю.</summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>Остановить получение новой информации по портфелю.</summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnUnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>Остановить получение новой информации по портфелю.</summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>Начать получать лог заявок для инструмента.</summary>
      <param name="security">Инструмент, по которому необходимо начать получать лог заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.UnRegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>Остановить получение лога заявок для инструмента.</summary>
      <param name="security">Инструмент, по которому необходимо остановить получение лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.RegisterNews">
      <summary>Начать получать новости.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnRegisterNews">
      <summary>Начать получать новости.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.UnRegisterNews">
      <summary>Остановить получение новостей.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.RequestNewsStory(StockSharp.BusinessEntities.News)">
      <summary>Запросить текст новости <see cref="P:StockSharp.BusinessEntities.News.Story" />. После получения текста будет вызвано событие <see cref="E:StockSharp.Algo.Connector.NewsChanged" />.</summary>
      <param name="news">Новости.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnUnRegisterNews">
      <summary>Остановить получение новостей.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Connector" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.#ctor(StockSharp.Algo.Storages.IEntityRegistry,StockSharp.Algo.Storages.IStorageRegistry,System.Boolean,System.Boolean)">
      <summary>Создать <see cref="T:StockSharp.Algo.Connector" />.</summary>
      <param name="entityRegistry">Хранилище торговых объектов.</param>
      <param name="storageRegistry">Хранилище маркет-данных.</param>
      <param name="initManagers">Инициализировать менеджеры.</param>
      <param name="supportOffline">Использовать <see cref="T:StockSharp.Algo.OfflineMessageAdapter" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Создать <see cref="T:StockSharp.Algo.Connector" />.</summary>
      <param name="initAdapter">Инициализировать адаптер.</param>
      <param name="initChannels">Инициализировать каналы сообщений.</param>
      <param name="initManagers">Инициализировать менеджеры.</param>
      <param name="supportOffline">Использовать <see cref="T:StockSharp.Algo.OfflineMessageAdapter" />.</param>
    </member>
    <member name="P:StockSharp.Algo.Connector.ReConnectionSettings">
      <summary>Настройки контроля подключения <see cref="T:StockSharp.BusinessEntities.IConnector" /> к торговой системе.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.EntityFactory">
      <summary>Фабрика бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.TradesKeepCount">
      <summary>Количество тиковых сделок для хранения. По умолчанию равно 100000. Если значение установлено в <see cref="F:System.Int32.MaxValue" />, то сделки не будут удаляться. Если значение установлено в 0, то сделки не будут сохраняться.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.OrdersKeepCount">
      <summary>Количество заявок для хранения. По умолчанию равно 1000. Если значение установлено в <see cref="F:System.Int32.MaxValue" />, то заявки не будут удаляться. Если значение установлено в 0, то заявки не будут сохраняться.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.TransactionIdGenerator">
      <summary>Генератор транзакций.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.SecurityIdGenerator">
      <summary>Генератор идентификаторов инструментов <see cref="P:StockSharp.BusinessEntities.Security.Id" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.ExchangeBoards">
      <summary>Список всех биржевых площадок, для которых загружены инструменты <see cref="P:StockSharp.BusinessEntities.IConnector.Securities" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.Securities">
      <summary>Список всех загруженных инструментов. Вызывать необходимо после того, как пришло событие <see cref="E:StockSharp.BusinessEntities.IConnector.NewSecurities" />. Иначе будет возвращено пустое множество.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.Lookup(StockSharp.BusinessEntities.Security)">
      <summary>Найти инструменты, соответствующие фильтру <paramref name="criteria" />.</summary>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Найденные инструменты.</returns>
    </member>
    <member name="P:StockSharp.Algo.Connector.CurrentTime">
      <summary>Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetSessionState(StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Получить состояние сессии для заданной площадки.</summary>
      <param name="board">Биржевая площадка электронных торгов.</param>
      <returns>Состояние сессии. Если информация о состоянии сессии отсутствует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Connector.Orders">
      <summary>Получить все заявки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.StopOrders">
      <summary>Получить все стоп-заявки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.OrderRegisterFails">
      <summary>Получить все ошибки при регистрации заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.OrderCancelFails">
      <summary>Получить все ошибки при снятии заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.Trades">
      <summary>Получить все сделки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.MyTrades">
      <summary>Получить все собственные сделки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.Portfolios">
      <summary>Получить все портфели.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.Positions">
      <summary>Получить все позиции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.News">
      <summary>Все новости.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.LatencyManager">
      <summary>Менеджер расчета задержки регистрации заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.PnLManager">
      <summary>Менеджер прибыли-убытка.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.RiskManager">
      <summary>Риск менеджер.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.CommissionManager">
      <summary>Менеджер расчета комиссии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.SlippageManager">
      <summary>Менеджер проскальзывания.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.ConnectionState">
      <summary>Состояние соединения.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.CreateDepthFromOrdersLog">
      <summary>Использовать лог заявок (orders log) для создания стаканов. По-умолчанию выключено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.CreateTradesFromOrdersLog">
      <summary>Использовать лог заявок (orders log) для создания тиковых сделок. По-умолчанию выключено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.UpdateSecurityLastQuotes">
      <summary>Обновлять <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" />, <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />, <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" /> на каждом обновлении стакана и/или сделок. По умолчанию включено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.UpdateSecurityByLevel1">
      <summary>Обновлять поля <see cref="T:StockSharp.BusinessEntities.Security" /> при появлении сообщения <see cref="T:StockSharp.Messages.Level1ChangeMessage" />. По умолчанию включено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.CreateDepthFromLevel1">
      <summary>Обновлять стакан для инструмента при появлении сообщения <see cref="T:StockSharp.Messages.Level1ChangeMessage" />. По умолчанию включено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.CreateAssociatedSecurity">
      <summary>Создавать объединенный инструмент для инструментов с разных торговых площадок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.ErrorCount">
      <summary>Число ошибок, переданное через событие <see cref="E:StockSharp.Algo.Connector.Error" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.MarketTimeChangedInterval">
      <summary>Интервал генерации сообщения <see cref="T:StockSharp.Messages.TimeMessage" />. По-умолчанию равно 10 миллисекундам.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.TimeChange">
      <summary>Увеличивать периодически <see cref="P:StockSharp.Algo.Connector.MarketTimeChangedInterval" /> значение <see cref="P:StockSharp.Algo.Connector.CurrentTime" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Connector.IsRestorSubscriptioneOnReconnect">
      <summary>Восстановить подписку при переподключении.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.Connect">
      <summary>Подключиться к торговой системе.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnConnect">
      <summary>Подключиться к торговой системе.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.Disconnect">
      <summary>Отключиться от торговой системы.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnDisconnect">
      <summary>Отключиться от торговой системы.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.LookupSecurities(StockSharp.BusinessEntities.Security)">
      <summary>Найти инструменты, соответствующие фильтру <paramref name="criteria" />. Найденные инструменты будут переданы через событие <see cref="E:StockSharp.BusinessEntities.IConnector.LookupSecuritiesResult" />.</summary>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.LookupSecurities(StockSharp.Messages.SecurityLookupMessage)">
      <summary>Найти инструменты, соответствующие фильтру <paramref name="criteria" />. Найденные инструменты будут переданы через событие <see cref="E:StockSharp.BusinessEntities.IConnector.LookupSecuritiesResult" />.</summary>
      <param name="criteria">Критерий, поля которого будут использоваться в качестве фильтра.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.LookupPortfolios(StockSharp.BusinessEntities.Portfolio)">
      <summary>Найти портфели, соответствующие фильтру <paramref name="criteria" />. Найденные портфели будут переданы через событие <see cref="E:StockSharp.BusinessEntities.IConnector.LookupPortfoliosResult" />.</summary>
      <param name="criteria">Портфель, поля которого будут использоваться в качестве фильтра.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.String,System.String)">
      <summary>Получить позицию по портфелю и инструменту.</summary>
      <param name="portfolio">Портфель, по которому нужно найти позицию.</param>
      <param name="security">Инструмент, по которому нужно найти позицию.</param>
      <param name="clientCode">Код клиента.</param>
      <param name="depoName">Название депозитария, где находится физически ценная бумага. По-умолчанию передается пустая строка, что означает суммарную позицию по всем депозитариям.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Получить стакан котировок.</summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Стакан с котировками.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetFilteredMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Получить отфильтрованный стакан котировок.</summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Отфильтрованный стакан котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>Регистрация новой заявки.</summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.ReRegisterOrder(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>Перерегистрировать заявку на бирже.</summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="price">Цена новой заявки.</param>
      <param name="volume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
      <remarks>Если объём не задан, меняется только цена.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Connector.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>Перерегистрировать заявку на бирже.</summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.ReRegisterOrderPair(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>Перерегистрировать пару заявок на бирже.</summary>
      <param name="oldOrder1">Первая заявка, которую нужно снять.</param>
      <param name="newOrder1">Первая новая заявка, которую нужно зарегистрировать.</param>
      <param name="oldOrder2">Вторая заявка, которую нужно снять.</param>
      <param name="newOrder2">Вторая новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>Отменить заявку на бирже.</summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.InitNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>Инициализировать новую заявку идентификатором транзакции, информацией о подключении и т.д.</summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnRegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>Регистрация новой заявки.</summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>Перерегистрировать заявку на бирже.</summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnReRegisterOrderPair(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>Перерегистрировать пару заявок на бирже.</summary>
      <param name="oldOrder1">Первая заявка, которую нужно снять.</param>
      <param name="newOrder1">Первая новая заявка, которую нужно зарегистрировать.</param>
      <param name="oldOrder2">Вторая заявка, которую нужно снять.</param>
      <param name="newOrder2">Вторая новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnCancelOrder(StockSharp.BusinessEntities.Order,System.Int64)">
      <summary>Отменить заявку на бирже.</summary>
      <param name="order">Заявка, которую нужно отменять.</param>
      <param name="transactionId">Идентификатор транзакции отмены.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.CancelOrders(System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.Messages.Sides},StockSharp.BusinessEntities.ExchangeBoard,StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityTypes})">
      <summary>Отменить группу заявок на бирже по фильтру.</summary>
      <param name="isStopOrder">
        <see langword="true" />, если нужно отменить только стоп-заявки, <see langword="false" /> - если только обычный и <see langword="null" /> - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно <see langword="null" />, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно <see langword="null" />, то направление не попадает в фильтр снятия заявок.</param>
      <param name="board">Торговая площадка. Если значение равно <see langword="null" />, то площадка не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно <see langword="null" />, то инструмент не попадает в фильтр снятия заявок.</param>
      <param name="securityType">Тип инструмента. Если значение равно <see langword="null" />, тип не используется.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.OnCancelOrders(System.Int64,System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.Messages.Sides},StockSharp.BusinessEntities.ExchangeBoard,StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityTypes})">
      <summary>Отменить группу заявок на бирже по фильтру.</summary>
      <param name="transactionId">Идентификатор транзакции отмены.</param>
      <param name="isStopOrder">
        <see langword="true" />, если нужно отменить только стоп-заявки, <see langword="false" /> - если только обычный и <see langword="null" /> - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно <see langword="null" />, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно <see langword="null" />, то направление не попадает в фильтр снятия заявок.</param>
      <param name="board">Торговая площадка. Если значение равно <see langword="null" />, то площадка не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно <see langword="null" />, то инструмент не попадает в фильтр снятия заявок.</param>
      <param name="securityType">Тип инструмента. Если значение равно <see langword="null" />, тип не используется.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.ChangePassword(System.String)">
      <summary>Сменить пароль.</summary>
      <param name="newPassword">Новый пароль.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetSecurity(StockSharp.Messages.SecurityId)">
      <summary>Получить инструмент по коду.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Инструмент стакана.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetSecurity(System.String,System.Func{StockSharp.BusinessEntities.Security,System.Boolean})">
      <summary>Получить инструмент по коду. Если инструмент не найден, то для создания инструмента вызывается <see cref="M:StockSharp.Algo.IEntityFactory.CreateSecurity(System.String)" />.</summary>
      <param name="id">Идентификатор инструмента.</param>
      <param name="changeSecurity">Обработчик, изменяющий инструмент. Возвращает <see langword="true" />, если инструмент был изменен, и необходимо вызвать <see cref="E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged" />.</param>
      <returns>Инструмент стакана.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetSecurityId(StockSharp.BusinessEntities.Security)">
      <summary>Получить <see cref="T:StockSharp.Messages.SecurityId" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Идентификатор инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.CreateSecurityId(System.String,System.String)">
      <summary>Сгенерировать <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</summary>
      <param name="secCode">Код инструента.</param>
      <param name="secClass">Класс инструмента.</param>
      <returns>
        <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetSecurityValue(StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1Fields)">
      <summary>Получить значение маркет-данных для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="field">Поле маркет-данных.</param>
      <returns>Значение поля. Если данных нет, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.GetLevel1Fields(StockSharp.BusinessEntities.Security)">
      <summary>Получить набор доступных полей <see cref="T:StockSharp.Messages.Level1Fields" />, для которых есть маркет-данные для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Набор доступных полей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Connector.ClearCache">
      <summary>Очистить кэш данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.DisposeManaged">
      <summary>Освободить занятые ресурсы. В частности, отключиться от торговой системы через <see cref="M:StockSharp.Algo.Connector.Disconnect" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Connector.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Connector.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.HeartbeatMessageAdapter">
      <summary>Адаптер сообщений, контролирующий соединение.</summary>
    </member>
    <member name="M:StockSharp.Algo.HeartbeatMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.HeartbeatMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер.</param>
    </member>
    <member name="M:StockSharp.Algo.HeartbeatMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.HeartbeatMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.HeartbeatMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.HeartbeatMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.ContinuousSecurity">
      <summary>Непрерывный инструмент (как правило, фьючерс), содержащий в себе инструменты, подверженные экспирации.</summary>
    </member>
    <member name="T:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList">
      <summary>Интерфейс, описывающий коллекцию внутренних инструментов <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.Item(System.DateTimeOffset)">
      <summary>Получить инструмент для заданного времени экспирации.</summary>
      <param name="time">Время экспирации.</param>
      <returns>Инструмент стакана.</returns>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.FirstSecurity">
      <summary>Получить первый по экспирации инструмент.</summary>
      <returns>Первый инструмент. Если <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" /> пустой, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.LastSecurity">
      <summary>Получить последний по экспирации инструмент.</summary>
      <returns>Последний инструмент. Если <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" /> пустой, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.GetNextSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Получить следующий инструмент.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Следующий инструмент. Если <paramref name="security" /> является последним инструментом, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.GetPrevSecurity(StockSharp.BusinessEntities.Security)">
      <summary>Получить предыдущий инструмент.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Предыдущий инструмент. Если <paramref name="security" /> является первым инструментом, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.GetActivityRange(StockSharp.BusinessEntities.Security)">
      <summary>Получить диапазон действия внутреннего инструмента.</summary>
      <param name="security">Внутренний инструмент.</param>
      <returns>Диапазон действия.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.ContinuousSecurity" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps">
      <summary>Инструменты и даты перехода, при наступлении которых происходит переход на следующий инструмент.</summary>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.InnerSecurities">
      <summary>Инструменты, из которых создана данная корзина.</summary>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.GetSecurity(System.DateTimeOffset)">
      <summary>Получить инструмент, который торгуется для указанного биржевого времени.</summary>
      <param name="marketTime">Биржевое время.</param>
      <returns>Инструмент. Если не существует инструмента для указанного времени, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.Offset(System.TimeSpan)">
      <summary>Сдвинуть экпирацию у внутренних инструментов <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" /> на размер, равный <paramref name="offset" />.</summary>
      <param name="offset">Размер сдвига экспирации.</param>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BasketBlackScholes">
      <summary>Портфельная модель расчета значений "греков" по формуле Блэка-Шоулза.</summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel">
      <summary>Модель расчета значений "греков" по формуле Блэка-Шоулза с учетом позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel.#ctor(StockSharp.Algo.Derivatives.BlackScholes,StockSharp.Algo.Positions.IPositionManager)">
      <summary>Создать <see cref="T:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel" />.</summary>
      <param name="model">Модель расчета значений "греков" по формуле Блэка-Шоулза.</param>
      <param name="positionManager">Менеджер позиции.</param>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel.Model">
      <summary>Модель расчета значений "греков" по формуле Блэка-Шоулза.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel.PositionManager">
      <summary>Менеджер позиции.</summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BasketBlackScholes.IInnerModelList">
      <summary>Интерфейс, описывающий коллекцию внутренних моделей <see cref="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModels" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.IInnerModelList.Item(StockSharp.BusinessEntities.Security)">
      <summary>Получить модель расчета значений "греков" по формуле Блэка-Шоулза для конкретного опциона.</summary>
      <param name="option">Опцион.</param>
      <returns>Модель. Если опцион не зарегистрирован, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.#ctor(StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Создать <see cref="T:StockSharp.Algo.Derivatives.BasketBlackScholes" />.</summary>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModels">
      <summary>Информация по опционам.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.UnderlyingAssetPosition">
      <summary>Позиция по базовому активу.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.Option">
      <summary>Опцион.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.UnderlyingAsset">
      <summary>Базовый актив.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.RoundDecimals">
      <summary>Количество знаков после запятой у вычисляемых значений. По-умолчанию равно -1, что означает не округлять значения.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Delta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать дельту опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Дельта опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Gamma(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать гамму опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Гамма опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Vega(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать вегу опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Вега опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Theta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать тету опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Тета опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Rho(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать ро опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Ро опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Premium(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать премию опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Премия опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.ImpliedVolatility(System.DateTimeOffset,System.Decimal)">
      <summary>Рассчитать подразумеваемую волатильность (Implied  Volatility).</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="premium">Премия опциона.</param>
      <returns>Подразумеваевая волатильность. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.ImpliedVolatility(System.DateTimeOffset)">
      <summary>Создать стакан волатильности.</summary>
      <param name="currentTime">Текущее время.</param>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BasketStrike">
      <summary>Виртуальный страйк, созданный из комбинации других страйков.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketStrike.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Derivatives.BasketStrike" />.</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketStrike.SecurityProvider">
      <summary>Поставщик информации об инструментах.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketStrike.DataProvider">
      <summary>Поставщик маркет-данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketStrike.UnderlyingAsset">
      <summary>Базовый актив.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketStrike.InnerSecurities">
      <summary>Инструменты, из которых создана данная корзина.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Получить отфильтрованные страйки.</summary>
      <param name="allStrikes">Все страйки.</param>
      <returns>Отфильтрованные страйки.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.OffsetBasketStrike">
      <summary>Виртуальный страйк, включающий в себя страйки заданной границы сдвига.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.OffsetBasketStrike.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,Ecng.ComponentModel.Range{System.Int32})">
      <summary>Создать <see cref="T:StockSharp.Algo.Derivatives.OffsetBasketStrike" />.</summary>
      <param name="underlyingSecurity">Базовый актив.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <param name="strikeOffset">Границы сдвига от центрального страйка (отрицательное значение задает сдвиг в опционы в деньгах, положительное - вне денег).</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.OffsetBasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Получить отфильтрованные страйки.</summary>
      <param name="allStrikes">Все страйки.</param>
      <returns>Отфильтрованные страйки.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.VolatilityBasketStrike">
      <summary>Виртуальный страйк, включающий в себя страйки заданной границы волатильности.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.VolatilityBasketStrike.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,Ecng.ComponentModel.Range{System.Decimal})">
      <summary>Создать <see cref="T:StockSharp.Algo.Derivatives.VolatilityBasketStrike" />.</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <param name="volatilityRange">Границы волатильности.</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.VolatilityBasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Получить отфильтрованные страйки.</summary>
      <param name="allStrikes">Все страйки.</param>
      <returns>Отфильтрованные страйки.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.Black">
      <summary>Модель расчета значений "греков" по формуле Блэка.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Black.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Создать <see cref="T:StockSharp.Algo.Derivatives.Black" />.</summary>
      <param name="option">Опцион.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.Black.Dividend">
      <summary>Размер дивиденда по акциям.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Black.Premium(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать премию опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Премия опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Black.Delta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать дельту опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Дельта опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Black.Gamma(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать гамму опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Гамма опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Black.Vega(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать вегу опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Вега опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Black.Theta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать тету опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Тета опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Black.Rho(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать ро опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Ро опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Black.D1(System.Decimal,System.Decimal,System.Double)">
      <summary>Рассчитать параметр d1 определения вероятности исполнения опциона.</summary>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <returns>Параметр d1.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BlackScholes">
      <summary>Модель расчета значений "греков" по формуле Блэка-Шоулза.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor(StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Derivatives.BlackScholes" />.</summary>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Создать <see cref="T:StockSharp.Algo.Derivatives.BlackScholes" />.</summary>
      <param name="option">Опцион.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.SecurityProvider">
      <summary>Поставщик информации об инструментах.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.DataProvider">
      <summary>Поставщик маркет-данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.Option">
      <summary>Опцион.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.RiskFree">
      <summary>Безрисковая процентная ставка.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.Dividend">
      <summary>Размер дивиденда по акциям.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.RoundDecimals">
      <summary>Количество знаков после запятой у вычисляемых значений. По-умолчанию равно -1, что означает не округлять значения.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset">
      <summary>Базовый актив.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation">
      <summary>Стандартное отклонение по-умолчанию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.GetExpirationTimeLine(System.DateTimeOffset)">
      <summary>Расчет времени до экспирации.</summary>
      <param name="currentTime">Текущее время.</param>
      <returns>Время, оставшееся до экспирации. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.GetAssetPrice(System.Nullable{System.Decimal})">
      <summary>Получить цену базового актива.</summary>
      <param name="assetPrice">Цена базового актива, если она задана.</param>
      <returns>Цена базового актива. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.OptionType">
      <summary>Тип опциона.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.TryRound(System.Nullable{System.Decimal})">
      <summary>Округлить до <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.RoundDecimals" />.</summary>
      <param name="value">Первоначальное значение.</param>
      <returns>Округленное значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Premium(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать премию опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Премия опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Delta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать дельту опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Дельта опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Gamma(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать гамму опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Гамма опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Vega(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать вегу опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Вега опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Theta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать тету опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Тета опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Rho(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать ро опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение. Если оно не указано, то используется <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.DefaultDeviation" />.</param>
      <param name="assetPrice">Цена базового актива. Если цена не указана, то получается цена последней сделки из <see cref="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset" />.</param>
      <returns>Ро опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.ImpliedVolatility(System.DateTimeOffset,System.Decimal)">
      <summary>Рассчитать подразумеваемую волатильность (Implied  Volatility).</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="premium">Премия опциона.</param>
      <returns>Подразумеваевая волатильность. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.D1(System.Decimal,System.Decimal,System.Double)">
      <summary>Рассчитать параметр d1 определения вероятности исполнения опциона.</summary>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <returns>Параметр d1.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.ImpliedVolatility(System.DateTimeOffset)">
      <summary>Создать стакан волатильности.</summary>
      <param name="currentTime">Текущее время.</param>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.DerivativesHelper">
      <summary>Вспомогательный класс для работы с производными финансовыми инструментами (деривативами).</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetUnderlyingAsset(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider)">
      <summary>Получить базовый актив по деривативу.</summary>
      <param name="derivative">Дериватив.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <returns>Базовый актив.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Decimal)">
      <summary>Отфильтровать опционы по страйку <see cref="P:StockSharp.BusinessEntities.Security.Strike" />.</summary>
      <param name="options">Опционы, которые необходимо отфильтровать.</param>
      <param name="strike">Цена страйка.</param>
      <returns>Отфильтрованные опционы.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.Messages.OptionTypes)">
      <summary>Отфильтровать опционы по типу <see cref="P:StockSharp.BusinessEntities.Security.OptionType" />.</summary>
      <param name="options">Опционы, которые необходимо отфильтровать.</param>
      <param name="type">Тип опциона.</param>
      <returns>Отфильтрованные опционы.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.FilterByUnderlying(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.Security)">
      <summary>Отфильтровать инструменты по базовому активу.</summary>
      <param name="securities">Инструменты, которые необходимо отфильтровать.</param>
      <param name="asset">Базовый актив.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Nullable{System.DateTimeOffset})">
      <summary>Отфильтровать инструменты по дате экспирации <see cref="P:StockSharp.BusinessEntities.Security.ExpiryDate" />.</summary>
      <param name="securities">Инструменты, которые необходимо отфильтровать.</param>
      <param name="expirationDate">Дата экспирации.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetDerivatives(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Nullable{System.DateTimeOffset})">
      <summary>Получить деривативы по базовому активу.</summary>
      <param name="asset">Базовый актив.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="expirationDate">Дата экспирации.</param>
      <returns>Список из деривативов.</returns>
      <remarks>Возвращает пустой список, если деривативов не найдено.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAsset(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider)">
      <summary>Получить базовый актив.</summary>
      <param name="derivative">Дериватив.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <returns>Базовый актив.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Invert(StockSharp.Messages.OptionTypes)">
      <summary>Поменять тип опциона на противоположное.</summary>
      <param name="type">Первоначальное значение.</param>
      <returns>Противоположное значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOppositeOption(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider)">
      <summary>Получить противоположный опцион (для Call получить Put, для Put получить Call).</summary>
      <param name="option">Опцион.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <returns>Противоположный опцион.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCall(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Decimal,System.DateTimeOffset)">
      <summary>Получить Call для базового фьючерса.</summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="strike">Страйк.</param>
      <param name="expirationDate">Дата экспирации опциона.</param>
      <returns>Опцион Call.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetPut(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Decimal,System.DateTimeOffset)">
      <summary>Получить Put для базового фьючерса.</summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="strike">Страйк.</param>
      <param name="expirationDate">Дата экспирации опциона.</param>
      <returns>Опцион Put.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOption(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Decimal,System.DateTimeOffset,StockSharp.Messages.OptionTypes)">
      <summary>Получить опцион для базового фьючерса.</summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="strike">Страйк.</param>
      <param name="expirationDate">Дата экспирации опционов.</param>
      <param name="optionType">Тип опциона.</param>
      <returns>Опцион.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCentralStrike(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,System.DateTimeOffset,StockSharp.Messages.OptionTypes)">
      <summary>Получить центральный страйк.</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <param name="expirationDate">Дата экспирации опционов.</param>
      <param name="optionType">Тип опциона.</param>
      <returns>Центральный страйк.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCentralStrike(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Получить центральный страйк.</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="allStrikes">Все страйки.</param>
      <returns>Центральный страйк. Если невозможно получить текущую рыночную цену актива, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetStrikeStep(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,System.Nullable{System.DateTimeOffset})">
      <summary>Получить размер шага страйка.</summary>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="expirationDate">Дата экспирации опционов (для указания конкретной серии).</param>
      <returns>Размер шага страйка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOutOfTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Получить опционы вне денег (OTM).</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <returns>Опционы вне денег.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOutOfTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Получить опционы вне денег (OTM).</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="allStrikes">Все страйки.</param>
      <returns>Опционы вне денег.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetInTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Получить опционы в деньгах (ITM).</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <returns>Опционы в деньгах.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetInTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Получить опционы в деньгах (ITM).</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="allStrikes">Все страйки.</param>
      <returns>Опционы в деньгах.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAtTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Получить опционы на деньгах (ATM).</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <returns>Опционы на деньгах.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAtTheMoney(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>Получить опционы на деньгах (ATM).</summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="allStrikes">Все страйки.</param>
      <returns>Опционы на деньгах.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetIntrinsicValue(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Получить внутреннюю стоимость опциона.</summary>
      <param name="option">Опцион.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <returns>Внутренняя стоимость. Если невозможно получить текущую рыночную цену актива, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetTimeValue(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider)">
      <summary>Получить временную стоимость опциона.</summary>
      <param name="option">Опцион.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <returns>Временная стоимость. Если невозможно получить текущую рыночную цену актива, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.IsExpired(StockSharp.BusinessEntities.Security,System.DateTimeOffset)">
      <summary>Проверить, закончил ли действие инструмент.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="currentTime">Текущее время.</param>
      <returns>
        <see langword="true" />, если инструмент закончил свое действие.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOptionInfo(System.String,StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Получить из названия опциона его информацию (базовый актив, страйк, дата экспирации и т.д.).</summary>
      <param name="optionName">Название опциона.</param>
      <param name="board">Информация о площадке.</param>
      <returns>Информация об опционе.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetFutureInfo(System.String,System.String,StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Получить из названия фьючерса его информацию (базовый актив, дата экспирации и т.д.).</summary>
      <param name="futureName">Название фьючерса.</param>
      <param name="optionCode">Код опциона.</param>
      <param name="board">Информация о площадке.</param>
      <returns>Информация о фьючерсе.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.ImpliedVolatility(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.ISecurityProvider,StockSharp.BusinessEntities.IMarketDataProvider,System.DateTimeOffset,System.Decimal,System.Decimal)">
      <summary>Создать стакан волатильности из обычного стакана.</summary>
      <param name="depth">Стакан, котировки которого будут переведены в котировки с волатильностью.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="dataProvider">Поставщик маркет-данных.</param>
      <param name="currentTime">Текущее время.</param>
      <param name="riskFree">Безрисковая процентная ставка.</param>
      <param name="dividend">Размер дивиденда по акциям.</param>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.ImpliedVolatility(StockSharp.BusinessEntities.MarketDepth,StockSharp.Algo.Derivatives.BlackScholes,System.DateTimeOffset)">
      <summary>Создать стакан волатильности из обычного стакана.</summary>
      <param name="depth">Стакан, котировки которого будут переведены в котировки с волатильностью.</param>
      <param name="model">Модель расчета значений "греков" по формуле Блэка-Шоулза.</param>
      <param name="currentTime">Текущее время.</param>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetExpirationTimeLine(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Получить период опциона до экспирации.</summary>
      <param name="expirationTime">Время экспирации опциона.</param>
      <param name="currentTime">Текущее время.</param>
      <returns>Период опциона до экспирации. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetExpirationTimeLine(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)">
      <summary>Получить период опциона до экспирации.</summary>
      <param name="expirationTime">Время экспирации опциона.</param>
      <param name="currentTime">Текущее время.</param>
      <param name="timeLine">Длина общего периода.</param>
      <returns>Период опциона до экспирации. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.ExpRate(System.Decimal,System.Double)">
      <summary>Рассчитать временную экспоненту.</summary>
      <param name="riskFree">Безрисковая процентная ставка.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <returns>Временная экспонента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.D1(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double)">
      <summary>Рассчитать параметр d1 определения вероятности исполнения опциона.</summary>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="strike">Цена страйка.</param>
      <param name="riskFree">Безрисковая процентная ставка.</param>
      <param name="dividend">Размер дивиденда по акциям.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <returns>Параметр d1 определения вероятности исполнения опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.D2(System.Double,System.Decimal,System.Double)">
      <summary>Рассчитать параметр d2 определения вероятности исполнения опциона.</summary>
      <param name="d1">Параметр d1 определения вероятности исполнения опциона.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <returns>Параметр d2 определения вероятности исполнения опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Premium(StockSharp.Messages.OptionTypes,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double,System.Double)">
      <summary>Рассчитать премию опциона.</summary>
      <param name="optionType">Тип опциона.</param>
      <param name="strike">Цена страйка.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="riskFree">Безрисковая процентная ставка.</param>
      <param name="dividend">Размер дивиденда по акциям.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <param name="d1">Параметр d1 определения вероятности исполнения опциона.</param>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Delta(StockSharp.Messages.OptionTypes,System.Decimal,System.Double)">
      <summary>Рассчитать дельту опциона.</summary>
      <param name="optionType">Тип опциона.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="d1">Параметр d1 определения вероятности исполнения опциона.</param>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Gamma(System.Decimal,System.Decimal,System.Double,System.Double)">
      <summary>Рассчитать гамму опциона.</summary>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <param name="d1">Параметр d1 определения вероятности исполнения опциона.</param>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Vega(System.Decimal,System.Double,System.Double)">
      <summary>Рассчитать вегу опциона.</summary>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <param name="d1">Параметр d1 определения вероятности исполнения опциона.</param>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Theta(StockSharp.Messages.OptionTypes,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double,System.Double,System.Decimal)">
      <summary>Рассчитать тету опциона.</summary>
      <param name="optionType">Тип опциона.</param>
      <param name="strike">Цена страйка.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="riskFree">Безрисковая процентная ставка.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <param name="d1">Параметр d1 определения вероятности исполнения опциона.</param>
      <param name="daysInYear">Дней в году.</param>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Rho(StockSharp.Messages.OptionTypes,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Double,System.Double)">
      <summary>Рассчитать ро опциона.</summary>
      <param name="optionType">Тип опциона.</param>
      <param name="strike">Цена страйка.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <param name="riskFree">Безрисковая процентная ставка.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="timeToExp">Период опциона до экспирации.</param>
      <param name="d1">Параметр d1 определения вероятности исполнения опциона.</param>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.ImpliedVolatility(System.Decimal,System.Func{System.Decimal,System.Nullable{System.Decimal}})">
      <summary>Рассчитать подразумеваемую волатильность (Implied  Volatility).</summary>
      <param name="premium">Премия опциона.</param>
      <param name="getPremium">Рассчитать премию по волатильности.</param>
      <returns>Подразумеваевая волатильность. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.IBlackScholes">
      <summary>Интерфейс модели расчета значений "греков" по формуле Блэка-Шоулза.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.Option">
      <summary>Опцион.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.RiskFree">
      <summary>Безрисковая процентная ставка.</summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.Dividend">
      <summary>Размер дивиденда по акциям.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Premium(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать премию опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <returns>Премия опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Delta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать дельту опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <returns>Дельта опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Gamma(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать гамму опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <returns>Гамма опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Vega(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать вегу опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <returns>Вега опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Theta(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать тету опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <returns>Тета опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Rho(System.DateTimeOffset,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Рассчитать ро опциона.</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="deviation">Стандартное отклонение.</param>
      <param name="assetPrice">Цена базового актива.</param>
      <returns>Ро опциона. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.ImpliedVolatility(System.DateTimeOffset,System.Decimal)">
      <summary>Рассчитать подразумеваемую волатильность (Implied  Volatility).</summary>
      <param name="currentTime">Текущее время.</param>
      <param name="premium">Премия опциона.</param>
      <returns>Подразумеваевая волатильность. Если значение равно <see langword="null" />, то расчет значения в данный момент невозможен.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.Synthetic">
      <summary>Построитель синтетических позиций.</summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.#ctor(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ISecurityProvider)">
      <summary>Создать <see cref="T:StockSharp.Algo.Derivatives.Synthetic" />.</summary>
      <param name="security">Инструмент (опцион или базовый актив).</param>
      <param name="provider">Поставщик информации об инструментах.</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy">
      <summary>Получить синтетическую позицию для покупки опциона.</summary>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell">
      <summary>Получить синтетическую позицию для продажи опциона.</summary>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Position(StockSharp.Messages.Sides)">
      <summary>Получить синтетическую позицию для опциона.</summary>
      <param name="side">Направление основной позиции.</param>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal)">
      <summary>Получить опционную позицию для синтетической покупки базового актива.</summary>
      <param name="strike">Страйк.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal,System.DateTimeOffset)">
      <summary>Получить опционную позицию для синтетической покупки базового актива.</summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal)">
      <summary>Получить опционную позицию для синтетической продажи базового актива.</summary>
      <param name="strike">Страйк.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal,System.DateTimeOffset)">
      <summary>Получить опционную позицию для синтетической продажи базового актива.</summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Position(System.Decimal,System.DateTimeOffset,StockSharp.Messages.Sides)">
      <summary>Получить опционную позицию для синтетического базового актива.</summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <param name="side">Направление основной позиции.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="T:StockSharp.Algo.Latency.LatencyMessageAdapter">
      <summary>Адаптер сообщений, рассчитывающий сетевые задержки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.Latency.LatencyMessageAdapter" />.</summary>
      <param name="innerAdapter">Адаптер, в который будут перенаправляться сообщения.</param>
    </member>
    <member name="P:StockSharp.Algo.Latency.LatencyMessageAdapter.LatencyManager">
      <summary>Менеджер расчета задержки регистрации заявок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Latency.LatencyMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Latency.ILatencyManager">
      <summary>Интерфейс менеджера расчета задержки регистрации заявок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.ILatencyManager.Reset">
      <summary>Обнулить расчеты.</summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.ILatencyManager.LatencyRegistration">
      <summary>Суммарное значение задержки регистрации по всем заявкам.</summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.ILatencyManager.LatencyCancellation">
      <summary>Суммарное значение задержки отмены по всем заявкам.</summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.ILatencyManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать сообщение для вычисления задержки транзакции. Принимаются сообщения типа <see cref="T:StockSharp.Messages.OrderRegisterMessage" />, <see cref="T:StockSharp.Messages.OrderReplaceMessage" />, <see cref="T:StockSharp.Messages.OrderCancelMessage" /> и <see cref="T:StockSharp.Messages.ExecutionMessage" />.</summary>
      <param name="message">Сообщение.</param>
      <returns>Задержка транзакции. В случае невозможности вычислить задержку будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Latency.LatencyManager">
      <summary>Менеджер расчета задержки регистрации заявок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Latency.LatencyManager" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.LatencyManager.LatencyRegistration">
      <summary>Суммарное значение задержки регистрации по всем заявкам.</summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.LatencyManager.LatencyCancellation">
      <summary>Суммарное значение задержки отмены по всем заявкам.</summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.ProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать сообщение для вычисления задержки транзакции. Принимаются сообщения типа <see cref="T:StockSharp.Messages.OrderRegisterMessage" />, <see cref="T:StockSharp.Messages.OrderReplaceMessage" />, <see cref="T:StockSharp.Messages.OrderPairReplaceMessage" />, <see cref="T:StockSharp.Messages.OrderCancelMessage" /> и <see cref="T:StockSharp.Messages.ExecutionMessage" />.</summary>
      <param name="message">Сообщение.</param>
      <returns>Задержка транзакции.</returns>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.Reset">
      <summary>Обнулить расчеты.</summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.AuthorizationModes">
      <summary>Виды авторизаций.</summary>
    </member>
    <member name="F:StockSharp.Algo.AuthorizationModes.Anonymous">
      <summary>Анонимный.</summary>
    </member>
    <member name="F:StockSharp.Algo.AuthorizationModes.Windows">
      <summary>Windows авторизация.</summary>
    </member>
    <member name="F:StockSharp.Algo.AuthorizationModes.Custom">
      <summary>Пользователь.</summary>
    </member>
    <member name="F:StockSharp.Algo.AuthorizationModes.Community">
      <summary>StockSharp.</summary>
    </member>
    <member name="T:StockSharp.Algo.IMarketRuleContainer">
      <summary>Интерфейс, описывающий контейнер правил.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRuleContainer.ProcessState">
      <summary>Состояние работы.</summary>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleContainer.ActivateRule(StockSharp.Algo.IMarketRule,System.Func{System.Boolean})">
      <summary>Активировать правило.</summary>
      <param name="rule">Правило.</param>
      <param name="process">Обработчик, возвращающий <see langword="true" />, если правило закончило свою работу, иначе - <see langword="false" />.</param>
    </member>
    <member name="P:StockSharp.Algo.IMarketRuleContainer.IsRulesSuspended">
      <summary>Приостановлено ли исполнение правил.</summary>
      <remarks>Приостановка правил происходит через метод <see cref="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules" />.</remarks>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules">
      <summary>Приостановить исполнение правил до следующего восстановления через метод <see cref="M:StockSharp.Algo.IMarketRuleContainer.ResumeRules" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleContainer.ResumeRules">
      <summary>Восстановить исполнение правил, остановленное через метод <see cref="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRuleContainer.Rules">
      <summary>Зарегистрированные правила.</summary>
    </member>
    <member name="T:StockSharp.Algo.IMarketRuleList">
      <summary>Интерфейс, описывающий список правил.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRuleList.Tokens">
      <summary>Получить все активные токены правил.</summary>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleList.GetRulesByToken(System.Object)">
      <summary>Получить все правила, ассоциированные с токеном.</summary>
      <param name="token">Токен правила.</param>
      <returns>Все правила, ассоциированные с токеном.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleList.RemoveRulesByToken(System.Object,StockSharp.Algo.IMarketRule)">
      <summary>Удалить все правила, у которых <see cref="P:StockSharp.Algo.IMarketRule.Token" /> равен <paramref name="token" />.</summary>
      <param name="token">Токен правила.</param>
      <param name="currentRule">Текущее правило, которое инициировало удаление. Если оно было передано, то оно не будет удалено.</param>
    </member>
    <member name="T:StockSharp.Algo.MarketRuleList">
      <summary>Список правил.</summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleList.#ctor(StockSharp.Algo.IMarketRuleContainer)">
      <summary>Создать <see cref="T:StockSharp.Algo.MarketRuleList" />.</summary>
      <param name="container">Контейнер правил.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleList.OnAdded(StockSharp.Algo.IMarketRule)">
      <summary>Добавление элемента.</summary>
      <param name="item">Элемент.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleList.OnRemoving(StockSharp.Algo.IMarketRule)">
      <summary>Удаление элемента.</summary>
      <param name="item">Элемент.</param>
      <returns>Признак возможности действия.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleList.OnRemoved(StockSharp.Algo.IMarketRule)">
      <summary>Удаление элемента.</summary>
      <param name="item">Элемент.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleList.OnClearing">
      <summary>Очищение элементов.</summary>
      <returns>Признак возможности действия.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleList.GetRulesByToken(System.Object)">
      <summary>Получить все правила, ассоциированные с токеном.</summary>
      <param name="token">Токен правила.</param>
      <returns>Все правила, ассоциированные с токеном.</returns>
    </member>
    <member name="T:StockSharp.Algo.IndexSecurity">
      <summary>Индекс, построенный из инструментов. Например, для задание спреда при арбитраже или парном трейдинге.</summary>
    </member>
    <member name="P:StockSharp.Algo.IndexSecurity.IgnoreErrors">
      <summary>Игнорировать ошибки расчета.</summary>
    </member>
    <member name="P:StockSharp.Algo.IndexSecurity.CalculateExtended">
      <summary>Вычислять расширенную информацию.</summary>
    </member>
    <member name="M:StockSharp.Algo.IndexSecurity.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.IndexSecurity" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.IndexSecurity.Calculate(System.Decimal[])">
      <summary>Вычислить значение корзины.</summary>
      <param name="prices">Цены составных инструментов корзины <see cref="P:StockSharp.BusinessEntities.BasketSecurity.InnerSecurities" />.</param>
      <returns>Значение корзины.</returns>
    </member>
    <member name="T:StockSharp.Algo.WeightedIndexSecurity">
      <summary>Корзина инструментов, основанная на весах <see cref="P:StockSharp.Algo.WeightedIndexSecurity.Weights" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.WeightedIndexSecurity.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.WeightedIndexSecurity" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.WeightedIndexSecurity.Weights">
      <summary>Инструменты и их весовые коэффициенты в корзине.</summary>
    </member>
    <member name="P:StockSharp.Algo.WeightedIndexSecurity.InnerSecurities">
      <summary>Инструменты, из которых создана данная корзина.</summary>
    </member>
    <member name="M:StockSharp.Algo.WeightedIndexSecurity.Calculate(System.Decimal[])">
      <summary>Вычислить значение корзины.</summary>
      <param name="prices">Цены составных инструментов корзины <see cref="P:StockSharp.BusinessEntities.BasketSecurity.InnerSecurities" />.</param>
      <returns>Значение корзины.</returns>
    </member>
    <member name="M:StockSharp.Algo.WeightedIndexSecurity.Clone">
      <summary>Создать копию <see cref="T:StockSharp.BusinessEntities.Security" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.OrderLogCancelReasons">
      <summary>Причины отмены заявок в логе заявок.</summary>
    </member>
    <member name="F:StockSharp.Algo.OrderLogCancelReasons.ReRegistered">
      <summary>Перерегистрация заявки.</summary>
    </member>
    <member name="F:StockSharp.Algo.OrderLogCancelReasons.Canceled">
      <summary>Отменить заявку.</summary>
    </member>
    <member name="F:StockSharp.Algo.OrderLogCancelReasons.GroupCanceled">
      <summary>Групповая отмена заявок.</summary>
    </member>
    <member name="F:StockSharp.Algo.OrderLogCancelReasons.CrossTrade">
      <summary>Признак удаления остатка заявки по причине кросс-сделки.</summary>
    </member>
    <member name="T:StockSharp.Algo.OrderLogHelper">
      <summary>Построение стакана по логу заявок.</summary>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsOrderLogRegistered(StockSharp.Messages.ExecutionMessage)">
      <summary>Проверить, содержит ли строчка регистрацию заявки.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>
        <see langword="true" />, если строчка содержит регистрацию заявки, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsRegistered(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>Проверить, содержит ли строчка регистрацию заявки.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>
        <see langword="true" />, если строчка содержит регистрацию заявки, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsOrderLogCanceled(StockSharp.Messages.ExecutionMessage)">
      <summary>Проверить, содержит ли строчка отменену заявки.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>
        <see langword="true" />, если строчка содержит отменену заявки, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsCanceled(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>Проверить, содержит ли строчка отменену заявки.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>
        <see langword="true" />, если строчка содержит отменену заявки, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsOrderLogMatched(StockSharp.Messages.ExecutionMessage)">
      <summary>Проверить, содержит ли строчка исполнение заявки.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>
        <see langword="true" />, если строчка содержит исполнение заявки, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsMatched(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>Проверить, содержит ли строчка исполнение заявки.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>
        <see langword="true" />, если строчка содержит исполнение заявки, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.GetOrderLogCancelReason(StockSharp.Messages.ExecutionMessage)">
      <summary>Получить причину отмены заявки в логе заявок.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>Причина отмены заявки в логе заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.GetCancelReason(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>Получить причину отмены заявки в логе заявок.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>Причина отмены заявки в логе заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.ToMarketDepths(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderLogItem},StockSharp.Messages.IOrderLogMarketDepthBuilder,System.TimeSpan,System.Int32)">
      <summary>Построить стаканы из лога заявок.</summary>
      <param name="items">Строчки лога заявок.</param>
      <param name="builder">Построитель стакана.</param>
      <param name="interval">Интервал генерации стакана. По-умолчанаю равен <see cref="F:System.TimeSpan.Zero" />, что означает генерацию стаканов при каждой новой строчке лога заявок.</param>
      <param name="maxDepth">Максимальная глубина стакана. По-умолчанию равно <see cref="F:System.Int32.MaxValue" />, что означает бесконечную глубину.</param>
      <returns>Стаканы.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.ToMarketDepths(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage},StockSharp.Messages.IOrderLogMarketDepthBuilder,System.TimeSpan,System.Int32)">
      <summary>Построить стаканы из лога заявок.</summary>
      <param name="items">Строчки лога заявок.</param>
      <param name="builder">Построитель стакана.</param>
      <param name="interval">Интервал генерации стакана. По-умолчанаю равен <see cref="F:System.TimeSpan.Zero" />, что означает генерацию стаканов при каждой новой строчке лога заявок.</param>
      <param name="maxDepth">Максимальная глубина стакана. По-умолчанию равно <see cref="F:System.Int32.MaxValue" />, что означает бесконечную глубину.</param>
      <returns>Стаканы.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.ToTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>Построить тиковые сделки из лога заявок.</summary>
      <param name="items">Строчки лога заявок.</param>
      <returns>Тиковые сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.ToTicks(System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
      <summary>Построить тиковые сделки из лога заявок.</summary>
      <param name="items">Строчки лога заявок.</param>
      <returns>Тиковые сделки.</returns>
    </member>
    <member name="T:StockSharp.Algo.MarketTimer">
      <summary>Таймер, основанный на времени торговой системы.</summary>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.#ctor(StockSharp.BusinessEntities.IConnector,System.Action)">
      <summary>Создать <see cref="T:StockSharp.Algo.MarketTimer" />.</summary>
      <param name="connector">Подключение к торговой системе, из которого будет использоваться событие <see cref="E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged" />.</param>
      <param name="activated">Обработчик таймера.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.Interval(System.TimeSpan)">
      <summary>Установить интервал.</summary>
      <param name="interval">Интервал таймера. Если устанавливается значение <see cref="F:System.TimeSpan.Zero" />, то таймер перестает быть периодичным.</param>
      <returns>Таймер.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.Start">
      <summary>Запустить таймер.</summary>
      <returns>Таймер.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.Stop">
      <summary>Остановить таймер.</summary>
      <returns>Таймер.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IOrderStatisticParameter">
      <summary>Интерфейс, описывающий параметр статистики, рассчитывающийся на основе заявков.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.New(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию о новой заявке.</summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.Changed(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию об изменившейся заявке.</summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.RegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>Добавить в параметр информацию об ошибке регистрации заявки.</summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.CancelFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>Добавить в параметр информацию об ошибке отмены заявки.</summary>
      <param name="fail">Ошибка отмены заявки.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1">
      <summary>Базовый параметр статистики, рассчитывающийся на основе заявков.</summary>
      <typeparam name="TValue">Тип значения параметра.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.New(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию о новой заявке.</summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.Changed(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию об изменившейся заявке.</summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.RegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>Добавить в параметр информацию об ошибке регистрации заявки.</summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.CancelFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>Добавить в параметр информацию об ошибке отмены заявки.</summary>
      <param name="fail">Ошибка отмены заявки.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxLatencyRegistrationParameter">
      <summary>Максимальное значение задержки регистрации заявки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxLatencyRegistrationParameter.New(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию о новой заявке.</summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxLatencyCancellationParameter">
      <summary>Максимальное значение задержки отмены заявки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxLatencyCancellationParameter.Changed(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию об изменившейся заявке.</summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter">
      <summary>Минимальное значение задержки регистрации заявки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.New(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию о новой заявке.</summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MinLatencyCancellationParameter">
      <summary>Минимальное значение задержки отмены заявки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Changed(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию об изменившейся заявке.</summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.OrderCountParameter">
      <summary>Общее количество заявок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.OrderCountParameter.New(StockSharp.BusinessEntities.Order)">
      <summary>Добавить в параметр информацию о новой заявке.</summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IPnLStatisticParameter">
      <summary>Интерфейс, описывающий параметр статистики, рассчитывающийся на основе значение прибыли-убытка (максимальная просадка, коэффициент Шарпа и т.д.).</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IPnLStatisticParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новые данные.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxProfitParameter">
      <summary>Максимальная значение прибыли за весь период.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxProfitParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новые данные.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxDrawdownParameter">
      <summary>Максимальная абсолютная просадка за весь период.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новые данные.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter">
      <summary>Максимальная относительная просадка эквити за весь период.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новые данные.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.ReturnParameter">
      <summary>Относительная прибыль за весь отрезок времени.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новые данные.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.RecoveryFactorParameter">
      <summary>Коэффициент восстановления (чистая прибыль / максимальная просадка).</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новые данные.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.NetProfitParameter">
      <summary>Чистая прибыль за весь отрезок времени.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новые данные.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IPositionStatisticParameter">
      <summary>Интерфейс, описывающий параметр статистики, рассчитывающийся на основе позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IPositionStatisticParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новое значение позиции.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="position">Новое значение позиции.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxLongPositionParameter">
      <summary>Максимальный размер длинной позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxLongPositionParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новое значение позиции.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="position">Новое значение позиции.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxShortPositionParameter">
      <summary>Максимальный размер короткой позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxShortPositionParameter.Add(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить в параметр новое значение позиции.</summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="position">Новое значение позиции.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IStatisticParameter">
      <summary>Интерфейс, описывающий параметр статистики.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Name">
      <summary>Название параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Value">
      <summary>Текущее значение параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.DisplayName">
      <summary>Отображаемое название параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Description">
      <summary>Описание параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Category">
      <summary>Категория.</summary>
    </member>
    <member name="E:StockSharp.Algo.Statistics.IStatisticParameter.ValueChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Statistics.IStatisticParameter.Value" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IStatisticParameter.Reset">
      <summary>Сбросить значение параметра.</summary>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IStatisticParameter`1">
      <summary>Интерфейс, описывающий параметр статистики.</summary>
      <typeparam name="TValue">Тип значения параметра.</typeparam>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter`1.Value">
      <summary>Текущее значение параметра.</summary>
    </member>
    <member name="T:StockSharp.Algo.Statistics.BaseStatisticParameter`1">
      <summary>Базовый параметр статистики.</summary>
      <typeparam name="TValue">Тип значения параметра.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Statistics.BaseStatisticParameter`1" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Name">
      <summary>Название параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.DisplayName">
      <summary>Отображаемое название параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Description">
      <summary>Описание параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Category">
      <summary>Категория.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Value">
      <summary>Текущее значение параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.StockSharp#Algo#Statistics#IStatisticParameter#Value">
      <summary>Текущее значение параметра.</summary>
    </member>
    <member name="E:StockSharp.Algo.Statistics.BaseStatisticParameter`1.ValueChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Value" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Reset">
      <summary>Сбросить значение параметра.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.RaiseValueChanged">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Statistics.BaseStatisticParameter`1.ValueChanged" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.ITradeStatisticParameter">
      <summary>Интерфейс, описывающий параметр статистики, рассчитывающийся на основе сделки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.ITradeStatisticParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить в параметр информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.WinningTradesParameter">
      <summary>Количество выигранных сделок (прибыль которых больше 0).</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.WinningTradesParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить в параметр информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.LossingTradesParameter">
      <summary>Количество проигранных сделок и с нулевой прибылью (прибыль которых меньше равна 0).</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.LossingTradesParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить в параметр информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.TradeCountParameter">
      <summary>Общее количество сделок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.TradeCountParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить в параметр информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.RoundtripCountParameter">
      <summary>Общее количество закрывающих сделок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.RoundtripCountParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить в параметр информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.AverageTradeParameter">
      <summary>Средняя величина прибыли сделки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить в параметр информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.AverageWinTradeParameter">
      <summary>Средняя выигрышная сделка.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить в параметр информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.AverageLossTradeParameter">
      <summary>Средняя проигрышная сделка.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Add(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить в параметр информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметра статистики.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.StatisticManager">
      <summary>Менеджер статистики.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Statistics.StatisticManager" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.StatisticManager.Parameters">
      <summary>Вычисляемые параметры.</summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddPnL(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить новое значение прибыли-убытка.</summary>
      <param name="time">Время изменения <paramref name="pnl" />.</param>
      <param name="pnl">Новое значение прибыли-убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddPosition(System.DateTimeOffset,System.Decimal)">
      <summary>Добавить новое значение позиции.</summary>
      <param name="time">Время изменения <paramref name="position" />.</param>
      <param name="position">Новое значение позиции.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddMyTrade(StockSharp.Algo.PnL.PnLInfo)">
      <summary>Добавить информацию о новой сделке.</summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>Добавить новую заявку.</summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddChangedOrder(StockSharp.BusinessEntities.Order)">
      <summary>Добавить измененную заявку.</summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddRegisterFailedOrder(StockSharp.BusinessEntities.OrderFail)">
      <summary>Добавить ошибку регистрации заявки.</summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddFailedOrderCancel(StockSharp.BusinessEntities.OrderFail)">
      <summary>Добавить ошибку отмены заявки.</summary>
      <param name="fail">Ошибка заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.Reset">
      <summary>Очистить данные по эквити.</summary>
    </member>
    <member name="T:StockSharp.Algo.IEntityFactory">
      <summary>Интерфейс фабрики бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).</summary>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateSecurity(System.String)">
      <summary>Создать инструмент по идентификатору.</summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Созданный инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)">
      <summary>Создать портфель по номеру счета.</summary>
      <param name="name">Номер счета.</param>
      <returns>Созданный портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>Создать позицию.</summary>
      <param name="portfolio">Портфель.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Созданная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateTrade(StockSharp.BusinessEntities.Security,System.Nullable{System.Int64},System.String)">
      <summary>Создать тиковую сделку по ее идентификатору.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="id">Идентификатор сделки (равно <see langword="null" />, если используется строковый идентификатор).</param>
      <param name="stringId">Идентификатор сделки (в виде строки, если электронная площадка не использует числовое представление идентификатора сделки).</param>
      <returns>Созданная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateOrder(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.OrderTypes},System.Int64)">
      <summary>Создать заявку по идентификатору транзакции.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="type">Тип заявки.</param>
      <param name="transactionId">Идентификатор транзакции регистрации заявки.</param>
      <returns>Созданная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateOrderFail(StockSharp.BusinessEntities.Order,System.Exception)">
      <summary>Создать описание ошибки для заявки.</summary>
      <param name="order">Заявка.</param>
      <param name="error">Системное описание ошибки.</param>
      <returns>Созданное описание ошибки.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateMyTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>Создать собственную сделку.</summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Созданная собственная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Создать стакан для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Созданный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateOrderLogItem(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>Создать строчку лога заявок.</summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Строчка лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateNews">
      <summary>Создать новость.</summary>
      <returns>Новости.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateExchange(System.String)">
      <summary>Создать биржу.</summary>
      <param name="code">
        <see cref="P:StockSharp.BusinessEntities.Exchange.Name" /> значение.</param>
      <returns>Биржа.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateBoard(System.String,StockSharp.BusinessEntities.Exchange)">
      <summary>Создать биржу.</summary>
      <param name="code">
        <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Code" /> значение.</param>
      <param name="exchange">
        <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Exchange" /> значение.</param>
      <returns>Биржа.</returns>
    </member>
    <member name="T:StockSharp.Algo.EntityFactory">
      <summary>Фабрика бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).</summary>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.EntityFactory" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateSecurity(System.String)">
      <summary>Создать инструмент по идентификатору.</summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Созданный инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreatePortfolio(System.String)">
      <summary>Создать портфель по номеру счета.</summary>
      <param name="name">Номер счета.</param>
      <returns>Созданный портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>Создать позицию.</summary>
      <param name="portfolio">Портфель.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Созданная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateTrade(StockSharp.BusinessEntities.Security,System.Nullable{System.Int64},System.String)">
      <summary>Создать тиковую сделку по ее идентификатору.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="id">Идентификатор сделки (равно <see langword="null" />, если используется строковый идентификатор).</param>
      <param name="stringId">Идентификатор сделки (в виде строки, если электронная площадка не использует числовое представление идентификатора сделки).</param>
      <returns>Созданная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateOrder(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.OrderTypes},System.Int64)">
      <summary>Создать заявку по идентификатору транзакции.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="type">Тип заявки.</param>
      <param name="transactionId">Идентификатор транзакции регистрации заявки.</param>
      <returns>Созданная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateOrderFail(StockSharp.BusinessEntities.Order,System.Exception)">
      <summary>Создать описание ошибки для заявки.</summary>
      <param name="order">Заявка.</param>
      <param name="error">Системное описание ошибки.</param>
      <returns>Созданное описание ошибки.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateMyTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>Создать собственную сделку.</summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Созданная собственная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Создать стакан для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Созданный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateOrderLogItem(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>Создать строчку лога заявок.</summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Строчка лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateNews">
      <summary>Создать новость.</summary>
      <returns>Новости.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateExchange(System.String)">
      <summary>Создать биржу.</summary>
      <param name="code">
        <see cref="P:StockSharp.BusinessEntities.Exchange.Name" /> значение.</param>
      <returns>Биржа.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateBoard(System.String,StockSharp.BusinessEntities.Exchange)">
      <summary>Создать биржу.</summary>
      <param name="code">
        <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Code" /> значение.</param>
      <param name="exchange">
        <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Exchange" /> значение.</param>
      <returns>Биржа.</returns>
    </member>
    <member name="T:StockSharp.Algo.MarketPriceTypes">
      <summary>Типы рыночных цен.</summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Opposite">
      <summary>Встречная цена (для быстрого закрытия позы).</summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Following">
      <summary>Попутная цена (для котирования на краю спреда).</summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Middle">
      <summary>Середина спреда.</summary>
    </member>
    <member name="T:StockSharp.Algo.SecurityIdGenerator">
      <summary>Генератор идентификаторов инструментов <see cref="P:StockSharp.BusinessEntities.Security.Id" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.SecurityIdGenerator" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.SecurityIdGenerator.Delimiter">
      <summary>Разделитель между кодом и классом инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.GenerateId(System.String,System.String)">
      <summary>Сгенерировать <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</summary>
      <param name="secCode">Код инструента.</param>
      <param name="boardCode">Код площадки.</param>
      <returns>
        <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.GenerateId(System.String,StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Сгенерировать <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</summary>
      <param name="secCode">Код инструента.</param>
      <param name="board">Площадка инструмента.</param>
      <returns>
        <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.Split(System.String,System.Boolean)">
      <summary>Получить коды инструмента и площадки по идентификатору инструмента.</summary>
      <param name="securityId">Идентификатор инструмента <see cref="P:StockSharp.BusinessEntities.Security.Id" />.</param>
      <param name="nullIfInvalid">Вернуть <see langword="null" /> в случае неправильного значения <paramref name="securityId" />.</param>
      <returns>Код инструмента <see cref="P:StockSharp.Messages.SecurityId.SecurityCode" /> и код площадки <see cref="P:StockSharp.Messages.SecurityId.BoardCode" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy">
      <summary>Базовая аналитическая стратегия.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.From">
      <summary>Начальная дата.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.To">
      <summary>Дата окончания.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.StorateRegistry">
      <summary>Хранилище маркет-данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.ProcessCancelActiveOrders">
      <summary>Отменить все активные заявки (стоп и обычные).</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.CurrentTime">
      <summary>Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.Chart">
      <summary>График.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.Grid">
      <summary>Таблица.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.StorageFormat">
      <summary>Формат данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.OnStarted">
      <summary>Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.BaseAnalyticsStrategy.OnAnalyze">
      <summary>Анализировать.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy">
      <summary>Аналитическая стратегия, расчитывающая распределение наибольшего объема по часам.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.TimeFrame">
      <summary>Тайм-фрейм.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.DailyHighestVolumeStrategy.OnAnalyze">
      <summary>Анализировать.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Analytics.IAnalyticsGridColumn">
      <summary>Интерфейс для работы с колонкой таблицы.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.IAnalyticsGridColumn.Width">
      <summary>Ширина колонки.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid">
      <summary>Интерфейс для работы с таблицей.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid.ClearColumns">
      <summary>Удалить все колонки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid.AddColumn(System.String,System.String)">
      <summary>Добавить новую колонку.</summary>
      <param name="fieldName">Название поля.</param>
      <param name="header">Текст заголовка.</param>
      <returns>Новая колонка.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid.ItemsSource">
      <summary>Источник данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.IAnalyticsGrid.SetSort(StockSharp.Algo.Strategies.Analytics.IAnalyticsGridColumn,System.ComponentModel.ListSortDirection)">
      <summary>Установить сортировку.</summary>
      <param name="column">Колонка.</param>
      <param name="direction">Направление.</param>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy">
      <summary>Аналитическая стратегия, расчитывающая распределение объема по ценовым уровням.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.TimeFrame">
      <summary>Тайм-фрейм.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Analytics.PriceVolumeDistributionStrategy.OnAnalyze">
      <summary>Анализировать.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BasketStrategyFinishModes">
      <summary>Условия окончания работы дочерних стратегий.</summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First">
      <summary>Если закончилась хотя бы одна стратегия.</summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.All">
      <summary>Если закончились все стратегии.</summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.None">
      <summary>Дочерние стратегии никак не зависят друг на друга.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BasketStrategy">
      <summary>Пакетная стратегия, содержащая в себе дочерние стратегии, которые влияют друг на друга своим исполнением.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.#ctor(StockSharp.Algo.Strategies.BasketStrategyFinishModes)">
      <summary>Создать стратегию.</summary>
      <param name="finishMode">Условие окончания работы дочерних стратегий.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode">
      <summary>Условие окончания работы дочерних стратегий.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FirstFinishStrategy">
      <summary>Первая остановившаяся дочерняя стратегия. Свойство заполняется при <see cref="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode" /> равным <see cref="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.OnStarted">
      <summary>Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IStrategyChildStrategyList">
      <summary>Коллекция дочерних стратегий.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport">
      <summary>Генератор отчета по эквити стратегии в формате csv.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport" />.</summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате csv.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport" />.</summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате csv.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport.Generate">
      <summary>Сгенерировать отчет.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport">
      <summary>Генератор отчета для стратегии в формате Excel.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport" />.</summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport" />.</summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String,System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport" />.</summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
      <param name="template">Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName" />.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Template">
      <summary>Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName" /> и дозаполнен листами Strategy, Orders и Trades.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.ExcelVersion">
      <summary>Версия Excel-я. Влияет на максимальное количество строчек. По-умолчанию установлено значение 2007.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.IncludeOrders">
      <summary>Добавлять в отчет заявки. По-умолчанию заявки добавляются.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Decimals">
      <summary>Количество знаков после запятой. По-умолчанию равно 2.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Generate">
      <summary>Сгенерировать отчет.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Reporting.StrategyReport">
      <summary>Базовый генератор отчета для стратегии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Strategies.Reporting.StrategyReport" />.</summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.FileName">
      <summary>Название файла, в котором сгенерируется отчет.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Reporting.StrategyReport.Strategies">
      <summary>Стратегии, для которых необходимо сгенерировать отчет.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Generate">
      <summary>Сгенерировать отчет.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(System.Nullable{System.TimeSpan})">
      <summary>Отформатировать время в строку.</summary>
      <param name="time">Время.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(System.DateTimeOffset)">
      <summary>Отформатировать время в строку.</summary>
      <param name="time">Время.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(StockSharp.Messages.Sides)">
      <summary>Отформатировать направление заявки в строку.</summary>
      <param name="direction">Направление заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(StockSharp.Messages.OrderStates)">
      <summary>Отформатировать состояние заявки в строку.</summary>
      <param name="state">Состояние заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.StrategyReport.Format(System.Nullable{StockSharp.Messages.OrderTypes})">
      <summary>Отформатировать тип заявки в строку.</summary>
      <param name="type">Тип заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport">
      <summary>Генератор отчета для стратегии в формате xml.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport" />.</summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Xml.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.#ctor(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport" />.</summary>
      <param name="strategies">Стратегии, для которых необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате xml.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport.Generate">
      <summary>Сгенерировать отчет.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Strategy">
      <summary>Базовый класс для всех торговых стратегий.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Strategy" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Id">
      <summary>Уникальный идентификатор источника.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.LogLevel">
      <summary>Уровень логирования. По-умолчанию установлено в <see cref="F:StockSharp.Logging.LogLevels.Inherit" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Name">
      <summary>Название стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.NameGenerator">
      <summary>Генератор имени стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Connector">
      <summary>Подключение к торговой системе.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.SafeGetConnector">
      <summary>Получить получение стратегии <see cref="P:StockSharp.Algo.Strategies.Strategy.Connector" />. Если оно не инициализивано, то будет выбрашено исключение.</summary>
      <returns>Подключение.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Portfolio">
      <summary>Портфель.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Security">
      <summary>Инструмент стакана.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Slippage">
      <summary>Суммарное значение проскальзывания.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.SlippageChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Slippage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PnLManager">
      <summary>Менеджер прибыли-убытка. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PnL">
      <summary>Суммарное значение прибыли-убытка без учета комиссии <see cref="P:StockSharp.Algo.Strategies.Strategy.Commission" />.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PnLChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.PnL" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Commission">
      <summary>Общий размер комиссий.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.CommissionChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Commission" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PositionManager">
      <summary>Менеджер позиции. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Position">
      <summary>Суммарное значение позиции.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PositionChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Position" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Latency">
      <summary>Суммарное значение задержки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.LatencyChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Latency" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StatisticManager">
      <summary>Менеджер статистики.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.RiskManager">
      <summary>Менеджер контроля рисков.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Parameters">
      <summary>Параметры стратегии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ParametersChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Parameters" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseParametersChanged(System.String)">
      <summary>Вызвать события <see cref="E:StockSharp.Algo.Strategies.Strategy.ParametersChanged" /> и <see cref="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged" />.</summary>
      <param name="name">Название параметра.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Environment">
      <summary>Параметры окружения стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.MaxErrorCount">
      <summary>Максимальное количество ошибок, которое должна получить стратегия прежде, чем она остановил работу.</summary>
      <remarks>Значение по умолчанию 1.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorCount">
      <summary>Текущее количество ошибок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ProcessState">
      <summary>Состояние работы.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ProcessStateChanged">
      <summary>Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseProcessStateChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.ProcessStateChanged" />.</summary>
      <param name="strategy">Стратегия.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CancelOrdersWhenStopping">
      <summary>Снимать активные заявки при остановке. По-умолчанию включено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Orders">
      <summary>Заявки, зарегистрированные в рамках стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StopOrders">
      <summary>Стоп-заявки, зарегистрированные в рамках стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OrdersKeepTime">
      <summary>Время хранения заявок <see cref="P:StockSharp.Algo.Strategies.Strategy.Orders" /> и <see cref="P:StockSharp.Algo.Strategies.Strategy.StopOrders" /> в памяти. По-умолчанию равно 2-ум дням. Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то заявки не будут удаляться.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.MyTrades">
      <summary>Сделки, прошедшие в течении работы стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OrderFails">
      <summary>Заявки с ошибками, зарегистрированные в рамках стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Volume">
      <summary>Объем, которым необходимо оперировать.</summary>
      <remarks>Если значение установлено в 0, то параметр игнорируется.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorState">
      <summary>Состояние ошибки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies">
      <summary>Дочерние торговые стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StartedTime">
      <summary>Время запуска стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.TotalWorkingTime">
      <summary>Общее время работы стратегии с вычетом временных отрезков, когда стратегия останавливалась.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.DisposeOnStop">
      <summary>Автоматически освобождать занятые ресурсы стратерии при ее остановке (состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> стало равным <see cref="F:StockSharp.Algo.ProcessStates.Stopped" />) и удалять ее из родительской через <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.</summary>
      <remarks>Режим используется только для одноразовых стратегий, тоесть для тех, что не будут запущены повторно (например, котирование). По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.WaitAllTrades">
      <summary>Останавливать стратегию только после получения всех сделок по зарегистрированным заявкам.</summary>
      <remarks>По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CommentOrders">
      <summary>Добавлять в <see cref="P:StockSharp.BusinessEntities.Order.Comment" /> название стратегии <see cref="P:StockSharp.Algo.Strategies.Strategy.Name" />, выставившая заявку.</summary>
      <remarks>По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Rules">
      <summary>Зарегистрированные правила.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.IsRulesSuspended">
      <summary>Приостановлено ли исполнение правил.</summary>
      <remarks>Приостановка правил происходит через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.SuspendRules" />.</remarks>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegistering">
      <summary>Событие отправки заявки на регистрацию.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered">
      <summary>Событие об успешной регистрации заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegisterFailed">
      <summary>Событие об ошибке регистрации заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistering">
      <summary>Событие отправки стоп-заявки на регистрацию.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered">
      <summary>Событие об ошибке регистрации стоп-заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegisterFailed">
      <summary>Событие ошибки регистрации стоп-заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderChanged">
      <summary>Событие об изменении заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderChanged">
      <summary>Событие об изменении стоп-заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderCanceling">
      <summary>Событие отправки заявки на отмену.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderCanceling">
      <summary>Событие отправки стоп-заявки на отмену.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderReRegistering">
      <summary>Событие отправки заявки на перерегистрацию.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderReRegistering">
      <summary>Событие отправки стоп-заявки на перерегистрацию.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderCancelFailed">
      <summary>Событие об ошибке отмены заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderCancelFailed">
      <summary>Событие об ошибке отмены стоп-заявки.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.NewMyTrades">
      <summary>Событие о появлении новых сделок.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ConnectorChanged">
      <summary>Событие изменения подключения стратегии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.SecurityChanged">
      <summary>Событие изменения инструмента стратегии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PortfolioChanged">
      <summary>Событие изменения портфеля стратегии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PositionsChanged">
      <summary>Событие изменения позиций стратегии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.Error">
      <summary>Событие возникновения ошибки в стратегии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStarted">
      <summary>Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopping">
      <summary>Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopping" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopped">
      <summary>Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopped" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>Зарегистрировать заявку и автоматически добавить для запуска механизмов расчета прибыли-убытка и проскальзывания.</summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>Перерегистрировать заявку и автоматически добавить для запуска механизмов расчета прибыли-убытка и проскальзывания.</summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="newOrder">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>Отменить заявку.</summary>
      <param name="order">Заявка для отмены.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessOrder(StockSharp.BusinessEntities.Order)">
      <summary>Добавить заявку в стратегию.</summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessOrder(StockSharp.BusinessEntities.Order,System.Boolean)">
      <summary>Добавить заявку в стратегию.</summary>
      <param name="order">Заявка.</param>
      <param name="isChanging">Заявка пришла из события изменения.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.AttachOrder(StockSharp.BusinessEntities.Order,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>Добавить активную заявку в стратегию и обработать сделки по заявке.</summary>
      <param name="order">Заявка.</param>
      <param name="myTrades">Сделки по заявке.</param>
      <remarks>Используется для восстановления состояния стратегии, когда необходимо подписаться на получение данных по заявкам, зарегистрированным ранее.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.AssignOrderStrategyId(StockSharp.BusinessEntities.Order)">
      <summary>Установить идентификатор стратегии для заявки.</summary>
      <param name="order">Заявка, для которой необходимо установить идентификатор стратегии.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CurrentTime">
      <summary>Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseLog(StockSharp.Logging.LogMessage)">
      <summary>Вызвать событие <see cref="E:StockSharp.Logging.ILogSource.Log" />.</summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Start">
      <summary>Запустить торговый алгоритм.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Stop">
      <summary>Остановить торговый алгоритм.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.Reseted">
      <summary>Событие переинициализации стратегии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseReseted">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.Reseted" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Reset">
      <summary>Переинициализировать торговый алгоритм. Вызывается после инициализации объекта стратегии и загрузки сохраненных параметров.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnReseted">
      <summary>Вызывается из метода <see cref="M:StockSharp.Algo.Strategies.Strategy.Reset" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.SuspendRules">
      <summary>Приостановить исполнение правил до следующего восстановления через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.ResumeRules" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ResumeRules">
      <summary>Восстановить исполнение правил, остановленное через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.SuspendRules" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.UnrealizedPnLInterval">
      <summary>Интервал пересчета нереализованной прибыли. Значение по-умолчанию равно 1 минуте.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnPositionsChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>Метод, который вызывается при изменении позиций стратегии.</summary>
      <param name="positions">Измененные позиции стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>Метод, который вызывается при появлении новых сделок стратегии.</summary>
      <param name="trades">Новые сделки стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegistering(StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistering" />.</summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegistered(StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered" />.</summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegistering(StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistering" />.</summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegistered(StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered" />.</summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderCanceling(StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered" />.</summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderCanceling(StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered" />.</summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderReRegistering" />.</summary>
      <param name="oldOrder">Стоп-заявка, которую нужно снять.</param>
      <param name="newOrder">Новая стоп-заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderReRegistering" />.</summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>Метод, который вызывается при изменении заявки стратегии.</summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>Метод, который вызывается при изменении стоп-заявки стратегии.</summary>
      <param name="order">Измененная стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>Метод, который вызывается при изменении стоп-заявок стратегии.</summary>
      <param name="orders">Измененные стоп-заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>Метод, который вызывается при ошибке регистрации заявки стратегии.</summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>Метод, который вызывается при ошибке регистрации стоп-заявки стратегии.</summary>
      <param name="fail">Ошибка регистрации стоп-заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>Обработать поступившие от подключения <see cref="P:StockSharp.Algo.Strategies.Strategy.Connector" /> заявки, и найти из них те, что принадлежат стратегии.</summary>
      <param name="newOrders">Новые заявки.</param>
      <returns>Заявки, принадлежащие стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged">
      <summary>Событие изменения параметров стратегии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.CancelActiveOrders">
      <summary>Отменить все активные заявки (стоп и обычные).</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessCancelActiveOrders">
      <summary>Отменить все активные заявки (стоп и обычные).</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnError(System.Exception)">
      <summary>Обработка ошибки, полученной в результате работы стратегии.</summary>
      <param name="error">Ошибка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Strategies.Strategy" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ValuesChanged">
      <summary>Событие изменения инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>Получить стакан котировок.</summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Стакан с котировками.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.GetSecurityValue(StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1Fields)">
      <summary>Получить значение маркет-данных для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="field">Поле маркет-данных.</param>
      <returns>Значение поля. Если данных нет, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.GetLevel1Fields(StockSharp.BusinessEntities.Security)">
      <summary>Получить набор доступных полей <see cref="T:StockSharp.Messages.Level1Fields" />, для которых есть маркет-данные для инструмента.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Набор доступных полей.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Lookup(StockSharp.BusinessEntities.Security)">
      <summary>Найти инструменты, соответствующие фильтру <paramref name="criteria" />.</summary>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Найденные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyHelper">
      <summary>Вспомогательный класс для <see cref="T:StockSharp.Algo.Strategies.Strategy" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtMarket(StockSharp.Algo.Strategies.Strategy,System.Nullable{System.Decimal})">
      <summary>Создать инициализированный объект заявки на покупку по рыночной цене.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="volume">Объем. Если передается значение <see langword="null" />, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
      <remarks>Заявка не регистрируется, а только создается объект.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtMarket(StockSharp.Algo.Strategies.Strategy,System.Nullable{System.Decimal})">
      <summary>Создать инициализированный объект заявки для продажи по рынку.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="volume">Объем. Если передается значение <see langword="null" />, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
      <remarks>Заявка не регистрируется, а только создается объект.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Nullable{System.Decimal})">
      <summary>Создать инициализированный объект заявки на покупку.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение <see langword="null" />, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
      <remarks>Заявка не регистрируется, а только создается объект.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Nullable{System.Decimal})">
      <summary>Создать инициализированный объект заявки на продажу.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение <see langword="null" />, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
      <remarks>Заявка не регистрируется, а только создается объект.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.CreateOrder(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Sides,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Создать инициализированный объект заявки.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="direction">Направление заявки.</param>
      <param name="price">Цена. Если передается значение <see langword="null" />, то выставляется заявка по рыночной цене.</param>
      <param name="volume">Объем. Если передается значение <see langword="null" />, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
      <remarks>Заявка не регистрируется, а только создается объект.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ClosePosition(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>Закрыть открытую позицию по рынку (выставить заявку типа <see cref="F:StockSharp.Messages.OrderTypes.Market" />).</summary>
      <param name="strategy">Стратегия.</param>
      <param name="slippage">Уровень проскальзывания, допустимый при регистрации заявки. Используется, если заявка регистрируется лимиткой.</param>
      <remarks>Рыночная заявка не работает на всех биржах.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetCandleManager(StockSharp.Algo.Strategies.Strategy)">
      <summary>Получить менеджер свечек, ассоциированный с переданной стратегией.</summary>
      <param name="strategy">Стратегия.</param>
      <returns>Менеджер свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetCandleManager(StockSharp.Algo.Strategies.Strategy,StockSharp.Algo.Candles.ICandleManager)">
      <summary>Установить менеджер свечек для стратегии.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="candleManager">Менеджер свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetIsEmulation(StockSharp.Algo.Strategies.Strategy)">
      <summary>Установить режим запуска стратегии (эмуляция или реал).</summary>
      <param name="strategy">Стратегия.</param>
      <returns>Если используется режим эмуляции - <see langword="true" />, иначе - <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetIsEmulation(StockSharp.Algo.Strategies.Strategy,System.Boolean)">
      <summary>Установить режим запуска стратегии (эмуляция или реал).</summary>
      <param name="strategy">Стратегия.</param>
      <param name="isEmulation">Если используется режим эмуляции - <see langword="true" />, иначе - <see langword="false" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetIsInitialization(StockSharp.Algo.Strategies.Strategy)">
      <summary>Получить режим работы стратегии (инициализация или торговля).</summary>
      <param name="strategy">Стратегия.</param>
      <returns>Если выполняется инициализация - <see langword="true" />, иначе - <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetIsInitialization(StockSharp.Algo.Strategies.Strategy,System.Boolean)">
      <summary>Установить режим работы стратегии (инициализация или торговля).</summary>
      <param name="strategy">Стратегия.</param>
      <param name="isInitialization">Если выполняется инициализация - <see langword="true" />, иначе - <see langword="false" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SetIsInitialization(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.SecurityId,System.Boolean)">
      <summary>Установить режим работы стратегии (инициализация или торговля).</summary>
      <param name="strategy">Стратегия.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="isInitialization">Если выполняется инициализация - <see langword="true" />, иначе - <see langword="false" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.LoadState(StockSharp.Algo.Strategies.Strategy,Ecng.Serialization.SettingsStorage)">
      <summary>Восстановить состояние стратегии.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="storage">Хранилище данных.</param>
      <remarks>Данный метод используется для загрузки статистики, заявок и сделок. Хранилище данных должно содержать следующие параметры: 1. Settings (SettingsStorage) - настройки стратегии. 2. Statistics(SettingsStorage) - сохраненное состояние статистики. 3. Orders (IDictionary[Order, IEnumerable[MyTrade]]) - заявки и сделки по ним. 4. Positions (IEnumerable[Position]) - позиции стратегии. При отсутствии одного из параметров соответствующие данные восстанавливаться не будут.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetSecurityValue``1(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Level1Fields)">
      <summary>Получить значение маркет-данных для инструмента стратегии.</summary>
      <typeparam name="T">Тип значения поля маркет-данных.</typeparam>
      <param name="strategy">Стратегия.</param>
      <param name="field">Поле маркет-данных.</param>
      <returns>Значение поля. Если данных нет, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetTraceId(StockSharp.BusinessEntities.Order)">
      <summary>Получить трассировочный идентификатор заявки.</summary>
      <param name="order">Заявка.</param>
      <returns>Трассировочный идентификатор заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.EmulateOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.Algo.Storages.IStorageRegistry,System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.Decimal})">
      <summary>Сэмулировать заявки на истории.</summary>
      <param name="orders">Заявки, которые необходимо сэмулировать на истории.</param>
      <param name="storageRegistry">Внешнеее хранилище для доступа к исторических данным.</param>
      <param name="openedPositions">Сделки, описывающие начальные открытые позиции.</param>
      <returns>Виртуальная стратегии, содержащая в себе ход эмуляционных торгов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenNewMyTrades(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие появление новых сделок стратегии.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться появление сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenOrderRegistered(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие появление новой заявки стратегии.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться появление заявки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenOrderChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие изменения любой заявки стратегии.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение заявок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPositionChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие изменения позиции у стратегии.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPositionLess(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие уменьшения позиции у стратегии ниже определённого уровня.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPositionMore(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие увеличения позиции у стратегии выше определенного уровня.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPnLLess(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие уменьшения прибыли ниже определённого уровня.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPnLMore(StockSharp.Algo.Strategies.Strategy,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие увеличения прибыли выше определенного уровня.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenPnLChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие изменения прибыли.</summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenStarted(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие начала работы стратегии.</summary>
      <param name="strategy">Стратегия, по которой будет ожидаться начало работы стратегии.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenStopping(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие начала остановки работы стратегии.</summary>
      <param name="strategy">Стратегия, по которой будет ожидаться начало остановки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenStopped(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие полной остановки работы стратегии.</summary>
      <param name="strategy">Стратегия, по которой будет ожидаться полная остановка.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenError(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие ошибки стратегии (переход состояния <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState" /> в <see cref="F:StockSharp.Logging.LogLevels.Error" />).</summary>
      <param name="strategy">Стратегия, по которой будет ожидаться ошибка.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.WhenWarning(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать правило на событие предупреждения стратегии (переход состояния <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState" /> в <see cref="F:StockSharp.Logging.LogLevels.Warning" />).</summary>
      <param name="strategy">Стратегия, по которой будет ожидаться предупреждение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.Register(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)">
      <summary>Создать действие, регистрирующее заявку.</summary>
      <param name="rule">Правило.</param>
      <param name="order">Заявка, которую необходимо зарегистрировать.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ReRegister(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>Создать действие, перерегистрирующее заявку.</summary>
      <param name="rule">Правило.</param>
      <param name="oldOrder">Заявка, которую необходимо перезарегистрировать.</param>
      <param name="newOrder">Информация о новой заявке.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.Cancel(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)">
      <summary>Создать действие, отменяющее заявку.</summary>
      <param name="rule">Правило.</param>
      <param name="order">Заявка, которую необходимо отменить.</param>
      <returns>Правило.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyNameGenerator">
      <summary>Класс для формирования имени стратегии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyNameGenerator.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.StrategyNameGenerator" />.</summary>
      <param name="strategy">Стратегия.</param>
    </member>
    <member name="E:StockSharp.Algo.Strategies.StrategyNameGenerator.Changed">
      <summary>Событие изменения имени.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.AutoGenerateStrategyName">
      <summary>Использовать ли автоматическую генерацию имени стратегии. По-умолчанию включено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.ShortName">
      <summary>Короткое название стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.Pattern">
      <summary>Паттерн для формирования имени стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.Value">
      <summary>Сгенерированное или установленное имя стратегии.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IStrategyParam">
      <summary>Параметр стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Name">
      <summary>Название параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Value">
      <summary>Значение параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeFrom">
      <summary>Значение От при оптимизации.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeTo">
      <summary>Значение До при оптимизации.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.OptimizeStep">
      <summary>Значение Шаг при оптимизации.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyParam`1">
      <summary>Обертка для типизированного доступа к параметру стратегии.</summary>
      <typeparam name="T">Тип значения параметра.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,`0)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.</summary>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
      <param name="initialValue">Первоначальное значение.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Name">
      <summary>Название параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.AllowNull">
      <summary>Возможно ли в <see cref="P:StockSharp.Algo.Strategies.StrategyParam`1.Value" /> хранить значение, равное <see langword="null" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Value">
      <summary>Значение параметра.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeFrom">
      <summary>Значение От при оптимизации.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeTo">
      <summary>Значение До при оптимизации.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.OptimizeStep">
      <summary>Значение Шаг при оптимизации.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyParamHelper">
      <summary>Вспомогательный класс для с <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.Param``1(StockSharp.Algo.Strategies.Strategy,System.String,``0)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.</summary>
      <typeparam name="T">Тип значения параметра.</typeparam>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
      <param name="initialValue">Первоначальное значение.</param>
      <returns>Параметр стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.Optimize``1(StockSharp.Algo.Strategies.StrategyParam{``0},``0,``0,``0)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.</summary>
      <typeparam name="T">Тип значения параметра.</typeparam>
      <param name="param">Параметр стратегии.</param>
      <param name="optimizeFrom">Значение От при оптимизации.</param>
      <param name="optimizeTo">Значение До при оптимизации.</param>
      <param name="optimizeStep">Значение Шаг при оптимизации.</param>
      <returns>Параметр стратегии.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Testing.BatchEmulation">
      <summary>Пакетный эмулятор стратегий.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.EmulationSettings">
      <summary>Настройки эмуляции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.EmulationConnector">
      <summary>Эмуляционное подключение.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.Strategies">
      <summary>Стратегии для тестирования.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.IsFinished">
      <summary>Закончил ли эмулятор свою работу по причине окончания данных или он был прерван через метод <see cref="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Stop" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.CurrentProgress">
      <summary>Текущий прогресс процесса эмуляции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.TotalProgress">
      <summary>Общий прогресс эмуляции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.State">
      <summary>Состояние эмулятора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.BatchEmulation.BatchStrategies">
      <summary>Текущие тестируемые стратегии.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Testing.BatchEmulation.StateChanged">
      <summary>Событие об изменении состояния эмуляции.</summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Testing.BatchEmulation.ProgressChanged">
      <summary>Событие изменения прогресса эмуляции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Testing.BatchEmulation" />.</summary>
      <param name="securities">Инструменты, с которыми будет вестись работа.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storageRegistry">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.#ctor(StockSharp.BusinessEntities.ISecurityProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Testing.BatchEmulation" />.</summary>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storageRegistry">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Start(System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.Strategy},System.Int32)">
      <summary>Запустить эмуляцию.</summary>
      <param name="strategies">Стратегии.</param>
      <param name="iterationCount">.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.BatchEmulation.Stop">
      <summary>Остановить эмуляцию.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes">
      <summary>Тип данных для эмуляции.</summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.Storage">
      <summary>Хранилище.</summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.Generate">
      <summary>Сгенерированные.</summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.Testing.EmulationMarketDataModes.No">
      <summary>Отсутствует.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Testing.EmulationSettings">
      <summary>Настройки эмуляции.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.StartTime">
      <summary>Дата в истории, с которой необходимо начать эмуляцию.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.StopTime">
      <summary>Дата в истории, на которой необходимо закончить эмуляцию (дата включается).</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.MarketTimeChangedInterval">
      <summary>Интервал изменения времени.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.UnrealizedPnLInterval">
      <summary>Интервал пересчета нереализованной прибыли.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.TradeDataMode">
      <summary>Какие использовать сделки.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.DepthDataMode">
      <summary>Какие использовать стаканы.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.OrderLogDataMode">
      <summary>Использовать лог заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.BatchSize">
      <summary>Количество одновременно тестируемых стратегий.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Testing.EmulationSettings.LogLevel">
      <summary>Уровень логирования.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Strategies.Testing.EmulationSettings" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметров эмуляции.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Testing.EmulationSettings.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметров эмуляции.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Strategies.ProcessResults">
      <summary>Результаты работы одной итерации торговой стратегии.</summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessResults.Continue">
      <summary>Продолжить работу дальше.</summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessResults.Stop">
      <summary>Прекратить работу стратегии.</summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TimeFrameStrategy">
      <summary>Торговая стратегия, основанное на тайм-фрейме.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.#ctor(System.TimeSpan)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Strategies.TimeFrameStrategy" />.</summary>
      <param name="timeFrame">Таймфрейм стратегии.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame">
      <summary>Таймфрейм стратегии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.Interval">
      <summary>Интервал запуска стратегии. По умолчанию равен <see cref="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnStarted">
      <summary>Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnProcess">
      <summary>Реализация торгового алгоритма.</summary>
      <returns>Результат работы одной итерации торгового алгоритма.</returns>
    </member>
    <member name="T:StockSharp.Algo.SubscriptionMessageAdapter">
      <summary>Адаптер учета подписок.</summary>
    </member>
    <member name="M:StockSharp.Algo.SubscriptionMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter)">
      <summary>Создать <see cref="T:StockSharp.Algo.SubscriptionMessageAdapter" />.</summary>
      <param name="innerAdapter">Внутренний адаптер сообщений.</param>
    </member>
    <member name="P:StockSharp.Algo.SubscriptionMessageAdapter.IsRestoreOnReconnect">
      <summary>Восстановить подписку при переподключении.</summary>
    </member>
    <member name="M:StockSharp.Algo.SubscriptionMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.SubscriptionMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
      <summary>Обработать <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter" /> исходящее сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.SubscriptionMessageAdapter.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.SubscriptionMessageAdapter" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.CommissionRuleMessage">
      <summary>Сообщение, содержащее в себе информацию о правиле расчета комиссии.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.CommissionRuleMessage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.CommissionRuleMessage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.CommissionRuleMessage.Rule">
      <summary>Правило вычисления комиссии.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.CommissionRuleMessage.PortfolioName">
      <summary>Имя портфеля. Если оно задано, то <see cref="P:StockSharp.Algo.Testing.CommissionRuleMessage.Rule" /> применяется к конктреному портфелю.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.HistorySourceMessage">
      <summary>Сообщение с источником исторических маркет-данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistorySourceMessage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.HistorySourceMessage" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistorySourceMessage.GetMessages">
      <summary>Колбэк получения исторических данных.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.BaseEmulationConnector">
      <summary>Базовое подключение эмуляции.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.#ctor">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Testing.BaseEmulationConnector" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.BaseEmulationConnector.EmulationAdapter">
      <summary>Адаптер, исполняющий сообщения в <see cref="T:StockSharp.Algo.Testing.IMarketEmulator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterTrades(StockSharp.Algo.Testing.TradeGenerator)">
      <summary>Зарегистрировать генератор сделок.</summary>
      <param name="generator">Генератор сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.UnRegisterTrades(StockSharp.Algo.Testing.TradeGenerator)">
      <summary>Удалить генератор сделок, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterTrades(StockSharp.Algo.Testing.TradeGenerator)" />.</summary>
      <param name="generator">Генератор сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)">
      <summary>Зарегистрировать генератор стаканов.</summary>
      <param name="generator">Генератор стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.UnRegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)">
      <summary>Удалить генератор стаканов, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)" />.</summary>
      <param name="generator">Генератор стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)">
      <summary>Зарегистрировать генератор лога заявок.</summary>
      <param name="generator">Генератор лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.BaseEmulationConnector.UnRegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)">
      <summary>Удалить генератор лога заявок, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Testing.BaseEmulationConnector.RegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)" />.</summary>
      <param name="generator">Генератор лога заявок.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.ClearingMessage">
      <summary>Сообщение о проведении клиринга на бирже.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.ClearingMessage.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.ClearingMessage.ClearMarketDepth">
      <summary>Проводить ли очистку стакана.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.ClearingMessage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.ClearingMessage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.ClearingMessage.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.HistoryMessageAdapter">
      <summary>Адаптер, получающий сообщения из хранилища <see cref="T:StockSharp.Algo.Storages.IStorageRegistry" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.LoadedMessageCount">
      <summary>Число загруженных событий.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.PostTradeMarketTimeChangedCount">
      <summary>Количество вызовов события <see cref="E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged" /> после окончания торгов. По-умолчанию равно 2.</summary>
      <remarks>Необходимо для активации пост-трейд правил (правила, которые опираются на события, происходящие после окончания торгов).</remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.StorageRegistry">
      <summary>Хранилище данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.Drive">
      <summary>Хранилище, которое используется по-умолчанию. По умолчанию используется <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.StorageFormat">
      <summary>Формат маркет-данных. По умолчанию используется <see cref="F:StockSharp.Algo.Storages.StorageFormats.Binary" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.BasketStorage">
      <summary>Хранилище-агрегатор.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.SecurityProvider">
      <summary>Поставщик информации об инструментах.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.MarketTimeChangedInterval">
      <summary>Интервал генерации сообщения <see cref="T:StockSharp.Messages.TimeMessage" />. По-умолчанию равно 1 секунде.</summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.HistoryMessageAdapter.DefaultMaxMessageCount">
      <summary>Значение по-умолчанию <see cref="P:StockSharp.Algo.Testing.HistoryMessageAdapter.MaxMessageCount" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.MaxMessageCount">
      <summary>Максимальный размер очереди сообщений, до которого читаются исторические данные. По-умолчанию равно <see cref="F:StockSharp.Algo.Testing.HistoryMessageAdapter.DefaultMaxMessageCount" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.#ctor(Ecng.Common.IdGenerator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.HistoryMessageAdapter" />.</summary>
      <param name="transactionIdGenerator">Генератор транзакций.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.#ctor(Ecng.Common.IdGenerator,StockSharp.BusinessEntities.ISecurityProvider)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.HistoryMessageAdapter" />.</summary>
      <param name="transactionIdGenerator">Генератор транзакций.</param>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.StartDate">
      <summary>Дата в истории, с которой необходимо начать эмуляцию.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.StopDate">
      <summary>Дата в истории, на которой необходимо закончить эмуляцию (дата включается).</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.OrderLogMarketDepthBuilders">
      <summary>Построитель стаканов.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.CreateOrderLogMarketDepthBuilder(StockSharp.Messages.SecurityId)">
      <summary>Создать построитель стакана.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Построитель стакана.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.CurrentTime">
      <summary>Текущее время.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryMessageAdapter.SecurityLookupRequired">
      <summary>Требуется ли дополнительное сообщение <see cref="T:StockSharp.Messages.SecurityLookupMessage" /> для получения списка инструментов.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.SendOutMessage">
      <summary>Отправить следующее исходящее сообщение.</summary>
      <returns>
        <see langword="true" />, если сообщение было отправлено, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.SendOutMessage(StockSharp.Messages.Message)">
      <summary>Отправить исходящее сообщение, вызвав событие <see cref="E:StockSharp.Messages.MessageAdapter.NewOutMessage" />.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryMessageAdapter.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.EmulationMessageAdapter">
      <summary>Адаптер, исполняющий сообщения в <see cref="T:StockSharp.Algo.Testing.IMarketEmulator" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationMessageAdapter.#ctor(Ecng.Common.IdGenerator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.EmulationMessageAdapter" />.</summary>
      <param name="transactionIdGenerator">Генератор транзакций.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationMessageAdapter.#ctor(StockSharp.Algo.Testing.IMarketEmulator,Ecng.Common.IdGenerator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.EmulationMessageAdapter" />.</summary>
      <param name="emulator">Эмулятор торгов.</param>
      <param name="transactionIdGenerator">Генератор транзакций.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.Emulator">
      <summary>Эмулятор торгов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.CurrentTime">
      <summary>Текущее время.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationMessageAdapter.ProcessedMessageCount">
      <summary>Число обработанных сообщений.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.EmulationStateMessage">
      <summary>Сообщение, информирующее об изменении состояния эмулятора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationStateMessage.State">
      <summary>Передаваемое состояние.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationStateMessage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.EmulationStateMessage" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationStateMessage.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Messages.Message" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.HistoryEmulationConnector">
      <summary>Эмуляционное подключение. Использует исторические данные и/или случайно сгенерированные.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.HistoryEmulationConnector" />.</summary>
      <param name="securities">Инструменты, которые будут переданы через событие <see cref="E:StockSharp.BusinessEntities.IConnector.NewSecurities" />.</param>
      <param name="portfolios">Портфели, которые будут переданы через событие <see cref="E:StockSharp.BusinessEntities.IConnector.NewPortfolios" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.HistoryEmulationConnector" />.</summary>
      <param name="securities">Инструменты, с которыми будет вестись работа.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storageRegistry">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.#ctor(StockSharp.BusinessEntities.ISecurityProvider,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.HistoryEmulationConnector" />.</summary>
      <param name="securityProvider">Поставщик информации об инструментах.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storageRegistry">Хранилище данных.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.HistoryMessageAdapter">
      <summary>Адаптер, получающий сообщения из хранилища <see cref="T:StockSharp.Algo.Storages.IStorageRegistry" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.MaxMessageCount">
      <summary>Максимальный размер очереди сообщений, до которого читаются исторические данные. По-умолчанию равно <see cref="F:StockSharp.Algo.Testing.HistoryMessageAdapter.DefaultMaxMessageCount" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.InitialMoney">
      <summary>Первоначальный размер денежных средств на счетах.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.LoadedMessageCount">
      <summary>Число загруженных сообщений.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.ProcessedMessageCount">
      <summary>Число обработанных сообщений.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.State">
      <summary>Состояние эмулятора.</summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.HistoryEmulationConnector.StateChanged">
      <summary>Событие о изменении состояния эмулятора <see cref="P:StockSharp.Algo.Testing.HistoryEmulationConnector.State" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.IsFinished">
      <summary>Закончил ли эмулятор свою работу по причине окончания данных или он был прерван через метод <see cref="M:StockSharp.BusinessEntities.IConnector.Disconnect" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.UseExternalCandleSource">
      <summary>Включить возможность выдавать свечи напрямую в <see cref="T:StockSharp.Algo.Candles.ICandleManager" />. Ускоряет работу, но будут отсутствовать события изменения свечек. По умолчанию выключено.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.ClearCache">
      <summary>Очистить кэш данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.HistoryEmulationConnector.RaiseConnectedOnFirstAdapter">
      <summary>Вызывать событие <see cref="E:StockSharp.Algo.Connector.Connected" /> при установке подключения первого адаптера в <see cref="P:StockSharp.Algo.Connector.Adapter" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.OnDisconnect">
      <summary>Отключиться от торговой системы.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.DisposeManaged">
      <summary>Освободить занятые ресурсы. В частности, отключиться от торговой системы через <see cref="M:StockSharp.Algo.Connector.Disconnect" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.Start">
      <summary>Запустить эмуляцию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.Suspend">
      <summary>Приостановить эмуляцию.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.OnProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать сообщение, содержащее рыночные данные.</summary>
      <param name="message">Сообщение, содержащее рыночные данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.OnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>Начать получать новую информацию по портфелю.</summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.RegisterHistorySource(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataTypes,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{StockSharp.Messages.Message}})">
      <summary>Подписаться на исторические данные.</summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Типы данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="getMessages">Источник исторических данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.HistoryEmulationConnector.UnRegisterHistorySource(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataTypes,System.Object)">
      <summary>Удалить подписку, сделанную ранее через <see cref="M:StockSharp.Algo.Testing.HistoryEmulationConnector.RegisterHistorySource(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataTypes,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{StockSharp.Messages.Message}})" />.</summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Типы данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.GeneratorMessage">
      <summary>Сообщение о создании или удалении генератора маркет-данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.GeneratorMessage.Generator">
      <summary>Генератор маркет-данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.GeneratorMessage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.GeneratorMessage" />.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.EmulationStates">
      <summary>Состояния <see cref="T:StockSharp.Algo.Testing.HistoryEmulationConnector" />.</summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Stopped">
      <summary>Остановлена.</summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Stopping">
      <summary>Останавливается.</summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Starting">
      <summary>Запускается.</summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Started">
      <summary>Работает.</summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Suspending">
      <summary>В процессе приостановки.</summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Suspended">
      <summary>Торги приостановлены.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.LastMessage">
      <summary>Сообщение, информирующее об окончании поступления данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.LastMessage.IsError">
      <summary>Передача данных завершена из-за ошибки.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.LastMessage.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.LastMessage" />.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketDataGenerator">
      <summary>Генератор маркет-данных.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.#ctor(StockSharp.Messages.SecurityId)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Testing.MarketDataGenerator" />.</summary>
      <param name="securityId">Идентификатор инструмента, для которого необходимо генерировать данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.DataType">
      <summary>Тип рыночных данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.RandomArrayLength">
      <summary>Длина массива предварительно сгенерированных случайных чисел. По умолчанию 100.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.Init">
      <summary>Инициализировать состояние генератора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.SecurityId">
      <summary>Идентификатор инструмента, для которого необходимо генерировать данные.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.SecurityDefinition">
      <summary>Информация о торговом инструменте.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.LastGenerationTime">
      <summary>Время последней генерации данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.Interval">
      <summary>Интервал генерации данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume">
      <summary>Максимальный объем. Объем будет выбран случайно от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume" />.</summary>
      <remarks>Значение по умолчанию равно 20.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume">
      <summary>Максимальный объем. Объем будет выбран случайно от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume" />.</summary>
      <remarks>Значение по умолчанию 1.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxPriceStepCount">
      <summary>Максимальное количество шагов цены <see cref="P:StockSharp.BusinessEntities.Security.PriceStep" />, которое будет возвращатся через массив <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.Steps" />.</summary>
      <remarks>Значение по умолчанию равно 10.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.Process(StockSharp.Messages.Message)">
      <summary>Обработать сообщение.</summary>
      <param name="message">Сообщение.</param>
      <returns>Результат обработки. Если будет возрвщено <see langword="null" />, то генератору пока недостаточно данных для генерации нового сообщения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.OnProcess(StockSharp.Messages.Message)">
      <summary>Обработать сообщение.</summary>
      <param name="message">Сообщение.</param>
      <returns>Результат обработки. Если будет возрвщено <see langword="null" />, то генератору пока недостаточно данных для генерации нового сообщения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator.IsTimeToGenerate(System.DateTimeOffset)">
      <summary>Требуется ли генерация новых данных.</summary>
      <param name="time">Текущее время.</param>
      <returns>
        <see langword="true" />, если надо сгенерировать данные. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.Volumes">
      <summary>Массив случайных объемов в диапазоне от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxVolume" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator.Steps">
      <summary>Массив случайных количеств шагов цены в диапазоне от 1 до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator.MaxPriceStepCount" />.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketDepthGenerator">
      <summary>Генератор стакана случайным методом.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.#ctor(StockSharp.Messages.SecurityId)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Testing.MarketDepthGenerator" />.</summary>
      <param name="securityId">Идентификатор инструмента, для которого необходимо генерировать данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.DataType">
      <summary>Тип рыночных данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.UseTradeVolume">
      <summary>Использовать для генерации лучших котировок в стакане объем исторических сделок.</summary>
      <remarks>Значение по умолчанию <see langword="true" />.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount">
      <summary>Минимальная величина спреда между лучшими котировками в единицах числа шагов цены. Величина спреда будет выбрана случайно между <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount" /> и <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount" />.</summary>
      <remarks>Значение по умолчанию 1.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount">
      <summary>Максимальная величина спреда между лучшими котировками в единицах числа шагов цены. Величина спреда будет выбрана случайно между <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount" /> и <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount" />.</summary>
      <remarks>Значение по умолчанию <see cref="F:System.Int32.MaxValue" />.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxBidsDepth">
      <summary>Максимальная глубина бидов.</summary>
      <remarks>Значение по умолчанию 1.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxAsksDepth">
      <summary>Максимальная глубина офферов.</summary>
      <remarks>Значение по умолчанию 1.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.GenerateDepthOnEachTrade">
      <summary>Генерировать ли стаканы после каждой сделки. По умолчанию <see langword="false" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxGenerations">
      <summary>Максимальное количество генераций после последнего поступления исходных данных для стакана.</summary>
      <remarks>Значение по умолчанию равно 20.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.CreateQuote(System.Decimal,StockSharp.Messages.Sides)">
      <summary>Создать случайным методом котировку.</summary>
      <param name="startPrice">Начальная цена, от которой случайным методом необходимо получить цену котировки.</param>
      <param name="side">Направление котировки.</param>
      <returns>Случайная котировка.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator">
      <summary>Генератор стаканов, учитывающий последовательность сделок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.#ctor(StockSharp.Messages.SecurityId)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator" />.</summary>
      <param name="securityId">Идентификатор инструмента, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Init">
      <summary>Инициализировать состояние генератора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.OnProcess(StockSharp.Messages.Message)">
      <summary>Обработать сообщение.</summary>
      <param name="message">Сообщение.</param>
      <returns>Результат обработки. Если будет возрвщено <see langword="null" />, то генератору пока недостаточно данных для генерации нового сообщения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.ExecutionLogConverter">
      <summary>Преобразователь сообщений вида <see cref="T:StockSharp.Messages.QuoteChangeMessage" /> и <see cref="T:StockSharp.Messages.ExecutionMessage" /> (ассоциированный с тиковой сделкой) в единый поток <see cref="T:StockSharp.Messages.ExecutionMessage" /> (ассоциированный с логом заявок).</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.ExecutionLogConverter.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.ExecutionLogConverter.ToExecutionLog(StockSharp.Messages.QuoteChangeMessage)">
      <summary>Преобразовать котировки.</summary>
      <param name="message">Котировки.</param>
      <returns>Поток <see cref="T:StockSharp.Messages.ExecutionMessage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.ExecutionLogConverter.ToExecutionLog(StockSharp.Messages.ExecutionMessage)">
      <summary>Преобразовать тиковую сделку.</summary>
      <param name="tick">Тиковая сделка.</param>
      <returns>Поток <see cref="T:StockSharp.Messages.ExecutionMessage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.ExecutionLogConverter.ToExecutionLog(StockSharp.Messages.Level1ChangeMessage)">
      <summary>Преобразовать первый уровень маркет-данных.</summary>
      <param name="message">Первый уровень маркет-данных.</param>
      <returns>Поток <see cref="T:StockSharp.Messages.Message" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.ExecutionLogConverter.ToExecutionLog(StockSharp.Messages.OrderMessage,System.Decimal)">
      <summary>Преобразовать транзакцию.</summary>
      <param name="message">Транзакция.</param>
      <param name="quotesVolume">Объем в стакане.</param>
      <returns>Поток <see cref="T:StockSharp.Messages.ExecutionMessage" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketEmulator">
      <summary>Эмулятор торгов.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.MarketEmulator" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.Settings">
      <summary>Настройки эмулятора.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.OrderIdGenerator">
      <summary>Генератор идентификаторов для заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.TradeIdGenerator">
      <summary>Генератор идентификаторов для сделок.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.SendInMessage(StockSharp.Messages.Message)">
      <summary>Отправить сообщение.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.NewOutMessage">
      <summary>Событие появления нового сообщения.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketEmulatorSettings">
      <summary>Настройки эмулятора биржи.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulatorSettings.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.MarketEmulatorSettings" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.MatchOnTouch">
      <summary>При эмулировании сведения по сделкам, производить сведение заявок, когда цена сделки коснулась цены заявки (равна цене заявки), а не только, когда цена сделки лучше цены заявки. По-умолчанию включено (оптимистический сценарий).</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.DepthExpirationTime">
      <summary>Максимальное время, которое стакан находится в эмуляторе. Если за это время не произошло обновление, стакан стирается. Это свойство можно использовать, чтобы убирать старые стаканы при наличии дыр в данных. По-умолчанию равно 1 дню.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Failing">
      <summary>Процентное значение ошибки регистрации новых заявок. Значение может быть от 0 (не будет ни одной ошибки) до 100. По-умолчанию выключено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Latency">
      <summary>Минимальное значение задержки выставляемых заявок. По-умолчанию равно <see cref="F:System.TimeSpan.Zero" />, что означает мгновенное принятие биржей выставляемых заявок.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.IsSupportAtomicReRegister">
      <summary>Поддерживается ли перерегистрация заявок в виде одной транзакции. По-умолчанию включено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.BufferTime">
      <summary>Отправлять ответы интервально целым пакетом. Эмулируется сетевая задержка и буферизированная работа биржевого ядра. По умолчанию 0 мс.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.InitialOrderId">
      <summary>Число, начиная с которого эмулятор будет генерировать идентификаторы для заявок <see cref="P:StockSharp.BusinessEntities.Order.Id" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.InitialTradeId">
      <summary>Число, начиная с которого эмулятор будет генерировать идентификаторы для сделок <see cref="P:StockSharp.BusinessEntities.Trade.Id" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.InitialTransactionId">
      <summary>Номер, начиная с которого эмулятор будет генерировать номера для транзакций заявок <see cref="P:StockSharp.BusinessEntities.Order.TransactionId" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.SpreadSize">
      <summary>Размер спреда в шагах цены. Используется при определение спреда для генерации стакана из тиковых сделок. По-умолчанию равен 2.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.MaxDepth">
      <summary>Максимальная глубина стакана, который будет генерироваться из тиков. Используется, если нет истории стаканов. По-умолчанию равно 5.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.VolumeMultiplier">
      <summary>Количество шагов объема, на которое заявка больше тиковой сделки. Используется при тестировании на тиковых сделках. По-умолчанию равен 2.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.PortfolioRecalcInterval">
      <summary>Интервал перерасчета данных по портфелям. Если интервал равен <see cref="F:System.TimeSpan.Zero" />, то перерасчет не выполняется.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.ConvertTime">
      <summary>Переводить время для заявок и сделок в биржевое. По-умолчанию выключено.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.TimeZone">
      <summary>Информация о временной зоне, где находится биржа.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.PriceLimitOffset">
      <summary>Сдвиг цены от последней сделки, определяющие границы максимальной и минимальной цен на следующую сессию. Используется только, если нет сохраненной информации <see cref="T:StockSharp.Messages.Level1ChangeMessage" />. По-умолчанию равен 40%.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.IncreaseDepthVolume">
      <summary>Добавлять дополнительный объем в стакан при выставлении заявок с большим объемом. По-умолчанию включено.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulatorSettings.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить состояние параметров эмуляции.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulatorSettings.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить состояние параметров эмуляции.</summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.OrderLogGenerator">
      <summary>Генератор лога заявок случайным методом.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.#ctor(StockSharp.Messages.SecurityId)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.OrderLogGenerator" />.</summary>
      <param name="securityId">Идентификатор инструмента, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.#ctor(StockSharp.Messages.SecurityId,StockSharp.Algo.Testing.TradeGenerator)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.OrderLogGenerator" />.</summary>
      <param name="securityId">Идентификатор инструмента, для которого необходимо генерировать данные.</param>
      <param name="tradeGenerator">Генератор тиковых сделок случайным методом.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.OrderLogGenerator.DataType">
      <summary>Тип рыночных данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.OrderLogGenerator.TradeGenerator">
      <summary>Генератор тиковых сделок случайным методом.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.OrderLogGenerator.IdGenerator">
      <summary>Генератор идентификатора заявки <see cref="P:StockSharp.BusinessEntities.Order.Id" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Init">
      <summary>Инициализировать состояние генератора.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Process(StockSharp.Messages.Message)">
      <summary>Обработать сообщение.</summary>
      <param name="message">Сообщение.</param>
      <returns>Результат обработки. Если будет возрвщено <see langword="null" />, то генератору пока недостаточно данных для генерации нового сообщения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.OnProcess(StockSharp.Messages.Message)">
      <summary>Обработать сообщение.</summary>
      <param name="message">Сообщение.</param>
      <returns>Результат обработки. Если будет возрвщено <see langword="null" />, то генератору пока недостаточно данных для генерации нового сообщения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Testing.MarketDataGenerator" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.IMarketEmulator">
      <summary>Интерфейс, описывающий эмулятор торгов.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.Settings">
      <summary>Настройки эмулятора.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1">
      <summary>Симуляционное подключение, предназначенный для тестирования стратегии c реальном подключения к торговой системе через <see cref="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnderlyngMarketDataAdapter" />, но без реального выставления заявок на бирже. Исполнение заявок и их сделки эмулируются подключением, используя информацию по стаканам, приходящих от реального подключения.</summary>
      <typeparam name="TUnderlyingMarketDataAdapter">Тип <see cref="T:StockSharp.Messages.IMessageAdapter" />, через который будут получаться маркет-данные.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.#ctor(`0)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1" />.</summary>
      <param name="underlyngMarketDataAdapter">
        <see cref="T:StockSharp.Messages.IMessageAdapter" />, через который будут получаться маркет-данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.#ctor(`0,StockSharp.BusinessEntities.Portfolio,System.Boolean)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1" />.</summary>
      <param name="underlyngMarketDataAdapter">
        <see cref="T:StockSharp.Messages.IMessageAdapter" />, через который будут получаться маркет-данные.</param>
      <param name="portfolio">Портфель, который будет использоваться для выставления заявок. Если значение не задано, то будет создан портфель по умолчанию с названием Симулятор.</param>
      <param name="ownAdapter">Контролировать время жизни подключения <paramref name="underlyngMarketDataAdapter" />.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnderlyngMarketDataAdapter">
      <summary>
        <see cref="T:StockSharp.Messages.IMessageAdapter" />, через который будут получаться маркет-данные.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OnProcessMessage(StockSharp.Messages.Message)">
      <summary>Обработать сообщение, содержащее рыночные данные.</summary>
      <param name="message">Сообщение, содержащее рыночные данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>Загрузить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>Сохранить настройки.</summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.TradeGenerator">
      <summary>Генератор тиковых сделок случайным методом.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TradeGenerator.#ctor(StockSharp.Messages.SecurityId)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.Testing.TradeGenerator" />.</summary>
      <param name="securityId">Идентификатор инструмента, для которого необходимо генерировать данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.TradeGenerator.DataType">
      <summary>Тип рыночных данных.</summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.TradeGenerator.IdGenerator">
      <summary>Генератор идентификатора сделки <see cref="P:StockSharp.BusinessEntities.Trade.Id" />.</summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator">
      <summary>Генератор сделок на основе нормального распределения.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.#ctor(StockSharp.Messages.SecurityId)">
      <summary>Создать <see cref="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator" />.</summary>
      <param name="securityId">Идентификатор инструмента, для которого необходимо генерировать данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Testing.RandomWalkTradeGenerator.GenerateOriginSide">
      <summary>Генерировать значение для <see cref="P:StockSharp.Messages.ExecutionMessage.OriginSide" />. По-умолчанию отключено.</summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.OnProcess(StockSharp.Messages.Message)">
      <summary>Обработать сообщение.</summary>
      <param name="message">Сообщение.</param>
      <returns>Результат обработки. Если будет возрвщено <see langword="null" />, то генератору пока недостаточно данных для генерации нового сообщения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.Clone">
      <summary>Создать копию <see cref="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator" />.</summary>
      <returns>Копия объекта.</returns>
    </member>
    <member name="T:StockSharp.Algo.TimeQuoteChange">
      <summary>Котировка с меткой времени. Используется для CSV файлов.</summary>
    </member>
    <member name="M:StockSharp.Algo.TimeQuoteChange.#ctor">
      <summary>Создать <see cref="T:StockSharp.Algo.TimeQuoteChange" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.TimeQuoteChange.#ctor(StockSharp.Messages.QuoteChange,StockSharp.Messages.QuoteChangeMessage)">
      <summary>Создать <see cref="T:StockSharp.Algo.TimeQuoteChange" />.</summary>
      <param name="quote">Котировка, из которой будут скопированы изменения.</param>
      <param name="message">Сообщение с котировками.</param>
    </member>
    <member name="P:StockSharp.Algo.TimeQuoteChange.SecurityId">
      <summary>Идентификатор инструмента.</summary>
    </member>
    <member name="P:StockSharp.Algo.TimeQuoteChange.ServerTime">
      <summary>Серверная метка времени.</summary>
    </member>
    <member name="P:StockSharp.Algo.TimeQuoteChange.LocalTime">
      <summary>Локальная метка времени.</summary>
    </member>
    <member name="T:StockSharp.Algo.MarketRuleHelper">
      <summary>Вспомогательный класс для <see cref="T:StockSharp.Algo.IMarketRule" />.</summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.OrderRule`1.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие успешной регистрации заявки на бирже.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие успешной регистрации.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenActivated(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие активации стоп-заявки.</summary>
      <param name="stopOrder">Стоп-заявка, которую необходимо отслеживать на событие активации.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyMatched(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие частичного исполнения заявки.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие частичного исполнения.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenRegisterFailed(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие неудачной регистрации заявки на бирже.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие неудачной регистрации.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCancelFailed(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие неудачного снятия заявки на бирже.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие неудачного снятия.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCanceled(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие отмены заявки.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие отмены.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMatched(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие полного исполнения заявки.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие полного исполнения.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие изменения заявки.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие изменения.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие появления сделок по заявке.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие появления сделок.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenAllTrades(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие появления всех сделок по заявке.</summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие появления всех сделок.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMoneyLess(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие уменьшения денег в портфеле ниже определённого уровня.</summary>
      <param name="portfolio">Портфель, который необходимо отслеживать на событие уменьшении денег ниже определённого уровня.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <param name="money">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMoneyMore(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие увеличения денег в портфеле выше определённого уровня.</summary>
      <param name="portfolio">Портфель, который необходимо отслеживать на событие увеличения денег выше определённого уровня.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <param name="money">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLess(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие уменьшения позиции ниже определённого уровня.</summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие уменьшения ниже определенного уровня.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMore(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие увеличения позиции выше определенного уровня.</summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие увеличения выше определенного уровня.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Changed(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие изменения позиции.</summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие изменения.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие изменения инструмента.</summary>
      <param name="security">Инструмент, изменения которого будут отслеживаться.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewTrades(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие появления у инструмента новой сделки.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие появления новой сделки.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewOrderLogItems(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие появления у инструмента новых записей в логе заявок.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие появления новых записей в логе заявок.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMarketDepthChanged(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие изменения стакана по инструменту.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие изменения стакана по инструменту.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMarketDepthChanged(StockSharp.BusinessEntities.BasketSecurity,StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие изменения стаканов по корзине инструментов.</summary>
      <param name="security">Корзина инструментов, которую необходимо отслеживать на событие изменения стаканов по внутренним инструментам.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие превышения лучшего бида определенного уровня.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие превышения лучшего бида определенного уровня.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие понижения лучшего бида ниже определенного уровня.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения лучшего бида ниже определенного уровня.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие превышения лучшего оффера определенного уровня.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие превышения лучшего оффера определенного уровня.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие понижения лучшего оффера ниже определенного уровня.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения лучшего оффера ниже определенного уровня.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLastTradePriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие повышения цены последней сделки выше определённого уровня.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие повышения цены последней сделки выше определённого уровня.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLastTradePriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IConnector,StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие понижения цены последней сделки ниже определённого уровня.</summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения цены последней сделки ниже определённого уровня.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTimeCome(StockSharp.BusinessEntities.IConnector,System.DateTimeOffset[])">
      <summary>Создать правило, которое активизируется при наступлении точного времени, указанного через <paramref name="times" />.</summary>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="times">Точное время. Может быть передано несколько значений.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTimeCome(StockSharp.BusinessEntities.IConnector,System.Collections.Generic.IEnumerable{System.DateTimeOffset})">
      <summary>Создать правило, которое активизируется при наступлении точного времени, указанного через <paramref name="times" />.</summary>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="times">Точное время. Может быть передано несколько значений.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.MarketDepth)">
      <summary>Создать правило на событие изменения стакана.</summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenSpreadMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие повышения размера спреда стакана на определенную величину.</summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения спреда.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenSpreadLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие понижения размера спреда стакана на определенную величину.</summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения спреда.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие повышения лучшего бида на определенную величину.</summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие повышения лучшего бида на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие понижения лучшего бида на определенную величину.</summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие понижения лучшего бида на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие повышения лучшего оффера на определенную величину.</summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие повышения лучшего оффера на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие понижения лучшего оффера на определенную величину.</summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие понижения лучшего оффера на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenClosePriceMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие превышения цены закрытия свечи выше определенного уровня.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="candle">Свеча, которую необходимо отслеживать на событие превышения цены закрытия свечи выше определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenClosePriceLess(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие понижения цены закрытия свечи ниже определенного уровня.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="candle">Свеча, которую необходимо отслеживать на событие понижения цены закрытия свечи ниже определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTotalVolumeMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие превышения общего объема свечи выше определенного уровня.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="candle">Свеча, которую необходимо отслеживать на событие превышения общего объема выше определённого уровня.</param>
      <param name="volume">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCurrentCandleTotalVolumeMore(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,StockSharp.Messages.Unit)">
      <summary>Создать правило на событие превышения общего объема свечи выше определенного уровня.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек, из которой будет браться свеча.</param>
      <param name="volume">Уровень. Если тип <see cref="P:StockSharp.Messages.Unit.Type" /> равен <see cref="F:StockSharp.Messages.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesStarted(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Создать правило на событие появления новых свечек.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек, для которой будут отслеживаться новые свечи.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesChanged(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Создать правило на событие изменения свечи.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек, для которой будут отслеживаться измененные свечи.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Создать правило на событие окончания свечек.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек, для которой будут отслеживаться законченные свечи.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Создать правило на событие появления, изменения и икончания свечек.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек, для которой будут отслеживаться свечи.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle)">
      <summary>Создать правило на событие изменения свечи.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="candle">Свеча, для которой будет отслеживаться изменение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle)">
      <summary>Создать правило на событие окончания свечи.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="candle">Свеча, для которой будет отслеживаться окончание.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyFinished(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.IConnector,System.Decimal)">
      <summary>Создать правило на событие частичного окончания свечек.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="candle">Свеча, для которой будет отслеживаться частичное окончание.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="percent">Процент завершения свечи.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyFinishedCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries,StockSharp.BusinessEntities.IConnector,System.Decimal)">
      <summary>Создать правило на событие частичного окончания свечек.</summary>
      <param name="candleManager">Менеджер свечек.</param>
      <param name="series">Серия свечек, для которой будут отслеживаться частичное окончание свечи.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="percent">Процент завершения свечи.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenIntervalElapsed(StockSharp.BusinessEntities.IConnector,System.TimeSpan)">
      <summary>Создать правило на событие <see cref="E:StockSharp.BusinessEntities.IConnector.MarketTimeChanged" />, активизирующееся по истечению <paramref name="interval" />.</summary>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="interval">Интервал.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewMyTrade(StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие появления новой сделки.</summary>
      <param name="connector">Подключение, по которому будет отслеживаться появление сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewOrder(StockSharp.BusinessEntities.IConnector)">
      <summary>Создать правило на событие появление новых заявок.</summary>
      <param name="connector">Подключение, по которому будет отслеживаться появление заявок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule)">
      <summary>Сформировать правило (включить <see cref="P:StockSharp.Algo.IMarketRule.IsReady" />).</summary>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRuleContainer)">
      <summary>Сформировать правило (включить <see cref="P:StockSharp.Algo.IMarketRule.IsReady" />).</summary>
      <param name="rule">Правило.</param>
      <param name="container">Контейнер правил.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Apply``2(StockSharp.Algo.MarketRule{``0,``1})">
      <summary>Сформировать правило (включить <see cref="P:StockSharp.Algo.IMarketRule.IsReady" />).</summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого правилом аргумента.</typeparam>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Apply``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.IMarketRuleContainer)">
      <summary>Сформировать правило (включить <see cref="P:StockSharp.Algo.IMarketRule.IsReady" />).</summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого правилом аргумента.</typeparam>
      <param name="rule">Правило.</param>
      <param name="container">Контейнер правил.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.ActiveRule(StockSharp.Algo.IMarketRuleContainer,StockSharp.Algo.IMarketRule,System.Func{System.Boolean})">
      <summary>Активировать правило.</summary>
      <param name="container">Контейнер правил.</param>
      <param name="rule">Правило.</param>
      <param name="process">Обработчик.</param>
    </member>
    <member name="F:StockSharp.Algo.MarketRuleHelper.DefaultRuleContainer">
      <summary>Контейнер правил, который будет применяться по умолчанию ко всем правилам, не входящим в стратегию.</summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.SuspendRules(System.Action)">
      <summary>Обработать правила в приостановленном режиме (например, создать несколько правил и запустить их одновременно). После окончания работы метода все правила, присоединенные к контейнеру, возобновляют свою активность.</summary>
      <param name="action">Действие, которое необходимо обработать при остановленных правилах. Например, добавить одновременно несколько правил.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.SuspendRules(StockSharp.Algo.IMarketRuleContainer,System.Action)">
      <summary>Обработать правила в приостановленном режиме (например, создать несколько правил и запустить их одновременно). После окончания работы метода все правила, присоединенные к контейнеру, возобновляют свою активность.</summary>
      <param name="container">Контейнер правил.</param>
      <param name="action">Действие, которое необходимо обработать при остановленных правилах. Например, добавить одновременно несколько правил.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.TryRemoveRule(StockSharp.Algo.IMarketRuleContainer,StockSharp.Algo.IMarketRule,System.Boolean)">
      <summary>Удалить правило. Если правило выполняется в момент вызова данного метода, то оно не будет удалено.</summary>
      <param name="container">Контейнер правил.</param>
      <param name="rule">Правило.</param>
      <param name="checkCanFinish">Проверять возможность остановки правила.</param>
      <returns>
        <see langword="true" />, если правило было успешно удалено, <see langword="false" /> - если правило нельзя удалить в текущий момент.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.TryRemoveWithExclusive(StockSharp.Algo.IMarketRuleContainer,StockSharp.Algo.IMarketRule)">
      <summary>Удалить правило и все противоположные правила. Если правило выполняется в момент вызова данного метода, то оно не будет удалено.</summary>
      <param name="container">Контейнер правил.</param>
      <param name="rule">Правило.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Exclusive(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule)">
      <summary>Сделать правила взаимо исключающими.</summary>
      <param name="rule1">Первое правило.</param>
      <param name="rule2">Второе правило.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Or(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])">
      <summary>Объединить правила по условию ИЛИ.</summary>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Or(System.Collections.Generic.IEnumerable{StockSharp.Algo.IMarketRule})">
      <summary>Объединить правила по условию ИЛИ.</summary>
      <param name="rules">Правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Or``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.MarketRule{``0,``1}[])">
      <summary>Объединить правила по условию ИЛИ.</summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого правилом аргумента.</typeparam>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.And(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])">
      <summary>Объединить правила по условию И.</summary>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.And(System.Collections.Generic.IEnumerable{StockSharp.Algo.IMarketRule})">
      <summary>Объединить правила по условию И.</summary>
      <param name="rules">Правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.And``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.MarketRule{``0,``1}[])">
      <summary>Объединить правила по условию И.</summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого правилом аргумента.</typeparam>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.UpdateName``1(``0,System.String)">
      <summary>Задать новое имя правила <see cref="P:StockSharp.Algo.IMarketRule.Name" />.</summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <param name="name">Новое имя правила.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.UpdateLogLevel``1(``0,StockSharp.Logging.LogLevels)">
      <summary>Установить уровень логирования.</summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <param name="level">Уровень, на котором осуществлять логирование.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Suspend``1(``0,System.Boolean)">
      <summary>Приостановить или возобновить правило.</summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <param name="suspend">
        <see langword="true" /> - приостановить, <see langword="false" /> - возобновить.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Once``1(``0)">
      <summary>Сделать правило одноразовым (будет вызвано только один раз).</summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.AddRuleLog(StockSharp.Algo.IMarketRuleContainer,StockSharp.Logging.LogLevels,StockSharp.Algo.IMarketRule,System.String,System.Object[])">
      <summary>Записать сообщение от правила.</summary>
      <param name="container">Контейнер правил.</param>
      <param name="level">Уровень лог-сообщения.</param>
      <param name="rule">Правило.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения. Используются в случае, если message является форматирующей строкой. Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="T:StockSharp.Algo.IMarketRule">
      <summary>Интерфейс правила, активизирующее действие при наступлении рыночного условия.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.Name">
      <summary>Имя правила.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.Container">
      <summary>Контейнер правил.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.LogLevel">
      <summary>Уровень, на котором осуществлять логирование данного правила.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.IsSuspended">
      <summary>Приостановлено ли правило.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.IsReady">
      <summary>Сформировано ли правило.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.IsActive">
      <summary>Активировано ли правило в данный момент.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.Token">
      <summary>Токен правила, с которым он ассоциирован (например, для правила <see cref="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)" /> токеном будет являтся заявка). Если правильно ни с чем не ассоциировано, то будет возвращено <see langword="null" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.ExclusiveRules">
      <summary>Правила, которые противоположны данному. Удалаются автоматически при активации данного правила.</summary>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.Until(System.Func{System.Boolean})">
      <summary>Сделать правило периодичным (будет вызываться до тех пор, пока <paramref name="canFinish" /> не вернет <see langword="true" />).</summary>
      <param name="canFinish">Критерий окончания периодичности.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.Do(System.Action)">
      <summary>Добавить действие, активизирующееся при наступлении условия.</summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.Do(System.Action{System.Object})">
      <summary>Добавить действие, активизирующееся при наступлении условия.</summary>
      <param name="action">Действие, принимающее значение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.Do``1(System.Func{``0})">
      <summary>Добавить действие, возвращающее результат, активизирующееся при наступлении условия.</summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.CanFinish">
      <summary>Можно ли закончить правило.</summary>
      <returns>
        <see langword="true" />, если правило больше не нужно. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.MarketRule`2">
      <summary>Правило, активизирующее действие при наступлении рыночного условия.</summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого аргумента.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.#ctor(`0)">
      <summary>Инициализировать <see cref="T:StockSharp.Algo.MarketRule`2" />.</summary>
      <param name="token">Токен правила.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.CanFinish">
      <summary>Можно ли закончить правило.</summary>
      <returns>
        <see langword="true" />, если правило больше не нужно. Иначе, <see langword="false" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.Name">
      <summary>Имя правила.</summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.LogLevel">
      <summary>Уровень, на котором осуществлять логирование данного правила. По-умолчанию, <see cref="F:StockSharp.Logging.LogLevels.Inherit" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.IsSuspended">
      <summary>Приостановлено ли правило.</summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.Token">
      <summary>Токен правила, с которым он ассоциирован (например, для правила <see cref="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)" /> токеном будет являтся заявка). Если правильно ни с чем не ассоциировано, то будет возвращено <see langword="null" />.</summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.ExclusiveRules">
      <summary>Правила, которые противоположны данному. Удалаются автоматически при активации данного правила.</summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.Container">
      <summary>Контейнер правил.</summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Until(System.Func{System.Boolean})">
      <summary>Сделать правило периодичным (будет вызываться до тех пор, пока <paramref name="canFinish" /> не вернет <see langword="true" />).</summary>
      <param name="canFinish">Критерий окончания периодичности.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action{`1})">
      <summary>Добавить действие, активизирующееся при наступлении условия.</summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action{StockSharp.Algo.MarketRule{`0,`1},`1})">
      <summary>Добавить действие, активизирующееся при наступлении условия.</summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{`1,``0})">
      <summary>Добавить действие, возвращающее результат, активизирующееся при наступлении условия.</summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{StockSharp.Algo.MarketRule{`0,`1},`1,``0})">
      <summary>Добавить действие, возвращающее результат, активизирующееся при наступлении условия.</summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action)">
      <summary>Добавить действие, активизирующееся при наступлении условия.</summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{``0})">
      <summary>Добавить действие, возвращающее результат, активизирующееся при наступлении условия.</summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Activated(System.Action)">
      <summary>Добавить обработчик, который будет вызван при активации действия.</summary>
      <param name="handler">Обработчик.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Activated``1(System.Action{``0})">
      <summary>Добавить обработчик, принимающий аргумент из <see cref="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{``0})" />, который будет вызван при активации действия.</summary>
      <typeparam name="TResult">Тип возвращаемого результата из обработчика правила.</typeparam>
      <param name="handler">Обработчик.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Activate">
      <summary>Активировать правило.</summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Activate(`1)">
      <summary>Активировать правило.</summary>
      <param name="arg">Значение, которое будет передано в обработчик, зарегистрированный через <see cref="M:StockSharp.Algo.MarketRule`2.Do(System.Action{`1})" />.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.ToString">
      <summary>Получить строковое представление.</summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.DisposeManaged">
      <summary>Освободить занятые ресурсы.</summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.IsReady">
      <summary>Сформировано ли правило.</summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.IsActive">
      <summary>Активировано ли правило в данный момент.</summary>
    </member>
    <member name="T:StockSharp.Algo.IDailyInfoSoap">
      <summary>Интерфейс для доступа к сервису валют.</summary>
    </member>
    <member name="M:StockSharp.Algo.IDailyInfoSoap.GetCursOnDate(System.DateTime)">
      <summary>Получить курсы валют на определенную дату.</summary>
      <param name="date">Дата курсов.</param>
      <returns>Курсы валют.</returns>
    </member>
    <member name="T:StockSharp.Algo.ProcessStates">
      <summary>Состояния процесса.</summary>
    </member>
    <member name="F:StockSharp.Algo.ProcessStates.Stopped">
      <summary>Остановлена.</summary>
    </member>
    <member name="F:StockSharp.Algo.ProcessStates.Stopping">
      <summary>Останавливается.</summary>
    </member>
    <member name="F:StockSharp.Algo.ProcessStates.Started">
      <summary>Запущена.</summary>
    </member>
    <member name="T:StockSharp.Algo.MessageConverterHelper">
      <summary>Вспомогательный класс для конвертации бизнес-объектов (<see cref="N:StockSharp.BusinessEntities" />) в сообщения (<see cref="N:StockSharp.Messages" />) и обратно.</summary>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.MarketDepth)">
      <summary>Преобразовать <see cref="T:StockSharp.BusinessEntities.MarketDepth" /> в <see cref="T:StockSharp.Messages.QuoteChangeMessage" />.</summary>
      <param name="depth">
        <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.</param>
      <returns>
        <see cref="T:StockSharp.Messages.QuoteChangeMessage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMessage(StockSharp.Messages.MarketDataTypes)">
      <summary>Преобразовать тип свечи <see cref="T:StockSharp.Messages.MarketDataTypes" /> в тип сообщения <see cref="T:StockSharp.Messages.CandleMessage" />.</summary>
      <param name="type">Тип свечи.</param>
      <returns>Тип сообщения <see cref="T:StockSharp.Messages.CandleMessage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMarketDataType(System.Type)">
      <summary>Преобразовать тип сообщения <see cref="T:StockSharp.Messages.CandleMessage" /> в <see cref="T:StockSharp.Messages.MarketDataTypes" />.</summary>
      <param name="messageType">Тип сообщения <see cref="T:StockSharp.Messages.CandleMessage" />.</param>
      <returns>
        <see cref="T:StockSharp.Messages.MarketDataTypes" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMessageType(System.Type)">
      <summary>Преобразовать тип свечи <see cref="T:StockSharp.Algo.Candles.Candle" /> в тип сообщения <see cref="T:StockSharp.Messages.CandleMessage" />.</summary>
      <param name="candleType">Тип свечи <see cref="T:StockSharp.Algo.Candles.Candle" />.</param>
      <returns>Тип сообщения <see cref="T:StockSharp.Messages.CandleMessage" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleType(System.Type)">
      <summary>Преобразовать тип сообщения <see cref="T:StockSharp.Messages.CandleMessage" /> в тип свечи <see cref="T:StockSharp.Algo.Candles.Candle" />.</summary>
      <param name="messageType">Тип сообщения <see cref="T:StockSharp.Messages.CandleMessage" />.</param>
      <returns>Тип свечи <see cref="T:StockSharp.Algo.Candles.Candle" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMessageType(StockSharp.Messages.MarketDataTypes)">
      <summary>Преобразовать тип свечек <see cref="T:StockSharp.Messages.MarketDataTypes" /> в тип сообщения <see cref="T:StockSharp.Messages.MessageTypes" />.</summary>
      <param name="type">Тип свечек.</param>
      <returns>Тип сообщения.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandleMarketDataType(StockSharp.Messages.MessageTypes)">
      <summary>Преобразовать тип сообщения <see cref="T:StockSharp.Messages.MessageTypes" /> в тип свечек <see cref="T:StockSharp.Messages.MarketDataTypes" />.</summary>
      <param name="type">Тип сообщения.</param>
      <returns>Тип свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.Algo.Candles.Candle)">
      <summary>Преобразовать свечу в сообщение.</summary>
      <param name="candle">Свеча.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.MyTrade)">
      <summary>Преобразовать собственную сделку в сообщение.</summary>
      <param name="trade">Своя сделка.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Order)">
      <summary>Преобразовать заявку в сообщение.</summary>
      <param name="order">Заявка.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.OrderFail)">
      <summary>Преобразовать описание ошибки в сообщение.</summary>
      <param name="fail">Описание ошибки.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Trade)">
      <summary>Преобразовать тиковую сделку в сообщение.</summary>
      <param name="trade">Тиковая сделка.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>Преобразовать строчку лога заявок в сообщение.</summary>
      <param name="item">Строчка лога заявок.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.CreateRegisterMessage(StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId)">
      <summary>Создать сообщение регистрации новой заявки.</summary>
      <param name="order">Заявка.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.CreateCancelMessage(StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId,System.Int64,System.Nullable{System.Decimal})">
      <summary>Создать сообщение снятия старой заявки.</summary>
      <param name="order">Заявка.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="transactionId">Номер транзакции.</param>
      <param name="volume">Отменяемый объем.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.CreateReplaceMessage(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId)">
      <summary>Создать сообщение замены старой заявки на новую.</summary>
      <param name="oldOrder">Старая заявка.</param>
      <param name="newOrder">Новая заявка.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.CreateReplaceMessage(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.Messages.SecurityId)">
      <summary>Создать сообщение замены пары старых заявок на новые.</summary>
      <param name="oldOrder1">Старая заявка.</param>
      <param name="newOrder1">Новая заявка.</param>
      <param name="security1">Идентификатор инструмента.</param>
      <param name="oldOrder2">Старая заявка.</param>
      <param name="newOrder2">Новая заявка.</param>
      <param name="security2">Идентификатор инструмента.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityId})">
      <summary>Преобразовать инструмент в сообщение.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToLookupMessage(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityId})">
      <summary>Преобразовать фильтр <see cref="T:StockSharp.BusinessEntities.Security" /> в <see cref="T:StockSharp.Messages.SecurityLookupMessage" />.</summary>
      <param name="criteria">Критерии.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToSecurity(StockSharp.Messages.SecurityMessage)">
      <summary>Преобразовать сообщение в инструмент.</summary>
      <param name="message">Сообщение.</param>
      <returns>Инструмент стакана.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToStringId(StockSharp.Messages.SecurityId,StockSharp.Algo.SecurityIdGenerator)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.SecurityId" /> в <see cref="P:StockSharp.BusinessEntities.Security.Id" />.</summary>
      <param name="securityId">
        <see cref="T:StockSharp.Messages.SecurityId" /> значение.</param>
      <param name="generator">Генератор идентификаторов инструментов <see cref="P:StockSharp.BusinessEntities.Security.Id" />. Может быть <see langword="null" />.</param>
      <returns>
        <see cref="P:StockSharp.BusinessEntities.Security.Id" /> значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Portfolio)">
      <summary>Преобразовать портфель в сообщение.</summary>
      <param name="portfolio">Портфель.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToChangeMessage(StockSharp.BusinessEntities.Portfolio)">
      <summary>Преобразовать портфель в сообщение.</summary>
      <param name="portfolio">Портфель.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.Position)">
      <summary>Преобразовать позицию в сообщение.</summary>
      <param name="position">Позиция.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToChangeMessage(StockSharp.BusinessEntities.Position)">
      <summary>Преобразовать позицию в сообщение.</summary>
      <param name="position">Позиция.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Преобразовать площадку в сообщение.</summary>
      <param name="board">Площадка.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToExchange(StockSharp.Messages.BoardMessage)">
      <summary>Преобразовать сообщение в биржу.</summary>
      <param name="message">Сообщение.</param>
      <returns>Биржа.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToExchange(StockSharp.Messages.BoardMessage,StockSharp.BusinessEntities.Exchange)">
      <summary>Преобразовать сообщение в биржу.</summary>
      <param name="message">Сообщение.</param>
      <param name="exchange">Биржа.</param>
      <returns>Биржа.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToBoard(StockSharp.Messages.BoardMessage)">
      <summary>Преобразовать сообщение в площадку.</summary>
      <param name="message">Сообщение.</param>
      <returns>Площадка.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToBoard(StockSharp.Messages.BoardMessage,StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Преобразовать сообщение в площадку.</summary>
      <param name="message">Сообщение.</param>
      <param name="board">Площадка.</param>
      <returns>Площадка.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessages``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>Преобразовать торговые объекты в сообщения.</summary>
      <typeparam name="TEntity">Тип торгового объекта.</typeparam>
      <typeparam name="TMessage">Тип сообщения.</typeparam>
      <param name="entities">Торговые объекты.</param>
      <returns>Сообщений.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToEntities``2(System.Collections.Generic.IEnumerable{``0},StockSharp.BusinessEntities.Security)">
      <summary>Преобразовать сообщения в торговые объекты.</summary>
      <typeparam name="TMessage">Тип сообщения.</typeparam>
      <typeparam name="TEntity">Тип торгового объекта.</typeparam>
      <param name="messages">Сообщений.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Торговые объекты.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandles``1(System.Collections.Generic.IEnumerable{StockSharp.Messages.CandleMessage},StockSharp.BusinessEntities.Security,System.Type)">
      <summary>Преобразовать сообщения в торговые объекты.</summary>
      <typeparam name="TCandle">Тип свечи.</typeparam>
      <param name="messages">Сообщений.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="candleType">Тип свечи. Еспользуется, если <typeparamref name="TCandle" /> равен <see cref="T:StockSharp.Algo.Candles.Candle" />.</param>
      <returns>Торговые объекты.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandle``1(StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.CandleMessage" /> в свечу.</summary>
      <typeparam name="TCandle">Тип свечи.</typeparam>
      <param name="message">Сообщение.</param>
      <param name="series">Серия.</param>
      <returns>Свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandle(StockSharp.Messages.CandleMessage,StockSharp.Algo.Candles.CandleSeries)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.CandleMessage" /> в свечу.</summary>
      <param name="message">Сообщение.</param>
      <param name="series">Серия.</param>
      <returns>Свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandle(StockSharp.Messages.CandleMessage,StockSharp.BusinessEntities.Security)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.CandleMessage" /> в свечу.</summary>
      <param name="message">Сообщение.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToCandle(StockSharp.Messages.CandleMessage,System.Type,StockSharp.BusinessEntities.Security)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.CandleMessage" /> в свечу.</summary>
      <param name="message">Сообщение.</param>
      <param name="type">Тип свечи.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Свеча.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToTrade(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Security)">
      <summary>Преобразовать сообщение в тиковую сделку.</summary>
      <param name="message">Сообщение.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Тиковая сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToTrade(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Trade)">
      <summary>Преобразовать сообщение в тиковую сделку.</summary>
      <param name="message">Сообщение.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Тиковая сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToOrder(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Security)">
      <summary>Преобразовать сообщение в заявку.</summary>
      <param name="message">Сообщение.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToOrder(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Order)">
      <summary>Преобразовать сообщение в заявку.</summary>
      <param name="message">Сообщение.</param>
      <param name="order">заявка.</param>
      <returns>Заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMarketDepth(StockSharp.Messages.QuoteChangeMessage,StockSharp.BusinessEntities.Security,System.Func{StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Security})">
      <summary>Преобразовать сообщение в стакан.</summary>
      <param name="message">Сообщение.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="getSecurity">Функция для получения инструмента.</param>
      <returns>Стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMarketDepth(StockSharp.Messages.QuoteChangeMessage,StockSharp.BusinessEntities.MarketDepth,System.Func{StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Security})">
      <summary>Преобразовать сообщение в стакан.</summary>
      <param name="message">Сообщение.</param>
      <param name="marketDepth">Стакан.</param>
      <param name="getSecurity">Функция для получения инструмента.</param>
      <returns>Стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToQuoteChange(StockSharp.BusinessEntities.Quote)">
      <summary>Преобразовать котировку в сообщение.</summary>
      <param name="quote">Котировка.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToQuote(StockSharp.Messages.QuoteChange,StockSharp.BusinessEntities.Security,System.Func{StockSharp.Messages.SecurityId,StockSharp.BusinessEntities.Security})">
      <summary>Преобразовать сообщение в котировку.</summary>
      <param name="change">Сообщение.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="getSecurity">Функция для получения инструмента.</param>
      <returns>Котировка.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToOrderLog(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.Security)">
      <summary>Преобразовать сообщение в строчку лога заявок.</summary>
      <param name="message">Сообщение.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Строчка лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToOrderLog(StockSharp.Messages.ExecutionMessage,StockSharp.BusinessEntities.OrderLogItem)">
      <summary>Преобразовать сообщение в строчку лога заявок.</summary>
      <param name="message">Сообщение.</param>
      <param name="item">Строчка лога заявок.</param>
      <returns>Строчка лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessage(StockSharp.BusinessEntities.News)">
      <summary>Преобразовать новость в сообщение.</summary>
      <param name="news">Новости.</param>
      <returns>Сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToSecurityId(StockSharp.BusinessEntities.Security,StockSharp.Algo.SecurityIdGenerator)">
      <summary>Преобразовать инструмент в <see cref="T:StockSharp.Messages.SecurityId" />.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="idGenerator">Генератор идентификаторов инструментов <see cref="P:StockSharp.BusinessEntities.Security.Id" />.</param>
      <returns>Идентификатор инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToExternalId(StockSharp.Messages.SecurityId)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.SecurityId" /> в <see cref="T:StockSharp.BusinessEntities.SecurityExternalId" />.</summary>
      <param name="securityId">
        <see cref="T:StockSharp.Messages.SecurityId" />.</param>
      <returns>
        <see cref="T:StockSharp.BusinessEntities.SecurityExternalId" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.HasExternalId(StockSharp.Messages.SecurityId)">
      <summary>Проверить содержит ли <see cref="T:StockSharp.Messages.SecurityId" /> идентификаторы внешних источников.</summary>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>
        <see langword="true" />, если есть идентификаторы внешних источников, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToSecurityId(StockSharp.BusinessEntities.SecurityExternalId,System.String,System.String,System.Nullable{StockSharp.Messages.SecurityTypes})">
      <summary>Преобразовать <see cref="T:StockSharp.BusinessEntities.SecurityExternalId" /> в <see cref="T:StockSharp.Messages.SecurityId" />.</summary>
      <param name="externalId">
        <see cref="T:StockSharp.BusinessEntities.SecurityExternalId" />.</param>
      <param name="securityCode">Код инструента.</param>
      <param name="boardCode">Код площадки.</param>
      <param name="securityType">Тип инструмента.</param>
      <returns>
        <see cref="T:StockSharp.Messages.SecurityId" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.FillSecurityInfo(StockSharp.Messages.MarketDataMessage,StockSharp.Algo.Connector,StockSharp.BusinessEntities.Security)">
      <summary>Заполнить сообщение информацией об инструменте.</summary>
      <param name="message">Сообщение на подписку маркет-данных.</param>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Сообщение на подписку маркет-данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMarketDepth(StockSharp.Messages.Level1ChangeMessage,StockSharp.BusinessEntities.Security)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.Level1ChangeMessage" /> в <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.</summary>
      <param name="message">Сообщение.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToNews(StockSharp.Messages.NewsMessage)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.NewsMessage" /> в <see cref="T:StockSharp.BusinessEntities.News" />.</summary>
      <param name="message">Сообщение.</param>
      <returns>Новости.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToPortfolio(StockSharp.Messages.PortfolioMessage,StockSharp.BusinessEntities.Portfolio)">
      <summary>Преобразовать <see cref="T:StockSharp.Messages.PortfolioMessage" /> в <see cref="T:StockSharp.BusinessEntities.Portfolio" />.</summary>
      <param name="message">Сообщение.</param>
      <param name="portfolio">Портфель.</param>
      <returns>Портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.MessageConverterHelper.ToMessageType(System.Type,System.Object@)">
      <summary>Преобразовать тип бизнес-объекта в тип сообщения.</summary>
      <param name="dataType">Тип бизнес-объекта.</param>
      <param name="arg">Параметр данных.</param>
      <returns>Тип сообщения.</returns>
    </member>
    <member name="T:StockSharp.Algo.ShrinkRules">
      <summary>Правила округления цены.</summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.Auto">
      <summary>Автоматически определять, к меньшему или большему значению округлять.</summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.Less">
      <summary>Округлять к меньшему значению.</summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.More">
      <summary>Округлять к большему значению.</summary>
    </member>
    <member name="T:StockSharp.Algo.TraderHelper">
      <summary>Вспомогательный класс для предоставления различной алгоритмической функциональности.</summary>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.CheckModification(StockSharp.Messages.OrderStates,StockSharp.Messages.OrderStates)">
      <summary>Проверить на возможность изменения состояния заявки.</summary>
      <param name="prev">Предыдущее состояние заявки.</param>
      <param name="curr">Текущее состояние заявки.</param>
      <returns>Текущее состояние заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>Отфильтровать стакан от собственных заявок.</summary>
      <param name="quotes">Исходный стакан, который необходимо отфильтровать.</param>
      <param name="ownOrders">Активные заявки по данному инструменту.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Отфильтрованный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.IMarketDataProvider,System.Nullable{StockSharp.Messages.Sides},StockSharp.Algo.MarketPriceTypes,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>Высчитать текущую цену по инструменту в зависимости от направления заявки.</summary>
      <param name="security">Инструмент, по которому вычисляется текущая цена.</param>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="direction">Направление заявки.</param>
      <param name="priceType">Тип рыночной цены.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Текущая цена. Если информации в стакане недостаточно, будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Sides,StockSharp.Algo.MarketPriceTypes,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>Высчитать текущую цену по стакану в зависимости от направления заявки.</summary>
      <param name="depth">Стакан, по которому нужно высчитать текущую цену.</param>
      <param name="side">Направление заявки. Если это покупка, то будет использоваться значение <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestAsk" />, иначе <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestBid" />.</param>
      <param name="priceType">Тип текущей цены.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Текущая цена. Если информации в стакане недостаточно, будет возвращено <see langword="null" />.</returns>
      <remarks>Для корректной работы метода необходимо запустить экспорт стакана.</remarks>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.MarketDepthPair,StockSharp.Messages.Sides,StockSharp.Algo.MarketPriceTypes)">
      <summary>Высчитать текущую цену по лучшей паре котировок в зависимости от направления заявки.</summary>
      <param name="bestPair">Лучшая пара котировок, по которой вычисляется текущая цена.</param>
      <param name="side">Направление заявки. Если это покупка, то будет использоваться значение <see cref="P:StockSharp.BusinessEntities.MarketDepthPair.Ask" />, иначе <see cref="P:StockSharp.BusinessEntities.MarketDepthPair.Bid" />.</param>
      <param name="priceType">Тип текущей цены.</param>
      <returns>Текущая цена. Если информации в стакане недостаточно, будет возвращено <see langword="null" />.</returns>
      <remarks>Для корректной работы метода необходимо запустить экспорт стакана.</remarks>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ApplyOffset(StockSharp.Messages.Unit,StockSharp.Messages.Sides,StockSharp.Messages.Unit,StockSharp.BusinessEntities.Security)">
      <summary>Применить для цены сдвиг в зависимости от направления <paramref name="side" />.</summary>
      <param name="price">Цена.</param>
      <param name="side">Направление заявки, которое используется в качестве направления для сдвига (для покупки сдвиг прибавляется, для продажи - вычитается).</param>
      <param name="offset">Сдвиг цены.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Новая цена.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ShrinkPrice(StockSharp.BusinessEntities.Order,StockSharp.Algo.ShrinkRules)">
      <summary>Обрезать цену для заявки, чтобы она стала кратной минимальному шагу, а так же ограничить количество знаков после запятой.</summary>
      <param name="order">Заявка, для которой будет обрезана цена <see cref="P:StockSharp.BusinessEntities.Order.Price" />.</param>
      <param name="rule">Правило округления цены.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ShrinkPrice(StockSharp.BusinessEntities.Security,System.Decimal,StockSharp.Algo.ShrinkRules)">
      <summary>Обрезать цену, чтобы она стала кратной минимальному шагу, а так же ограничить количество знаков после запятой.</summary>
      <param name="security">Инструмент, из которого берется значения <see cref="P:StockSharp.BusinessEntities.Security.PriceStep" /> и <see cref="P:StockSharp.BusinessEntities.Security.Decimals" />.</param>
      <param name="price">Цена, которую нужно сделать кратной.</param>
      <param name="rule">Правило округления цены.</param>
      <returns>Кратная цена.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.MyTrade)">
      <summary>Получить позицию по Моей сделке.</summary>
      <param name="trade">Моя сделка, по которой рассчитывается позиция. При покупке объем сделки <see cref="P:StockSharp.BusinessEntities.Trade.Volume" /> берется с положительным знаком, при продаже - с отрицательным.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.Messages.ExecutionMessage,System.Boolean)">
      <summary>Получить позицию по Моей сделке.</summary>
      <param name="message">Моя сделка, по которой рассчитывается позиция. При покупке объем сделки <see cref="P:StockSharp.Messages.ExecutionMessage.TradeVolume" /> берется с положительным знаком, при продаже - с отрицательным.</param>
      <param name="byOrder">Проверять реализованный объем по балансу заявке (<see cref="P:StockSharp.Messages.ExecutionMessage.Balance" />) или по полученным сделкам. По-умолчанию проверяется по заявке.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPnL(StockSharp.BusinessEntities.Portfolio)">
      <summary>Рассчитать прибыль-убыток на основе портфеля.</summary>
      <param name="portfolio">Портфель, для которого необходимо рассчитать прибыль-убыток.</param>
      <returns>Прибыль-убыток.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.ExchangeBoard,System.DateTimeOffset)">
      <summary>Проверить, является ли время торгуемым (началась ли сессия, не закончилась ли, нет ли клиринга).</summary>
      <param name="board">Информация о площадке.</param>
      <param name="time">Передаваемое время, которое нужно проверить.</param>
      <returns>
        <see langword="true" />, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.ExchangeBoard,System.DateTimeOffset,StockSharp.Messages.WorkingTimePeriod@)">
      <summary>Проверить, является ли время торгуемым (началась ли сессия, не закончилась ли, нет ли клиринга).</summary>
      <param name="board">Информация о площадке.</param>
      <param name="time">Передаваемое время, которое нужно проверить.</param>
      <param name="period">Текущий рабочий период.</param>
      <returns>
        <see langword="true" />, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.Messages.BoardMessage,System.DateTimeOffset)">
      <summary>Проверить, является ли время торгуемым (началась ли сессия, не закончилась ли, нет ли клиринга).</summary>
      <param name="board">Информация о площадке.</param>
      <param name="time">Передаваемое время, которое нужно проверить.</param>
      <returns>
        <see langword="true" />, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.Messages.BoardMessage,System.DateTimeOffset,StockSharp.Messages.WorkingTimePeriod@)">
      <summary>Проверить, является ли время торгуемым (началась ли сессия, не закончилась ли, нет ли клиринга).</summary>
      <param name="board">Информация о площадке.</param>
      <param name="time">Передаваемое время, которое нужно проверить.</param>
      <param name="period">Текущий рабочий период.</param>
      <returns>
        <see langword="true" />, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeDate(StockSharp.BusinessEntities.ExchangeBoard,System.DateTimeOffset,System.Boolean)">
      <summary>Проверить, является ли дата торгуемой.</summary>
      <param name="board">Информация о площадке.</param>
      <param name="date">Передаваемая дата, которую необходимо проверить.</param>
      <param name="checkHolidays">Проверять ли переданную дату на день недели (суббота и воскресенье являются выходными и для них будет возвращено <see langword="false" />).</param>
      <returns>
        <see langword="true" />, если торгуемая дата, иначе, неторгуемая.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeDate(StockSharp.Messages.BoardMessage,System.DateTimeOffset,System.Boolean)">
      <summary>Проверить, является ли дата торгуемой.</summary>
      <param name="board">Информация о площадке.</param>
      <param name="date">Передаваемая дата, которую необходимо проверить.</param>
      <param name="checkHolidays">Проверять ли переданную дату на день недели (суббота и воскресенье являются выходными и для них будет возвращено <see langword="false" />).</param>
      <returns>
        <see langword="true" />, если торгуемая дата, иначе, неторгуемая.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.LastTradeDay(StockSharp.Messages.BoardMessage,System.DateTimeOffset,System.Boolean)">
      <summary>Получить последний торговый день.</summary>
      <param name="board">Информация о площадке.</param>
      <param name="date">Дата начала проверки.</param>
      <param name="checkHolidays">Проверять ли переданную дату на день недели (суббота и воскресенье являются выходными и для них будет возвращено <see langword="false" />).</param>
      <returns>Дата посл. сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ReRegisterClone(StockSharp.BusinessEntities.Order,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Создать копию заявки для перерегистрации.</summary>
      <param name="oldOrder">Оригинальная заявка.</param>
      <param name="newPrice">Цена новой заявки.</param>
      <param name="newVolume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.Messages.Currency,StockSharp.Messages.CurrencyTypes)">
      <summary>Сконвертировать одну валюту в другую.</summary>
      <param name="currencyFrom">Валюта, из которой нужно произвести конвертацию.</param>
      <param name="currencyTypeTo">Код валюты, в которую нужно произвести конвертацию.</param>
      <returns>Сконвертированная валюта.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.Messages.CurrencyTypes,StockSharp.Messages.CurrencyTypes)">
      <summary>Получить курс конвертации одной валюту в другую.</summary>
      <param name="from">Код валюты, из которой нужно произвести конвертацию.</param>
      <param name="to">Код валюты, в которую нужно произвести конвертацию.</param>
      <returns>Курс.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.Messages.CurrencyTypes,StockSharp.Messages.CurrencyTypes,System.DateTime)">
      <summary>Получить курс конвертации одной валюту в другую на определенную дату.</summary>
      <param name="from">Код валюты, из которой нужно произвести конвертацию.</param>
      <param name="to">Код валюты, в которую нужно произвести конвертацию.</param>
      <param name="date">Дата курса.</param>
      <returns>Курс.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepth)">
      <summary>Создать из обычного стакана разреженный с минимальным шагом цены равный <see cref="P:StockSharp.BusinessEntities.Security.PriceStep" />. <remarks>
                        В разреженном стакане показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
                        </remarks>.</summary>
      <param name="depth">Обычный стакан.</param>
      <returns>Разреженный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepth,System.Decimal)">
      <summary>Создать из обычного стакана разреженный. <remarks>
                        В разреженном стакане показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
                        </remarks>.</summary>
      <param name="depth">Обычный стакан.</param>
      <param name="priceStep">Минимальный шаг цены.</param>
      <returns>Разреженный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepthPair,System.Decimal)">
      <summary>Создать из пары котировок разреженную коллекцию котировок, которая будет входить в диапазон между парой. <remarks>
                        В разреженной коллекции показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
                        </remarks>.</summary>
      <param name="pair">Пара обычных котировок.</param>
      <param name="priceStep">Минимальный шаг цены.</param>
      <returns>Разреженная коллекция котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Decimal)">
      <summary>Создать из обычных котировок разреженную коллекцию котировок. <remarks>
                        В разреженной коллекции показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
                        </remarks>.</summary>
      <param name="quotes">Обычные котировки. Коллекция должна содержать одинаково направленные котировки (только биды или только оффера).</param>
      <param name="priceStep">Минимальный шаг цены.</param>
      <returns>Разреженная коллекция котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Join(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>Объединить первоначальный стакан, и его разреженное представление.</summary>
      <param name="original">Первоначальный стакан.</param>
      <param name="rare">Разреженный стакан.</param>
      <returns>Объединенный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)">
      <summary>Сгруппировать стакан по ценовому диапазону.</summary>
      <param name="depth">Стакан, который необходимо сгруппировать.</param>
      <param name="priceRange">Ценовой диапазон, по которому необходимо произвести группировку.</param>
      <returns>Сгруппированный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.UnGroup(StockSharp.BusinessEntities.MarketDepth)">
      <summary>Разгруппировать стакан, сгруппированный через метод <see cref="M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Unit)" />.</summary>
      <param name="depth">Сгруппированный стакан.</param>
      <returns>Разгруппированный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.EmulateTrades(StockSharp.BusinessEntities.MarketDepth,System.Collections.Generic.IEnumerable{StockSharp.Messages.ExecutionMessage})">
      <summary>Удалить в стакане те уровни, которые должны исчезнуть в случае появления сделок <paramref name="trades" />.</summary>
      <param name="depth">Стакан, который необходимо очистить.</param>
      <param name="trades">Trades.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Group(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},StockSharp.Messages.Unit)">
      <summary>Сгруппировать котировки по ценовому диапазону.</summary>
      <param name="quotes">Котировки, которые необходимо сгруппировать.</param>
      <param name="priceRange">Ценовой диапазон, по которому необходимо произвести группировку.</param>
      <returns>Сгруппированные котировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDelta(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.QuoteChangeMessage)">
      <summary>Вычислить изменение между стаканами.</summary>
      <param name="from">Первый стакан.</param>
      <param name="to">Второй стакан.</param>
      <returns>Стакан, хранящий только приращения.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDelta(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},StockSharp.Messages.Sides)">
      <summary>Вычислить изменение между котировками.</summary>
      <param name="from">Первые котировки.</param>
      <param name="to">Вторые котировки.</param>
      <param name="side">Направление, показывающее тип котировок.</param>
      <returns>Изменения.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddDelta(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.QuoteChangeMessage)">
      <summary>Прибавить изменение к первому стакану.</summary>
      <param name="from">Первый стакан.</param>
      <param name="delta">Именить.</param>
      <returns>Измененный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddDelta(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Boolean)">
      <summary>Прибавить изменение к котировки.</summary>
      <param name="fromQuotes">Котировки.</param>
      <param name="deltaQuotes">Изменения.</param>
      <param name="isBids">Признак направления котировок.</param>
      <returns>Измененные котировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsCanceled(StockSharp.BusinessEntities.Order)">
      <summary>Проверить, отменена ли заявка.</summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>
        <see langword="true" />, если заявка отменена, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatched(StockSharp.BusinessEntities.Order)">
      <summary>Проверить, исполнена ли полностью заявка.</summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>
        <see langword="true" />, если заявка полностью исполнена, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatchedPartially(StockSharp.BusinessEntities.Order)">
      <summary>Проверить, реализована ли часть объема в заявке.</summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>
        <see langword="true" />, если часть объема реализована, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatchedEmpty(StockSharp.BusinessEntities.Order)">
      <summary>Проверить, что не реализован ни один контракт в заявке.</summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>
        <see langword="true" />, если ни один контракт не реализована, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsCanceled(StockSharp.Messages.ExecutionMessage)">
      <summary>Проверить, отменена ли заявка.</summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>
        <see langword="true" />, если заявка отменена, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatched(StockSharp.Messages.ExecutionMessage)">
      <summary>Проверить, исполнена ли полностью заявка.</summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>
        <see langword="true" />, если заявка полностью исполнена, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatchedPartially(StockSharp.Messages.ExecutionMessage)">
      <summary>Проверить, реализована ли часть объема в заявке.</summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>
        <see langword="true" />, если часть объема реализована, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatchedEmpty(StockSharp.Messages.ExecutionMessage)">
      <summary>Проверить, что не реализован ни один контракт в заявке.</summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>
        <see langword="true" />, если ни один контракт не реализована, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTrades(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Получить сделки заявки.</summary>
      <param name="order">Заявки.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Trades.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMatchedVolume(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector,System.Boolean)">
      <summary>Рассчитать реализованную часть объема для заявки.</summary>
      <param name="order">Заявка, для которой необходимо рассчитать реализованную часть объема.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <param name="byOrder">Проверять реализованный объем по балансу заявке (<see cref="P:StockSharp.BusinessEntities.Order.Balance" />) или по полученным сделкам. По-умолчанию проверяется по заявке.</param>
      <returns>Реализованная часть объема.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.IConnector)">
      <summary>Получить средневзрешанную цену исполнения заявки.</summary>
      <param name="order">Заявка, для которой необходимо получить средневзрешанную цену исполнения.</param>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <returns>Средневзвешанная цена. Если заявка не существует ни одной сделки, то возвращается 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>Получить средневзрешанную цену исполнения по собственным сделкам.</summary>
      <param name="trades">Сделки, для которых необходимо получить средневзрешанную цену исполнения.</param>
      <returns>Средневзвешанная цена. Если сделки отсутствуют, то возвращается 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Order)">
      <summary>Получить вероятные сделки по стакану для заданной заявки.</summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="order">Заявку, для которой необходимо рассчитать вероятные сделки.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Sides,System.Decimal)">
      <summary>Получить вероятные сделки по стакану для рыночной цены и заданного объема.</summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="orderDirection">Направление заявки.</param>
      <param name="volume">Объем, который предполагается реализовать.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.Messages.Sides,System.Decimal,System.Decimal)">
      <summary>Получить вероятные сделки по стакану для заданных цены и объема.</summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="orderDirection">Направление заявки.</param>
      <param name="volume">Объем, который предполагается реализовать.</param>
      <param name="price">Цена, по которой предполагает выставить заявку. Если она равна 0, то будет рассматриваться вариант рыночной заявки.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Invert(StockSharp.Messages.Sides)">
      <summary>Поменять направление на противоположное.</summary>
      <param name="side">Первоначальное направление.</param>
      <returns>Противоположное направление.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDirection(StockSharp.BusinessEntities.Position)">
      <summary>Получить направление заявки для позиции.</summary>
      <param name="position">Значение позиции.</param>
      <returns>Направление заявки.</returns>
      <remarks>Положительное значение равно <see cref="F:StockSharp.Messages.Sides.Buy" />, отрицательное - <see cref="F:StockSharp.Messages.Sides.Sell" />, нулевое - <see langword="null" />.</remarks>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDirection(System.Decimal)">
      <summary>Получить направление заявки для позиции.</summary>
      <param name="position">Значение позиции.</param>
      <returns>Направление заявки.</returns>
      <remarks>Положительное значение равно <see cref="F:StockSharp.Messages.Sides.Buy" />, отрицательное - <see cref="F:StockSharp.Messages.Sides.Sell" />, нулевое - <see langword="null" />.</remarks>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.CancelOrders(StockSharp.BusinessEntities.IConnector,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.Messages.Sides},StockSharp.BusinessEntities.ExchangeBoard,StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.Messages.SecurityTypes})">
      <summary>Отменить группу заявок на бирже по фильтру.</summary>
      <param name="connector">Подключение взаимодействия с торговыми системами.</param>
      <param name="orders">Группа заявок, из которой необходимо найти требуемые заявки и отменить их.</param>
      <param name="isStopOrder">
        <see langword="true" />, если нужно отменить только стоп-заявки, <see langword="false" /> - если только обычный и <see langword="null" /> - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно <see langword="null" />, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно <see langword="null" />, то направление не попадает в фильтр снятия заявок.</param>
      <param name="board">Торговая площадка. Если значение равно <see langword="null" />, то площадка не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно <see langword="null" />, то инструмент не попадает в фильтр снятия заявок.</param>
      <param name="securityType">Тип инструмента. Если значение равно <see langword="null" />, тип не используется.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Security)">
      <summary>Отфильтровать сделки для заданного инструмента.</summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Portfolio)">
      <summary>Отфильтровать заявки для заданного портфеля.</summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.Messages.OrderStates)">
      <summary>Отфильтровать заявки для заданного состояния.</summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="state">Состояние заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.Messages.Sides)">
      <summary>Отфильтровать заявки для заданного направления.</summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="direction">Направление заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},StockSharp.BusinessEntities.Security)">
      <summary>Отфильтровать сделки для заданного инструмента.</summary>
      <param name="trades">Все сделки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Отфильтровать сделки для заданного временного периода.</summary>
      <param name="trades">Все сделки, в которых необходимо искать требуемые.</param>
      <param name="from">Дата, с которой нужно искать сделки.</param>
      <param name="to">Дата, до которой нужно искать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.BusinessEntities.Security)">
      <summary>Отфильтровать позиции для заданного инструмента.</summary>
      <param name="positions">Все позиции, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать позиции.</param>
      <returns>Отфильтрованные позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.BusinessEntities.Portfolio)">
      <summary>Отфильтровать позиции для заданного портфеля.</summary>
      <param name="positions">Все позиции, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать позиции.</param>
      <returns>Отфильтрованные позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Security)">
      <summary>Отфильтровать собственные сделки для заданного инструмента.</summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, по которому нужно найти сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Portfolio)">
      <summary>Отфильтровать собственные сделки для заданного портфеля.</summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Order)">
      <summary>Отфильтровать собственные сделки для заданной заявки.</summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="order">Заявка, для которой нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.FilterSecurities(StockSharp.Algo.Connector,StockSharp.Messages.SecurityLookupMessage)">
      <summary>Отфильтровать <see cref="P:StockSharp.Algo.Connector.Securities" /> по заданному критерию.</summary>
      <param name="connector">Инструменты.</param>
      <param name="criteria">Критерий, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetSecurityCriteria(StockSharp.Algo.Connector,StockSharp.Messages.SecurityLookupMessage)">
      <summary>Создать критерий поиска <see cref="T:StockSharp.BusinessEntities.Security" /> из <see cref="T:StockSharp.Messages.SecurityLookupMessage" />.</summary>
      <param name="connector">Подключение к торговой системе.</param>
      <param name="criteria">Критерий, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Критерий поиска.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>Отфильтровать инструменты по торговой площадке.</summary>
      <param name="securities">Инструменты.</param>
      <param name="board">Торговая площадка.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.Security)">
      <summary>Отфильтровать инструменты по заданному критерию.</summary>
      <param name="securities">Инструменты.</param>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsFullEmpty(StockSharp.BusinessEntities.MarketDepth)">
      <summary>Определить, является ли стакан пустым.</summary>
      <param name="depth">Стакан.</param>
      <returns>
        <see langword="true" />, если стакан пустой, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsHalfEmpty(StockSharp.BusinessEntities.MarketDepth)">
      <summary>Определить, является ли стакан пустым на половину.</summary>
      <param name="depth">Стакан.</param>
      <returns>
        <see langword="true" />, если стакан пустой на половину, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddOrSubtractTradingDays(StockSharp.BusinessEntities.ExchangeBoard,System.DateTimeOffset,System.Int32,System.Boolean)">
      <summary>Получить дату T +/- от текущей.</summary>
      <param name="board">Информация о площадке.</param>
      <param name="date">Дата начала.</param>
      <param name="n">Количество добавляемых или вычитаемых торговых дней.</param>
      <param name="checkHolidays">Проверять ли переданную дату на день недели (суббота и воскресенье являются выходными и для них будет возвращено <see langword="false" />).</param>
      <returns>Результирующая дата.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetExpiryDates(System.DateTime,System.DateTime)">
      <summary>Получить даты экспирации для <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Forts" />.</summary>
      <param name="from">Начало диапазона экспираций.</param>
      <param name="to">Окончание диапазона экспираций.</param>
      <returns>Даты экспирации.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFortsJumps(System.String,System.DateTime,System.DateTime,System.Func{System.String,StockSharp.BusinessEntities.Security},System.Boolean)">
      <summary>Получить для базовой части кода инструмента реальные экспирирующиеся инструменты.</summary>
      <param name="baseCode">Базовая часть кода инструмента.</param>
      <param name="from">Начало диапазона экспираций.</param>
      <param name="to">Окончание диапазона экспираций.</param>
      <param name="getSecurity">Функция для получения инструмента по коду.</param>
      <param name="throwIfNotExists">Сгенерировать исключение, если какой-либо из инструментов отсутствует.</param>
      <returns>Экспирирующиеся инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFortsJumps(StockSharp.Algo.ContinuousSecurity,StockSharp.BusinessEntities.ISecurityProvider,System.String,System.DateTime,System.DateTime,System.Boolean)">
      <summary>Получить для непрерывного инструмента реальные экспирирующиеся инструменты.</summary>
      <param name="continuousSecurity">Непрерывный инструмент.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="baseCode">Базовая часть кода инструмента.</param>
      <param name="from">Начало диапазона экспираций.</param>
      <param name="to">Окончание диапазона экспираций.</param>
      <param name="throwIfNotExists">Сгенерировать исключение, если какой-либо из инструментов для переданного <paramref name="continuousSecurity" /> отсутствует.</param>
      <returns>Экспирирующиеся инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.FillFortsJumps(StockSharp.Algo.ContinuousSecurity,StockSharp.BusinessEntities.ISecurityProvider,System.String,System.DateTime,System.DateTime)">
      <summary>Заполнить переходы <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" />.</summary>
      <param name="continuousSecurity">Непрерывный инструмент.</param>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="baseCode">Базовая часть кода инструмента.</param>
      <param name="from">Начало диапазона экспираций.</param>
      <param name="to">Окончание диапазона экспираций.</param>
    </member>
    <member name="P:StockSharp.Algo.TraderHelper.NativePositionManager.StockSharp#Algo#Positions#IPositionManager#Position">
      <summary>Суммарное значение позиции.</summary>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToPositionManager(StockSharp.BusinessEntities.Position)">
      <summary>Сконвертировать позицию в объект типа <see cref="T:StockSharp.Algo.Positions.IPositionManager" />.</summary>
      <param name="position">Позиция.</param>
      <returns>Менеджера расчета позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddOrderInfoLog(StockSharp.Logging.ILogReceiver,StockSharp.BusinessEntities.Order,System.String,System.Func{System.String})">
      <summary>Записать сообщение о заявке в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="order">Заявка.</param>
      <param name="operation">Операция, которая проводится с заявкой.</param>
      <param name="getAdditionalInfo">Дополнительная информация о заявке.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddOrderErrorLog(StockSharp.Logging.ILogReceiver,StockSharp.BusinessEntities.Order,System.String,System.Func{System.String})">
      <summary>Записать ошибку о заявке в лог.</summary>
      <param name="receiver">Получатель логов.</param>
      <param name="order">Заявка.</param>
      <param name="operation">Операция, которая проводится с заявкой.</param>
      <param name="getAdditionalInfo">Дополнительная информация о заявке.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Portfolio,StockSharp.Messages.PortfolioChangeMessage)">
      <summary>Применить изменения к портфелю.</summary>
      <param name="portfolio">Портфель.</param>
      <param name="message">Сообщение об изменении портфеля.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Position,StockSharp.Messages.PositionChangeMessage)">
      <summary>Применить изменения к позиции.</summary>
      <param name="position">Позиция.</param>
      <param name="message">Сообщение об изменении позиции.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{StockSharp.Messages.Level1Fields,System.Object}},System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Применить изменения к инструменту.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="changes">Изменения.</param>
      <param name="serverTime">Серверное время изменения.</param>
      <param name="localTime">Метка локального времени, когда сообщение было получено/создано.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1ChangeMessage)">
      <summary>Применить изменения к инструменту.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="message">Изменения.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ApplyChanges(StockSharp.BusinessEntities.Security,StockSharp.Messages.SecurityMessage)">
      <summary>Применить изменения к инструменту.</summary>
      <param name="security">Инструмент стакана.</param>
      <param name="message">Мета информация.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Object)">
      <summary>Добавить изменение в коллекцию.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Decimal)">
      <summary>Добавить изменение в коллекцию.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Int32)">
      <summary>Добавить изменение в коллекцию.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Add``2(``0,``1,System.Int64)">
      <summary>Добавить изменение в коллекцию.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Decimal)">
      <summary>Добавить изменение в коллекцию, если значение отлично от 0.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{System.Decimal})">
      <summary>Добавить изменение в коллекцию, если значение отлично от 0 и <see langword="null" />.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Int32)">
      <summary>Добавить изменение в коллекцию, если значение отлично от 0.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Nullable{System.Int32})">
      <summary>Добавить изменение в коллекцию, если значение отлично от 0 и <see langword="null" />.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.TryAdd``2(``0,``1,System.Int64)">
      <summary>Добавить изменение в коллекцию, если значение отлично от 0.</summary>
      <typeparam name="TMessage">Тип сообщения с изменениями.</typeparam>
      <typeparam name="TChange">Вид изменения.</typeparam>
      <param name="message">Сообщение с изменениями.</param>
      <param name="type">Вид изменения.</param>
      <param name="value">Значение изменения.</param>
      <returns>Сообщение с изменениями.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToMicexCurrencyName(StockSharp.Messages.CurrencyTypes)">
      <summary>Преобразовать тип валюты в название в формате ММВБ.</summary>
      <param name="type">Тип валюты.</param>
      <returns>Название валюты в формате ММВБ.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.FromMicexCurrencyName(System.String)">
      <summary>Преобразовать название валюты в формате ММВБ в <see cref="T:StockSharp.Messages.CurrencyTypes" />.</summary>
      <param name="name">Название валюты в формате ММВБ.</param>
      <returns>Тип валюты. Если название валюты пустое, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPeriod(StockSharp.Messages.WorkingTime,System.DateTime)">
      <summary>Получить период для режима.</summary>
      <param name="time">Режим торгов.</param>
      <param name="date">Дата во времени, для которой будет искать подходящий период.</param>
      <returns>Период расписания. Если ни один период не подходит, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetSecurityClassInfo(System.Collections.Generic.IDictionary{System.String,Ecng.Common.RefPair{StockSharp.Messages.SecurityTypes,System.String}},System.String)">
      <summary>Получить описание инструмента по классу.</summary>
      <param name="securityClassInfo">Описание классов инструментов, в зависимости от которых будут проставляться параметры в <see cref="P:StockSharp.Messages.SecurityMessage.SecurityType" /> и <see cref="P:StockSharp.Messages.SecurityId.BoardCode" />.</param>
      <param name="secClass">Класс инструмента.</param>
      <returns>Описание инструмента. Если класс не найден, то будет возвращено значение <see langword="null" /> в качестве типа инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetBoardCode(StockSharp.Messages.IMessageAdapter,System.String)">
      <summary>Получить код площадки для класса инструмента.</summary>
      <param name="adapter">Адаптер к торговой системе.</param>
      <param name="secClass">Класс инструмента.</param>
      <returns>Код площадки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPriceStep(System.Int32)">
      <summary>Получить шаг цены на основе точности.</summary>
      <param name="decimals">Точность.</param>
      <returns>Шаг цены инструмента.</returns>
    </member>
    <member name="F:StockSharp.Algo.TraderHelper.SecurityPairSeparator">
      <summary>Символ, заменяющий '/' в идентификаторе инструмента, как USD/EUR. Равен '__'.</summary>
    </member>
    <member name="F:StockSharp.Algo.TraderHelper.SecurityStarSeparator">
      <summary>Символ, заменяющий '*' в идентификаторе инструмента, как C.BPO-*@CANADIAN. Равен '##STAR##'.</summary>
    </member>
    <member name="F:StockSharp.Algo.TraderHelper.SecurityColonSeparator">
      <summary>Символ, заменяющий ':' в идентификаторе инструмента, как AA-CA:SPB@SPBEX. Равен '##COLON##'.</summary>
    </member>
    <member name="F:StockSharp.Algo.TraderHelper.SecurityVerticalBarSeparator">
      <summary>Разделитель, заменяющий '|' в пути для инструментов вида AA-CA|SPB@SPBEX. Равно '##VBAR##'.</summary>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.SecurityIdToFolderName(System.String)">
      <summary>Преобразовать идентификатор инструмента в название директории с заменой зарезервированных символов.</summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Название директории.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.FolderNameToSecurityId(System.String)">
      <summary>Обратное преобразование от метода <see cref="M:StockSharp.Algo.TraderHelper.SecurityIdToFolderName(System.String)" />.</summary>
      <param name="folderName">Название директории.</param>
      <returns>Идентификатор инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.CandleArgToFolderName(System.Object)">
      <summary>Преобразовать параметр свечи в название директории с заменой зарезервированных символов.</summary>
      <param name="arg">Параметр свечи.</param>
      <returns>Название директории.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.LookupById(StockSharp.BusinessEntities.ISecurityProvider,System.String)">
      <summary>Получить инструмент по идентификатору.</summary>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Полученный инструмент. Если инструмент по данным критериям отсутствует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.LookupByNativeId(StockSharp.BusinessEntities.ISecurityProvider,StockSharp.Algo.Storages.INativeIdStorage,System.String,System.Object)">
      <summary>Получить инструмент по системному идентификатору.</summary>
      <param name="provider">.</param>
      <param name="nativeIdStorage">Хранилище системных идентификатор инструментов.</param>
      <param name="storageName">Имя хранилища.</param>
      <param name="nativeId">Внутренний идентификатор торговой системы.</param>
      <returns>Полученный инструмент. Если инструмент по данным критериям отсутствует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.LookupByCode(StockSharp.BusinessEntities.ISecurityProvider,System.String)">
      <summary>Получить инструмент по коду инструмента.</summary>
      <param name="provider">Поставщик информации об инструментах.</param>
      <param name="code">Код инструента.</param>
      <returns>Полученный инструмент. Если инструмент по данным критериям отсутствует, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="F:StockSharp.Algo.TraderHelper.LookupAllCriteria">
      <summary>Найти все инструменты по фильтру.</summary>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsLookupAll(StockSharp.BusinessEntities.Security)">
      <summary>Определить, что <paramref name="criteria" /> является фильтром ВСЕ.</summary>
      <param name="criteria">Инструмент, поля которого будут использоваться в качестве фильтра.</param>
      <returns>Результат проверки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.LookupAll(StockSharp.BusinessEntities.ISecurityProvider)">
      <summary>Получить все доступные инструменты.</summary>
      <param name="provider">Поставщик информации об инструментах.</param>
      <returns>Все доступные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.DeleteAll(StockSharp.Algo.Storages.ISecurityStorage)">
      <summary>Удалить все инструменты.</summary>
      <param name="storage">Хранилище информации об инструментах.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetSecurityValue``1(StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.BusinessEntities.Security,StockSharp.Messages.Level1Fields)">
      <summary>Получить значение маркет-данных для инструмента.</summary>
      <typeparam name="T">Тип значения поля маркет-данных.</typeparam>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="security">Инструмент стакана.</param>
      <param name="field">Поле маркет-данных.</param>
      <returns>Значение поля. Если данных нет, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetSecurityValues(StockSharp.BusinessEntities.IMarketDataProvider,StockSharp.BusinessEntities.Security)">
      <summary>Получить все значения маркет-данных для инструмента.</summary>
      <param name="provider">Поставщик маркет-данных.</param>
      <param name="security">Инструмент стакана.</param>
      <returns>Значения полей. Если данных нет, то будет возвращено <see langword="null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToDecimal(System.Double)">
      <summary>Перевести <see cref="T:System.Double" /> в <see cref="T:System.Decimal" />. Если исходное значение <see cref="F:System.Double.NaN" /> или <see cref="M:System.Double.IsInfinity(System.Double)" />, то будет возвращено <see langword="null" />.</summary>
      <param name="value">
        <see cref="T:System.Double" /> значение.</param>
      <returns>
        <see cref="T:System.Decimal" /> значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToDecimal(System.Single)">
      <summary>Перевести <see cref="T:System.Single" /> в <see cref="T:System.Decimal" />. Если исходное значение <see cref="F:System.Single.NaN" /> или <see cref="M:System.Single.IsInfinity(System.Single)" />, то будет возвращено <see langword="null" />.</summary>
      <param name="value">
        <see cref="T:System.Single" /> значение.</param>
      <returns>
        <see cref="T:System.Decimal" /> значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Iso10962(StockSharp.Messages.SecurityMessage)">
      <summary>Получить для инструмента тип в стандарте ISO 10962.</summary>
      <param name="security">Инструмент стакана.</param>
      <returns>Тип в стандарте ISO 10962.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Iso10962ToSecurityType(System.String)">
      <summary>Преобразовать тип в стандарте ISO 10962 в <see cref="T:StockSharp.Messages.SecurityTypes" />.</summary>
      <param name="cfi">Тип в стандарте ISO 10962.</param>
      <returns>Тип инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Iso10962ToOptionType(System.String)">
      <summary>Преобразовать тип в стандарте ISO 10962 в <see cref="T:StockSharp.Messages.OptionTypes" />.</summary>
      <param name="cfi">Тип в стандарте ISO 10962.</param>
      <returns>Тип опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.SafeGetVolume(StockSharp.Messages.ExecutionMessage)">
      <summary>Получить количество операции, или выбросить исключение, если информация отсутствует.</summary>
      <param name="message">Операции.</param>
      <returns>Количество.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.SafeGetOrderId(StockSharp.Messages.ExecutionMessage)">
      <summary>Получить идентификатор заявки, или выбросить исключение, если информация отсутствует.</summary>
      <param name="message">Операции.</param>
      <returns>Идентификатор заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToTicks(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Преобразовать level1 данные в тиковые.</summary>
      <param name="level1">Level1 данные.</param>
      <returns>Тиковые данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsContainsTick(StockSharp.Messages.Level1ChangeMessage)">
      <summary>Проверить, если ли в level1 данных тиковые.</summary>
      <param name="level1">Level1 данные.</param>
      <returns>Результат проверки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToTick(StockSharp.Messages.Level1ChangeMessage)">
      <summary>Преобразовать level1 данные в тиковые.</summary>
      <param name="level1">Level1 данные.</param>
      <returns>Тиковые данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToOrderBooks(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
      <summary>Преобразовать level1 данные в стаканы.</summary>
      <param name="level1">Level1 данные.</param>
      <returns>Стаканы.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsContainsQuotes(StockSharp.Messages.Level1ChangeMessage)">
      <summary>Проверить, если ли в level1 котировки.</summary>
      <param name="level1">Level1 данные.</param>
      <returns>Котировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsToday(System.DateTimeOffset)">
      <summary>Проверить, что дата является текущим днем.</summary>
      <param name="date">Дата.</param>
      <returns>
        <see langword="true" /> если дата является текущим днем, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsGtc(System.DateTimeOffset)">
      <summary>Проверить, является ли дата GTC.</summary>
      <param name="date">Дата.</param>
      <returns>
        <see langword="true" /> если дата GTC, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPlazaTimeInForce(System.Int64)">
      <summary>Получить <see cref="T:StockSharp.Messages.TimeInForce" /> из битового флага.</summary>
      <param name="status">Битовый флаг.</param>
      <returns>
        <see cref="T:StockSharp.Messages.TimeInForce" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsSystem(System.Int64)">
      <summary>Получить системные атрибуты из флага.</summary>
      <param name="status">Битовый флаг.</param>
      <returns>
        <see langword="true" /> если заявка системная, иначе, <see langword="false" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToReadableString(StockSharp.Algo.DataType)">
      <summary>Перевести <see cref="T:StockSharp.Algo.DataType" /> в читаемую строку.</summary>
      <param name="dt">Объект <see cref="T:StockSharp.Algo.DataType" />.</param>
      <returns>Читаемая строка.</returns>
    </member>
  </members>
</doc>